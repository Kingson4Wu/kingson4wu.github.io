<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>拉巴力的纸皮箱</title>
  
  
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2024-10-22T07:17:35.961Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Kingson Wu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>简单记录我在几家公司的经历</title>
    <link href="http://yoursite.com/2024/10/22/20241022-jian-dan-ji-lu-wo-zai-ji-jia-gong-si-de-jing-li/"/>
    <id>http://yoursite.com/2024/10/22/20241022-jian-dan-ji-lu-wo-zai-ji-jia-gong-si-de-jing-li/</id>
    <published>2024-10-22T06:36:03.000Z</published>
    <updated>2024-10-22T07:17:35.961Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>经历了一次大家普遍觉得“没考好”的高考后，我补录进入了广州一家末流的一本学校。出身于广东四五线城市的普通家庭，在高考前我并没有认真研究自己想要选择的专业。经过简单的网上搜索就业率后，我选择了网络工程这个专业。当时我并不认为这个专业与编程有什么关联，甚至可以说我对编程一无所知。</p></li><li><p>进入大学后，习惯于自学的我感到如同置身地狱（初中和高中时期我都是习惯自己看书、解题，几乎很少主动向老师请教）。现在回想起来，这种极端的习惯可能是我未能进一步提升，或走了一些弯路的原因。之所以称之为“地狱难度”，是因为我真的一无所知，只知道努力却无法抓住重点。在大学里，没有明确的方向，学习的内容繁多而杂乱。</p></li><li><p>另一方面，我也得为自己辩解一下。中国的大学（我没有见识过其他国家的情况）计算机专业的教育在一定程度上与社会脱节。缺乏引路人或足够的主动性和渴望，很难在未来的就业中具备足够的竞争力。当然，那时的网络没有现在这么发达，优质的教程较为匮乏。因此，我始终相信年轻人会越来越聪明，只要愿意学习，网络上有很多免费的优质资源，能够帮助我们少走很多弯路。毕竟，站在巨人的肩膀上学习，可以大大提高效率，节约时间。</p></li></ul><h2 id="毕业进入第一家公司-V"><a href="#毕业进入第一家公司-V" class="headerlink" title="毕业进入第一家公司 V"></a>毕业进入第一家公司 V</h2><blockquote><blockquote><p>时长：两年<br>社会经验尚浅，没有好好体会和感受就离开了。<br>个人成长：业务和技术启蒙，基本开发技术和业务流程的熟悉与掌握，大公司职场的适应。</p></blockquote></blockquote><ul><li><p>我首先要感谢三个人：飞哥、龙哥和强哥。</p></li><li><p>飞哥是我关系最好的同事，我们在工作中配合默契，工作之外也相处得非常融洽。他曾告诉我：“我不是来工作的，我是来交朋友的。”随着年龄的增长，我越来越认同，对于绝大多数人来说，人脉确实非常重要。</p></li><li><p>龙哥回想起来应该是我当时工作中的业务小组长。由于刚参加工作，我对这个角色并没有太多概念，我们平常就像普通同事那样相处。龙哥像大哥一样指导我解决工作中的问题，也会和我讨论业务和技术，推荐阅读技术书籍，鼓励我相信自己的学习能力，多读英文书，获取一手资料。工作之外，我们也常常开玩笑，偶尔一起出去吃下午茶。</p></li><li><p>强哥是我遇到的技术能力最强的同事，思维敏捷、动手能力出众。我现在的许多工作习惯都是向他学习的。强哥当时负责组内的基础建设，算是技术含量最高的小组。我后来主动去学习，并自然地加入了这个小组。虽然强哥有时显得严肃，但可能是对某些事情无法忍受。聪明的人有时会觉得与不太聪明的人共事很困难，因此难免会有些暴躁，现在我偶尔也能体会到这种感觉。与强哥的故事并未结束，后来我还跟着他一起创业了一段时间。</p></li><li><p>在这里，我交到了最多的朋友，大家都非常友好。</p></li></ul><h2 id="第二家公司-U"><a href="#第二家公司-U" class="headerlink" title="第二家公司 U"></a>第二家公司 U</h2><blockquote><blockquote><p>时长：一年三个月<br>技术基础较好的公司，但气氛却比较压抑，难以适应。<br>个人成长：学习能力和方法，技术基础原理的积累。</p></blockquote></blockquote><ul><li><p>在这里，我遇到了两个不错的同事，阿舜和阿君。总体来说，我与某些同事相处得较好，但总感觉有些同事特别冷漠，虽然不是故意的，似乎普遍存在社交恐惧，平常默默去食堂吃饭也不打招呼。可能是性格、职业属性、职场压力和公司文化等多方面原因，我个人的感受比较压抑。</p></li><li><p>作为国内前几的大公司，里面确实汇聚了很多人才和技术沉淀，光是在内网的论坛上就能学到不少知识。</p></li><li><p>此外，我在这家公司体验到了大公司内部创业的团队模式，以及组织架构调整和人员变动的经历。</p></li></ul><h2 id="第三家公司-D"><a href="#第三家公司-D" class="headerlink" title="第三家公司 D"></a>第三家公司 D</h2><blockquote><blockquote><p>时长：三个月<br>一家创业公司，最累但也是最开心的时光，同事相处融洽。<br>个人成长：技术管理者全局思考能力的培养，技术规划等经验。</p></blockquote></blockquote><ul><li><p>加入这家公司是前一家公司的强哥邀请的，他是团队的创始人之一，后来他也辞去了前公司的职务，全职加入。</p></li><li><p>团队规模较小，大约十三人，其中开发人员七个，没有专门的测试人员。虽然我只在这里待了三个月就宣布解散，但还是体验到了创业公司的开放与忙碌，当然也有混乱和无奈等。团队的技术人员经验虽然较浅，但各有优点和潜力。其中阿韬是我邀请到下家公司一起共事的。</p></li></ul><h2 id="第四家公司-K"><a href="#第四家公司-K" class="headerlink" title="第四家公司 K"></a>第四家公司 K</h2><blockquote><blockquote><p>时长：六年<br>收入最多，但在大公司光环下却是一个相对奇葩的小作坊。在这里，我的个人能力得到了充分发挥。<br>个人成长：各方面能力的积累与提升，职场经验和事务处理的积累。</p></blockquote></blockquote><ul><li><p>不确定是什么原因，前期技术和业务能力的积累、个人职业能力的成熟、对职场规则的理解，还是这里人才密度不足的影响。在这里，我的职业发展如鱼得水。在六年中经历了多次组织调整和三四次换领导，我也开始带领小规模的技术团队。在这段时间，我得到了同事们不同程度的认可，六年来每年的绩效都是优秀或以上。</p></li><li><p>我认为有几个因素促成了这一点：遇到优秀的领导、扎实的个人技术能力、良好的透明沟通等。最核心的窍门在于，在正确的职场价值观前提下，常常换位思考，这样基本能做出合理的选择。当然，有时在某些原则下可能会产生冲突和不愉快，或许有更好的处理方式，但我个人尚未掌握，某些方面也不想耗费额外时间，显得比较直接。另外，我的行事风格也在增加自己的“可替代性”。</p></li><li><p>在这里，我结识了许多关系良好的同事，毕竟待了很多年。其中，特别提到阿拳、阿杰和阿韬。</p></li><li><p>阿拳是我偶然发现的校友，比我小一届。有些人天然有种默契，眼神一对，自然而然就成了好朋友。他是一个喜欢技术挑战，渴望提升自己能力的人，但似乎在职场上的投入和专注不足，始终未能如愿。经历了换团队后，他也没有改观，最终离开了，加入了其他公司。现在看到他职业发展越来越好，生活也越来越丰富，我意识到，合适的环境和机遇对我们来说确实很重要。</p></li><li><p>阿杰是我刚加入公司时的同事，后来换团队后的领导。他与之前的领导不同，比较平易近人，尽量将公司的各种政策和职场潜规则向我们说明白。尽管身处职场，他总能从一个打工人的角度保持良心。大多数情况下，我们的相处就像朋友一样。</p></li><li><p>阿韬是前公司 D 的同事，他给我留下的印象最深刻的就是人际关系很好，从未见他与任何人发生冲突，平常开朗，喜欢群体活动。加入公司后，除了工作，我们私下相处的时间也最多，成为了我最好的朋友。在公司，他的评价一直很好，大家有心事都会找他倾诉，我常戏称他为“中央空调”。在这里，虽然技术能力是基础，但大多数情况下，沟通能力更为重要。</p></li></ul><p>–<br>“This time he comes inside, he’ll lead you to ferocious shot.”<br>翻译：这次他向内切，准备发出一记猛烈的射门。<br>解析：描述球员的战术动作，暗示即将发生的强有力射门。<br>“He’s dipping.”<br>翻译：球在下坠。<br>解析：形容球的轨迹，表明射门的弧度和力量。<br>“That is further away from Tim Howard.”<br>翻译：那球离蒂姆·霍华德更远了。<br>解析：指球飞向了门的远端，给守门员带来困难。<br>“More from this classic later, but for now, take a bow.”<br>翻译：稍后会有更多经典瞬间，但现在，给他一个鞠躬。<br>解析：暗示比赛中还有其他精彩瞬间，同时赞扬当前表现。<br>“Craig Bellamy, Ireland the most advanced City player at the moment.”<br>翻译：克雷格·贝拉米，爱尔兰是当前最前锋的城队球员。<br>解析：指出贝拉米在场上的位置和角色。<br>“Craig Felony bearing down, letting fly.”<br>翻译：克雷格·费尔农逼近，放手一击。<br>解析：可能是笔误，实际应为贝拉米，强调他的进攻动作。<br>“Wonderful, wonderful goal.”<br>翻译：精彩，精彩的进球。<br>解析：对进球的高度赞美，强调其质感。<br>“Just a sensational strike.”<br>翻译：这真是一记惊人的射门。<br>解析：进一步强调射门的质量和效果。<br>“Than the Welshman.”<br>翻译：比起这位威尔士人。<br>解析：可能是在比较贝拉米和其他球员的表现，强调其出色。<br>“Whose self relief knows no bounds.”<br>翻译：他的自我解脱无与伦比。<br>解析：描述球员在进球后释放的情感和喜悦。<br>“Just watch Bellamy as he storms inside and decides to have a goal.”<br>翻译：只需看看贝拉米如何内切并决定射门。<br>解析：强调贝拉米的决策和行动力。<br>“What an effort Costa.”<br>翻译：科斯塔真是个拼劲十足的球员。<br>解析：称赞科斯塔在比赛中的努力和表现。<br>“No chance with that one.”<br>翻译：对此球毫无机会。<br>解析：说明守门员对这记射门无能为力。<br>“This is Bentner Benna.”<br>翻译：这是本特纳·本纳。<br>解析：提到本特纳，可能是在强调他的表现。<br>“And he’s got a stunning goal.”<br>翻译：他打入了一记惊艳的进球。<br>解析：再次强调进球的美丽与重要性。<br>“And it is the happiest of anniversaries for Arsene Wenger.”<br>翻译：这对阿尔塞纳·温格来说是最快乐的纪念日。<br>解析：说明这一进球或表现与温格的成就相关，可能是他执教的里程碑日。<br>“Arsenal have hit 6.”<br>翻译：阿森纳已经打入6球。<br>解析：指出比赛的进球数，显示阿森纳的强大表现。<br>“One thing on his mind hitting the target and that’s power.”<br>翻译：他脑中只有一件事，那就是射门的精准与力量。<br>解析：强调球员的专注和决心。<br>“That’s taken it past Paul Robinson in the Blackburn goal in off the post.”<br>翻译：球从保罗·罗宾逊身边飞过，击中立柱入网。<br>解析：形象地描述进球过程，强调进球的难度和精彩。<br>“Not known for his goal scoring, Michael Essien can leave Chelsea fans in awe.”<br>翻译：迈克尔·埃辛并不以进球著称，但他能让切尔西球迷惊叹。<br>解析：指出埃辛的进攻能力超出预期，令人印象深刻。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;经历了一次大家普遍觉得“没考好”的高考后，我补录进入了广州一家末流的一本学校。出身于广东四五线城市的普通家庭，在高考前我并没有认真研究自己想要选择的专业。经过简单的网上搜索就业率后，我选择了网络工程这个专业。当时我并不认为这个专业与编程有什么关联，甚至可以</summary>
      
    
    
    
    
    <category term="职场" scheme="http://yoursite.com/tags/%E8%81%8C%E5%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>谈谈接口调用中的序列化协议</title>
    <link href="http://yoursite.com/2024/07/24/20240724-tan-tan-jie-kou-diao-yong-zhong-de-xu-lie-hua-xie-yi/"/>
    <id>http://yoursite.com/2024/07/24/20240724-tan-tan-jie-kou-diao-yong-zhong-de-xu-lie-hua-xie-yi/</id>
    <published>2024-07-24T08:27:09.000Z</published>
    <updated>2024-07-24T09:09:35.614Z</updated>
    
    <content type="html"><![CDATA[<blockquote><blockquote><p>接口调用存在于内部服务之间，也存在于客户端和服务端之间<br>既然涉及接口调用，必然就涉及到数据的序列化</p></blockquote></blockquote><h2 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h2><ul><li>什么是 RPC？<ul><li>RPC是”远程过程调用”(Remote Procedure Call)的缩写。这是一种计算机通信协议,允许程序调用另一个地址空间(通常是在其它计算机上)的子程序或过程,而程序员就像调用本地程序一样,无需额外地为这个交互作用编程。</li></ul></li><li>其实 RPC 不仅可以存在于内部服务之间，前端和服务端之间的交互也可以用 RPC</li></ul><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><ul><li>一般情况下，我们习惯于使用 idl 文件定义数据格式（比如 thrift 或 Protocol Buffer），然后使用 RPC（比如 gPRC 等）用于服务之间的调用；而使用 JSON 和 HTTP 作为前端和服务端的交互方式</li><li>这里提一点，回看 RPC 的定义，即使使用 JSON 作为序列化协议，也可以使用 RPC 作为接口调用，具体要看 RPC 框架的实现。</li></ul><h2 id="使用-RPC-和-IDL文件-的好处"><a href="#使用-RPC-和-IDL文件-的好处" class="headerlink" title="使用 RPC 和 IDL文件 的好处"></a>使用 RPC 和 IDL文件 的好处</h2><ul><li>本文只关注序列化方面相关的好处</li><li>举个例子，接口调用简单使用 HTTP + JSON；如果后续加字段，而调用方使用不规范，复用接口调用的返回对象用于业务的其他逻辑，而字段名刚好相同，则会冲突从而可能导致逻辑异常，这种低级错误无论是客户端还是服务端都经常发生</li><li>理论上每个接口都应该有单独的接口响应类，这样才不会在后续加字段时产生语义冲突,虽然写起来麻烦，但这是最规范最严谨的做法，所以自动化代码工具很重要</li><li>其中一种解决方式：使用 IDL 文件定义数据格式，并且通过 RPC 框架限制调用的返回对象不被随意设置，从而解决这种低级又容易忽视的错误</li><li>对 RPC 框架的要求：<ol><li>限制返回对象不被修改</li><li>排查工具完善，支持将数据转成可阅读格式（比如使用Protobuf二进制传输，将很难排查）</li><li>适配多种语言的客户端 sdk（包括客户端）</li></ol></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;接口调用存在于内部服务之间，也存在于客户端和服务端之间&lt;br&gt;既然涉及接口调用，必然就涉及到数据的序列化&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;RPC&quot;&gt;&lt;a href=&quot;#RPC</summary>
      
    
    
    
    
    <category term="RPC" scheme="http://yoursite.com/tags/RPC/"/>
    
    <category term="序列化" scheme="http://yoursite.com/tags/%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>高效会议的重要性</title>
    <link href="http://yoursite.com/2024/07/18/20240718-gao-xiao-hui-yi-de-chong-yao-xing/"/>
    <id>http://yoursite.com/2024/07/18/20240718-gao-xiao-hui-yi-de-chong-yao-xing/</id>
    <published>2024-07-18T04:13:08.000Z</published>
    <updated>2024-07-18T07:41:31.610Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>生命是以时间为单位的，浪费别人的时间等于谋财害命；浪费自己的时间，等于慢性自杀。 - 鲁迅</p></blockquote><ul><li>平常在工作中，有些同事在没有提前发会议主题和相关资料前，突然就拉一群人一起开会，方便了自己，却浪费了别人的时间。</li><li>比如一些不专业的产品为了节省自己的时间，也不做充分的会前准备，拉一堆开发给自己做需求完善员，对别人的时间极其不尊重。</li></ul><h2 id="高效会议"><a href="#高效会议" class="headerlink" title="高效会议"></a>高效会议</h2><ol start="0"><li>能线下小部分人沟通清楚的，不必拉齐人一起开会</li><li>会前发相关资料，让潜在参与者提前了解</li><li>看完资料，可以发相关疑问，有些内容可以提前单独沟通</li><li>真正开会前发会议主题和目标</li><li>会有要有会议纪要，结论，执行人等</li></ol><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://mp.weixin.qq.com/s/Eew2WXHKskYR3VH35QTh4A">去TMD低效会议</a></li></ul><pre>最近和几个大佬朋友聊天，大家不约而同的在吐槽公司开会效率低下的问题。一提到开会，想必大家都会浮现各种场景，甚至有人可能要开始骂娘了吧？不断延长的会议时间，沉默的参会成员，语无伦次的会议组织者，不断跑偏的主题，一不小心一天就全在开会了。what? 不仅一天全开会了，还没有任何有用的结论？作为一个开会无数的互联网老鸟，针对高效开会，我有以下六点建议：1.能不开会就不要开会很多会其实根本没有开的必要，不少人平时不沟通，沟通全靠会议！一旦开会出现几个人相互扯皮，你一句我一句的情况，基本可以断定这几个人平时就不怎么沟通，或者沟通有问题。更为可怕的是，有些管理者，不开会就不知道自己要做什么！曾经我招过一个产品leader，热衷于组织各种会议，基本可以在会议室呆着不用出来的那种，但关键事情的推进都没落地。具体注意点如下：会议组织者还没完全想清楚之前，坚决不要开会能定点沟通清楚的问题，坚决不要开会能召集3，4个人花5分钟说清楚的事情，坚决不要开会2.开小会，越小越好会议人数尽量控制在7个人以内，人越多会议效率越低。有时候喊很多人开会，无非是出于显示你的权威或者逃避责任，潜台词是：反正大家都参加会议了，出了问题一起扛。不知道大家注意过一个现象没有，不少微信群人少的时候，大家都很活跃，如果进来一些不说话的「潜水者」，大家也就慢慢都不说话了。开会也是一个道理！如果有不太相关的人进来，他肯定会不怎么参与讨论，而其他人的思维活跃度都会受影响。那么有人会问：如果会议就是需要很多人参与怎么办？可以将一个大的会议拆解成几个议题，分议题开小会。然后再把小会的决策者喊一起开会。乔布斯就特别重视控制会议人数，在「疯狂的简洁」一书中记载了乔布斯一个小故事：「在一次和广告公司的例行会议上，乔布斯突然发现了一位名叫Lorrie的陌生的参会者，乔布斯指着Lorrie问到：“请问您是哪位？”，Lorrie解释自己需要听这个会议，但最后乔布斯还是礼貌的请Lorrie小姐离开了：“我不觉得你有必要参加这个会议，Lorrie小姐，谢谢。”」我猜，Lorrie小姐估计也是暗爽的吧，毕竟她估计也是莫名其妙被拉到这个会议。3.开会前做好充分准备会议组织者需要把会议主题、会议背景、提前同步给所有参会人员，甚至需要提前进行答疑及相关沟通工作。比如产品的技术评审会，不少产品经理可能没有提前发出原型做沟通。结果在会议上大家需要先理解原型，而不是上来直奔主题。充分的准备工作，会让会议更加高效，大家坐下来开会的时候已经清楚所有信息，开门见山展开思辨，而不是一屋子人毫无准备甚至满头雾水。4.能站着开，就别坐着开比尔盖茨说过一句话，“当你能站着开会，就不要坐下来”。会议室的椅子也不能用太舒服的那种，为什么？当人们坐在一个舒适且舒服的椅子上，大脑更多的时候是在放空状态，注意力无法被集中。坐在那里舒舒服服的探讨，效率远低于站着快速解决。当站着开会，不再有人坐在办公椅上犯困想打瞌睡，不再有人玩手机看电脑。时间大大的减少，不再沉默寡言，而是速战速决。每日的项目进度之类，特别适合10-20分钟的站会形式。站着开会，大家都不想浪费时间，自然就更能保证高节奏，高效率。5.盯紧走神的人开会的过程中，一般会不断有人走神。这点很考验会议组织者，如果发现有人走神，需要盯着他，看他眼睛。如果还不行，就需要提醒下拉回他的注意力。开会应该是个激烈思辨的过程，走神是要被杜绝的。如果团队中发现开会经常走神的人，那要小心了。他要么是对业务不太了解，说不上话，要么是心灰意冷已经不想说话。「要引起重视了」6.会后，有结论、有责任开会过程要对关键结论做会议纪要，在会议结束后，尽早发出会议记录。会议记录可能会有遗漏和错误的地方，尽早将会议记录发给所有相关人，可以让其它参会者检查，提出问题或作出补充。会议结束后，将任务指派给每一位责任人。这也往往是会议组织者的工作，不仅仅做出决定，更要负责落实决定的执行。如果这一步做不到位，那基本可以说这个会白开了。最后总结几句：开会是个大学问，千万不要小看提升的那点效率。10个人开会，浪费2小时，就相当于浪费了一个人一天的生命和一个人的工资。工作的目标是为了创造价值，而不是摧毁价值。低效会议无疑是摧毁价值的重要帮凶！！！浪费时间等于谋财害命，高效开会是每个会议组织者必须学会的技能。</pre>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;生命是以时间为单位的，浪费别人的时间等于谋财害命；浪费自己的时间，等于慢性自杀。 - 鲁迅&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;平常在工作中，有些同事在没有提前发会议主题和相关资料前，突然就拉一群人一起开会，方便了自己，却浪费了别</summary>
      
    
    
    
    
    <category term="职场" scheme="http://yoursite.com/tags/%E8%81%8C%E5%9C%BA/"/>
    
    <category term="会议" scheme="http://yoursite.com/tags/%E4%BC%9A%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>看似理科实则文科，看似文科实则理科</title>
    <link href="http://yoursite.com/2024/07/17/20240717-kan-si-li-ke-shi-ze-wen-ke-kan-si-wen-ke-shi-ze-li-ke/"/>
    <id>http://yoursite.com/2024/07/17/20240717-kan-si-li-ke-shi-ze-wen-ke-kan-si-wen-ke-shi-ze-li-ke/</id>
    <published>2024-07-17T09:07:49.000Z</published>
    <updated>2024-07-17T09:15:04.776Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>前段时间在看Rust，所有权部分涉及到很多规则，让我重新反思了传统文科和理科的区别</p></li><li><p>学习一门编程语言，大家普遍会认为这是一门理科</p></li><li><p>但像Rust语言的所有权规则，让我想到了英语中的各种时态规则</p></li><li><p>大家基本会认为英语是文科</p></li><li><p>但我其实认为Rust中的规则和英语中的规则，其实没啥区别，都是逻辑规则，比较烧脑。</p></li><li><p>所以无论是学习文科还是学习理科，有些地方，都是需要良好的逻辑能力。</p></li><li><p>逻辑能力好的人，基本学习文科理科都不会有太大差异。都是聪明的人。</p></li><li><p>当然中理科中偏理的部分，文科中偏文的部分，这些可能有差异则另说。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;前段时间在看Rust，所有权部分涉及到很多规则，让我重新反思了传统文科和理科的区别&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;学习一门编程语言，大家普遍会认为这是一门理科&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;但像Rust语言的所有权规则，让我想到了英语中的各种时态规</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>基于Saturn定时任务的客户端工具设计</title>
    <link href="http://yoursite.com/2024/05/30/20240530-ji-yu-saturn-ding-shi-ren-wu-de-ke-hu-duan-gong-ju-she-ji/"/>
    <id>http://yoursite.com/2024/05/30/20240530-ji-yu-saturn-ding-shi-ren-wu-de-ke-hu-duan-gong-ju-she-ji/</id>
    <published>2024-05-30T04:15:11.000Z</published>
    <updated>2024-07-14T02:54:25.847Z</updated>
    
    <content type="html"><![CDATA[<ul><li>基于之前写的这篇<a href="https://kingson4wu.github.io/2023/07/03/20230703-tan-tan-ding-shi-ren-wu-de-yuan-li-he-ying-yong/">谈谈定时任务的原理和应用</a>继续聊。</li></ul><p><img src="/2024/05/30/20240530-ji-yu-saturn-ding-shi-ren-wu-de-ke-hu-duan-gong-ju-she-ji/saturn_uds.drawio.png"></p><ul><li><p>由于业务进程不是Java编写的，无法使用Saturn提供的Java定时任务，只能使用Shell定时任务</p></li><li><p>这里选择用UDS实现Shell进程和服务进程之间的通信，实现和使用Java定时任务一样的效果</p></li><li><p>在上次的实现中，只考虑了如何触发定时任务执行，并没有考虑如何停止</p></li></ul><h2 id="实现对执行中的任务进行停止"><a href="#实现对执行中的任务进行停止" class="headerlink" title="实现对执行中的任务进行停止"></a>实现对执行中的任务进行停止</h2><p><img src="/2024/05/30/20240530-ji-yu-saturn-ding-shi-ren-wu-de-ke-hu-duan-gong-ju-she-ji/saturn_signal.drawio.png">    </p><ul><li><p>通过测试可以知道，当在saturn控制台点击终止任务时，会对shell进程发出terminated信号</p></li><li><p>如何不是通过saturn控制台触发，直接终端执行shell命令时，操作Crtl+C时，会对Shell进程发出interrupt信号</p></li><li><p>基于上述研究，提供以下方式停止业务服务的运行中的定时任务</p><ol><li>通过saturn控制台点击终止任务，发terminated信号</li><li>通过操作Crtl+C，发interrupt信号</li><li>通过执行shell命令，指定任务名称和-stop选项，直接发出终止任务请求</li></ol></li><li><p>具体实现参考：<a href="https://github.com/Kingson4Wu/saturncli">saturncli</a></p></li></ul><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><ul><li>经过测试，saturn的调度不会因为设置的频率太快导致并发运行，只会执行完一个任务再执行下一个</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;基于之前写的这篇&lt;a href=&quot;https://kingson4wu.github.io/2023/07/03/20230703-tan-tan-ding-shi-ren-wu-de-yuan-li-he-ying-yong/&quot;&gt;谈谈定时任务的原理和应用&lt;/a</summary>
      
    
    
    
    
    <category term="Go" scheme="http://yoursite.com/tags/Go/"/>
    
    <category term="定时任务" scheme="http://yoursite.com/tags/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    
    <category term="Saturn" scheme="http://yoursite.com/tags/Saturn/"/>
    
    <category term="UDS" scheme="http://yoursite.com/tags/UDS/"/>
    
    <category term="Signal" scheme="http://yoursite.com/tags/Signal/"/>
    
  </entry>
  
  <entry>
    <title>也谈谈feed流的设计</title>
    <link href="http://yoursite.com/2024/05/28/20240528-ye-tan-tan-feed-liu-de-she-ji/"/>
    <id>http://yoursite.com/2024/05/28/20240528-ye-tan-tan-feed-liu-de-she-ji/</id>
    <published>2024-05-28T05:56:23.000Z</published>
    <updated>2024-05-29T01:52:15.354Z</updated>
    
    <content type="html"><![CDATA[<blockquote><blockquote><p>几年前也做过feed流相关的服务，虽然网上相关的文章很多，这里也做个人的简要记录和总结<br>方案并非原创，当时是参考其他业务团队的设计</p></blockquote></blockquote><ul><li>需求背景：做一个用户动态模块，可以发动态，可以关注别人动态，有推荐列表，有消息提醒（其实就是微博的基本功能）</li></ul><h1 id="实现逻辑流程"><a href="#实现逻辑流程" class="headerlink" title="实现逻辑流程"></a>实现逻辑流程</h1><ul><li><p>整个feed流设计都是强依赖Redis来实现的，以下列出key设计和对应的功能模块</p><ul><li>粉丝的feed流 - 【feed_list_$userId】<ul><li>member-$id_$userId_$type （score-addtime）</li></ul></li><li>粉丝的feed流为空标志 - 【【feed_list_empty_$userId】】- 防止每次请求都穿透到DB</li><li>用户的活跃粉丝列表 - 【active_fans_list_$userId】</li><li>用户的活跃属性 - 【active_user_status_${userId}】</li><li>动态详情 - 【cache.user.dynamic_${dynamicId}】 - MGet获取</li></ul></li><li><p>数据库分表设计</p><ul><li>用户动态表 - 按用户id分库</li><li>评论表 - 按动态id分库（根据业务，一般都是单个动态的所有评论）</li><li>点赞表 - 按用户id分库（根据业务，一般都是动态列表中展示当前用户的点赞状态）</li></ul></li><li><p>feed流使用sortset，score是addtime</p></li><li><p>推模式，通过维护用户的活跃粉丝列表（有数量限制），推到粉丝的feed流</p></li><li><p>拉模式，通过请求第一页或其他接口进行预加载，查询粉丝的关注人和对应动态（有数量限制），构建粉丝自己feed流</p></li></ul><h2 id="01-feed流-构建-整体流程"><a href="#01-feed流-构建-整体流程" class="headerlink" title="01.feed流 构建 整体流程"></a>01.feed流 构建 整体流程</h2><p><img src="/2024/05/28/20240528-ye-tan-tan-feed-liu-de-she-ji/01.feed%E6%B5%81%E6%9E%84%E5%BB%BA.drawio.png"></p><ul><li>用户发动态、删动态、关注和取关事件，都会对feed流有相应操作</li><li>通过发布事件的设计进行业务逻辑解耦</li></ul><h3 id="用户发动态（推模式）"><a href="#用户发动态（推模式）" class="headerlink" title="用户发动态（推模式）"></a>用户发动态（推模式）</h3><ol><li>用户发布动态（写入DB）</li><li>查询用户的活跃粉丝列表（Redis）</li><li>写入粉丝的Feed流（Redis）</li><li>写入消息表</li></ol><h3 id="粉丝拉关注列表（拉模式）（请求第一页或其他接口，预加载）"><a href="#粉丝拉关注列表（拉模式）（请求第一页或其他接口，预加载）" class="headerlink" title="粉丝拉关注列表（拉模式）（请求第一页或其他接口，预加载）"></a>粉丝拉关注列表（拉模式）（请求第一页或其他接口，预加载）</h3><ol><li>获取feed流（Redis）</li><li>获取关注用户列表（RPC）（限制2000个粉丝）</li><li>获取关注人的动态数据（DB）（限制没人100条动态）</li><li>写入个人的Feed流（Redis）</li><li>成为活跃用户（Redis）</li></ol><h2 id="02-动态消息交互"><a href="#02-动态消息交互" class="headerlink" title="02.动态消息交互"></a>02.动态消息交互</h2><p><img src="/2024/05/28/20240528-ye-tan-tan-feed-liu-de-she-ji/02.%E5%8A%A8%E6%80%81%E6%B6%88%E6%81%AF%E4%BA%A4%E4%BA%92.drawio.png"></p><ul><li>消息表 和 消息读取时间表（用于控制用户红点提示和读取消息列表的范围）</li><li>消息表保存7天定时清除</li></ul><h2 id="03-feed流预加载策略（pull模式）"><a href="#03-feed流预加载策略（pull模式）" class="headerlink" title="03.feed流预加载策略（pull模式）"></a>03.feed流预加载策略（pull模式）</h2><p><img src="/2024/05/28/20240528-ye-tan-tan-feed-liu-de-she-ji/03.feed%E6%B5%81%E9%A2%84%E5%8A%A0%E8%BD%BD%E7%AD%96%E7%95%A5%EF%BC%88pull%E6%A8%A1%E5%BC%8F%EF%BC%89.drawio.png"></p><ul><li>。。。。</li><li>将用户加入为活跃粉丝</li></ul><h2 id="04-动态新增、删除（push模式），活跃粉丝处理"><a href="#04-动态新增、删除（push模式），活跃粉丝处理" class="headerlink" title="04.动态新增、删除（push模式），活跃粉丝处理"></a>04.动态新增、删除（push模式），活跃粉丝处理</h2><p><img src="/2024/05/28/20240528-ye-tan-tan-feed-liu-de-she-ji/04.%E5%8A%A8%E6%80%81%E6%96%B0%E5%A2%9E%E3%80%81%E5%88%A0%E9%99%A4%EF%BC%88push%E6%A8%A1%E5%BC%8F%EF%BC%89%EF%BC%8C%E6%B4%BB%E8%B7%83%E7%B2%89%E4%B8%9D%E5%A4%84%E7%90%86.drawio.png"></p><ul><li>用户的活跃粉丝列表逻辑<ol><li>拉取过feed流或发布过动态等操作的用户，都会设置成有活跃粉丝属性的用户</li><li>RPC获取用户的粉丝列表，过滤掉非活跃用户，保存到用户的活跃粉丝列表</li><li>关注和取关事件，也更新活跃粉丝列表</li></ol></li></ul><h2 id="05-关注、取关-事件-对feed流的处理"><a href="#05-关注、取关-事件-对feed流的处理" class="headerlink" title="05.关注、取关 事件 对feed流的处理"></a>05.关注、取关 事件 对feed流的处理</h2><p><img src="/2024/05/28/20240528-ye-tan-tan-feed-liu-de-she-ji/05.%E5%85%B3%E6%B3%A8%E3%80%81%E5%8F%96%E5%85%B3%E4%BA%8B%E4%BB%B6%E5%AF%B9feed%E6%B5%81%E7%9A%84%E5%A4%84%E7%90%86.drawio.png"></p><h2 id="06-获取feed流"><a href="#06-获取feed流" class="headerlink" title="06.获取feed流"></a>06.获取feed流</h2><p><img src="/2024/05/28/20240528-ye-tan-tan-feed-liu-de-she-ji/06.%E8%8E%B7%E5%8F%96feed%E6%B5%81.drawio.png"></p><ul><li>有了前面的推拉模式，用户直接从redis获取feed流即可</li></ul><h2 id="07-动态类型版本设计"><a href="#07-动态类型版本设计" class="headerlink" title="07.动态类型版本设计"></a>07.动态类型版本设计</h2><p><img src="/2024/05/28/20240528-ye-tan-tan-feed-liu-de-she-ji/07.%E5%8A%A8%E6%80%81%E7%B1%BB%E5%9E%8B%E7%89%88%E6%9C%AC%E8%AE%BE%E8%AE%A1.drawio.png"></p><ul><li><p>随着动态类型的新增，客户端旧版本不支持新类型动态，需要过滤；</p></li><li><p>目前feed流是存在redis的，直接过滤可能会导致旧版本数据为空，可以通过多版本动态来区分</p></li><li><p>实现描述</p><ol><li>用户获取feed流，根据客户端的版本号等信息，判断出客户端支持的feed版本，并构建对应的feed流</li><li>用户发布动态，构建用户存在的活跃动态版本的feed流（为了用户的新旧版本都兼容）</li></ol></li></ul><h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><ul><li>很久之前做的一次实验<ul><li>取消了微信黑名单，没看到之前的人的朋友圈。说明微信朋友圈也是feed持久化的方式实现</li><li>微博也是这样，之前关注过，取关后再恢复，内容也能恢复，说明feed表只是逻辑删（应该是存数据库表了）</li></ul></li><li>微博feed实现（猜测）<ol><li>为每个用户保存他所有关注的用户的feed表数据</li><li>假如取关，则重写关注能恢复数据（逻辑删除）</li><li>但如果之前没关注的用户，则他之前的动态不会出现在feed表中</li></ol></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;几年前也做过feed流相关的服务，虽然网上相关的文章很多，这里也做个人的简要记录和总结&lt;br&gt;方案并非原创，当时是参考其他业务团队的设计&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;需</summary>
      
    
    
    
    
    <category term="feed流" scheme="http://yoursite.com/tags/feed%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>聊聊配置中心</title>
    <link href="http://yoursite.com/2024/05/09/20240509-liao-liao-pei-zhi-zhong-xin/"/>
    <id>http://yoursite.com/2024/05/09/20240509-liao-liao-pei-zhi-zhong-xin/</id>
    <published>2024-05-09T07:28:40.000Z</published>
    <updated>2024-05-09T08:36:03.933Z</updated>
    
    <content type="html"><![CDATA[<blockquote><blockquote><p>第一次接触配置中心，是快十年前了，那时的配置中心还没像现在那么多成熟的开源项目，很多公司都需要结合自身业务自研。</p></blockquote></blockquote><h2 id="使用配置中心的好处"><a href="#使用配置中心的好处" class="headerlink" title="使用配置中心的好处"></a>使用配置中心的好处</h2><ol><li>快速发布变更配置，实时生效</li><li>对于不复杂的系统或业务配置，可以避免写繁琐的后台，但又具备快速变更的功能</li><li>读取配置性能高，一般配置后，都是以内存变量的方式常驻在服务中，可以说读取配置几乎零成本</li></ol><h2 id="配置中心的核心-推送原理"><a href="#配置中心的核心-推送原理" class="headerlink" title="配置中心的核心-推送原理"></a>配置中心的核心-推送原理</h2><blockquote><blockquote><p>这里主要讲一下个人实际接触的三种原理，其实从宏观本质上看，三种方案原理是一致的</p></blockquote></blockquote><ol><li>第一家公司的配置中心自研方案，借助ZooKeeper的临时节点变更事件，从而实现实时推送</li></ol><p><img src="/2024/05/09/20240509-liao-liao-pei-zhi-zhong-xin/zookeeper_config_center.png"></p><ol start="2"><li><p>第二家公司的服务治理中心的实现方案，使用Netty使服务中心和各服务之间建立TCP长链接，从而实现配置推送</p></li><li><p>第三家公司使用Apollo开源项目作为配置中心，原理是使用HTTP的Long polling方案</p></li></ol><ul><li>从原理的本质上看，三者都是通过保持TCP连接不断开，从而复用这个通道进行数据推送</li><li>除了推送的实现很重要之外，后台管理系统的设计和客户端的SDK也很重要。因为光能实时推送是不够的，要让接入配置中心方便，以及能方便管理和发布配置也是很关键的。在这一点上，Apollo这个开源项目是很不错的。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;第一次接触配置中心，是快十年前了，那时的配置中心还没像现在那么多成熟的开源项目，很多公司都需要结合自身业务自研。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;使用配置中心的好处&quot;&gt;&lt;a </summary>
      
    
    
    
    
    <category term="配置中心" scheme="http://yoursite.com/tags/%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/"/>
    
    <category term="ZooKeeper" scheme="http://yoursite.com/tags/ZooKeeper/"/>
    
    <category term="Apollo" scheme="http://yoursite.com/tags/Apollo/"/>
    
  </entry>
  
  <entry>
    <title>业务开发中的术与道</title>
    <link href="http://yoursite.com/2024/05/07/20240507-ye-wu-kai-fa-zhong-de-zhu-yu-dao/"/>
    <id>http://yoursite.com/2024/05/07/20240507-ye-wu-kai-fa-zhong-de-zhu-yu-dao/</id>
    <published>2024-05-07T09:43:26.000Z</published>
    <updated>2024-07-30T11:23:29.222Z</updated>
    
    <content type="html"><![CDATA[<blockquote><blockquote><p>从事IT行业若干年，有时回首，不禁感叹，很多技术方案和日常生活息息相关，可以相互借鉴。</p></blockquote></blockquote><blockquote><blockquote><p>以下只是草稿，以后有缘再整理</p></blockquote></blockquote><blockquote><blockquote><p>以下每项并不是独立，而是相互重叠的</p></blockquote></blockquote><ul><li>从日常的工作中总结常用的套路，勤记录，提升后续的效率</li><li>多开发一些能提高效率的小工具，逐步优化，并可以给其他同事使用</li><li>抽时间回顾和总结</li><li>对用户的业务数据感兴趣，并思考哪些技术优化值得做</li></ul><h1 id="技术追求"><a href="#技术追求" class="headerlink" title="技术追求"></a>技术追求</h1><ul><li>提升自身和团队的水平、服务架构合理性和性能的考虑、提高开发效率和体验</li></ul><h2 id="定时任务使用UDS作为触发运行的通知方式"><a href="#定时任务使用UDS作为触发运行的通知方式" class="headerlink" title="定时任务使用UDS作为触发运行的通知方式"></a>定时任务使用UDS作为触发运行的通知方式</h2><ul><li>基于架构的完全性考虑：不暴露非本机触发的机会</li><li>基于架构的合理性考虑：复用已有服务的逻辑和资源，无需新开进程</li><li>具体实现看：<a href="https://kingson4wu.github.io/2023/07/03/20230703-tan-tan-ding-shi-ren-wu-de-yuan-li-he-ying-yong/">谈谈定时任务的原理和应用</a> - 使用域信号通知通知服务</li></ul><h1 id="代码质量"><a href="#代码质量" class="headerlink" title="代码质量"></a>代码质量</h1><h2 id="使用代码扫描工具"><a href="#使用代码扫描工具" class="headerlink" title="使用代码扫描工具"></a>使用代码扫描工具</h2><ul><li>比如Java的Sonar、Golang的golint等</li></ul><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><ul><li>及时发现新代码逻辑问题，以及发现避免误改动等</li><li>提交代码检查并及时阻断</li></ul><h2 id="代码Review"><a href="#代码Review" class="headerlink" title="代码Review"></a>代码Review</h2><ul><li>上面的事项自动化，比如和gitlab pipeline结合，在开发阶段就及时修正；</li><li>后续代码review可以避免审核低级问题，提高效率</li></ul><h1 id="开发效率"><a href="#开发效率" class="headerlink" title="开发效率"></a>开发效率</h1><h2 id="脚本工具"><a href="#脚本工具" class="headerlink" title="脚本工具"></a>脚本工具</h2><ul><li>开发快速生成curl脚本的工具，便于快速定位问题，以及反馈时提供复现实例；</li></ul><h1 id="代码复用"><a href="#代码复用" class="headerlink" title="代码复用"></a>代码复用</h1><h2 id="通用组件抽象"><a href="#通用组件抽象" class="headerlink" title="通用组件抽象"></a>通用组件抽象</h2><ul><li>apollo灰度工具</li><li>bi数据上报组件</li><li>消息通知组件</li></ul><h2 id="业务组件抽象"><a href="#业务组件抽象" class="headerlink" title="业务组件抽象"></a>业务组件抽象</h2><ul><li>目前都流行微服务，但有很多上游的逻辑是可以复用的，可以抽象出来，通过代码库的方式复用</li></ul><h1 id="服务稳定"><a href="#服务稳定" class="headerlink" title="服务稳定"></a>服务稳定</h1><h2 id="灰度工具"><a href="#灰度工具" class="headerlink" title="灰度工具"></a>灰度工具</h2><ul><li>为保证改动一旦出问题，降低影响，开发基于配置中心的灰度工具，可以根据业务属性进行灰度</li></ul><h1 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h1><ul><li>使用wrk、pprof等工具分析优化</li></ul><h1 id="文档化"><a href="#文档化" class="headerlink" title="文档化"></a>文档化</h1><h2 id="常规事情文档化"><a href="#常规事情文档化" class="headerlink" title="常规事情文档化"></a>常规事情文档化</h2><h2 id="复杂事情文档化"><a href="#复杂事情文档化" class="headerlink" title="复杂事情文档化"></a>复杂事情文档化</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;从事IT行业若干年，有时回首，不禁感叹，很多技术方案和日常生活息息相关，可以相互借鉴。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;以下只是草稿</summary>
      
    
    
    
    
    <category term="开发效率" scheme="http://yoursite.com/tags/%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>业务开发中使用BI的海量数据处理能力</title>
    <link href="http://yoursite.com/2024/04/25/20240425-ye-wu-kai-fa-zhong-shi-yong-bi-de-hai-liang-shu-ju-chu-li-neng-li/"/>
    <id>http://yoursite.com/2024/04/25/20240425-ye-wu-kai-fa-zhong-shi-yong-bi-de-hai-liang-shu-ju-chu-li-neng-li/</id>
    <published>2024-04-25T11:40:27.000Z</published>
    <updated>2024-04-25T11:47:53.035Z</updated>
    
    <content type="html"><![CDATA[<ul><li>BI的数据统计跑数结果一般是T+1生成的</li></ul><ol><li>实时性要求不高的功能，用于推荐等其他业务功能，可用于统计和监控等</li><li>对实时性要求高的功能，做后置的监控，及早发现逻辑错误</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;BI的数据统计跑数结果一般是T+1生成的&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;实时性要求不高的功能，用于推荐等其他业务功能，可用于统计和监控等&lt;/li&gt;
&lt;li&gt;对实时性要求高的功能，做后置的监控，及早发现逻辑错误&lt;/li&gt;
&lt;/ol&gt;
</summary>
      
    
    
    
    
    <category term="业务方案" scheme="http://yoursite.com/tags/%E4%B8%9A%E5%8A%A1%E6%96%B9%E6%A1%88/"/>
    
    <category term="BI" scheme="http://yoursite.com/tags/BI/"/>
    
  </entry>
  
  <entry>
    <title>从Java转Go的个人体会</title>
    <link href="http://yoursite.com/2024/04/07/20240407-cong-java-zhuan-go-de-ge-ren-ti-hui/"/>
    <id>http://yoursite.com/2024/04/07/20240407-cong-java-zhuan-go-de-ge-ren-ti-hui/</id>
    <published>2024-04-07T01:22:08.000Z</published>
    <updated>2024-05-28T02:26:55.504Z</updated>
    
    <content type="html"><![CDATA[<blockquote><blockquote><p>这里仅从一个业务开发的角度谈谈体会，格局较低，仅做个人记录<br>编程语言是程序员接触和使用最多的工具<br>后端技术基础的深度是快速学习和适应新语言的关键</p></blockquote></blockquote><ul><li><p>基于<a href="https://kingson4wu.github.io/2023/07/02/20230702-dui-gong-zuo-zhong-jie-hong-guo-de-ji-chong-bian-cheng-yu-yan-ji-qi-bu-shu-jia-gou-de-kan-fa/">对工作中接触过的几种编程语言及其部署架构的看法</a>继续聊。</p></li><li><p>截至目前，职业生涯五分之四的时间都是在使用Java。出于个人意愿和兴趣，以及行业的发展形势，也系统的自学了Go语言，并在个人的小项目实践。在一次意外的组织变动中，我转岗到了新团队，并开始使用Go，由于之前自己的自学基础，基本是无缝切换到新语言。可能是由于团队人员大部分是从Lua或PHP开始转Go的，在那里甚至感觉自己稍稍领先。</p></li><li><p>Go抽象业务比Java麻烦，代码不美观，但是它原生高并发，而且微服务下很多时候就一个后端服务，业务足够小，不需要复杂的设计模式等，并不需要像以前写大型Java应用这样做非常多的抽象，还能打二进制包，甚至还能保证一个团队所有人代码都是相同风格</p></li><li><p>以下讲一些个人看法，比较乱甚至不正确，仅做个人记录</p><ol><li>小型项目省内存</li><li>写命令行程序方便简单</li><li>现在绝大部分功能都有相应的官方库和开源库</li><li>运行无需环境依赖，直接打包成二进制可执行程序（Java现在也可以了，可能大部分业务场景下体积还较大）</li><li>支持交叉编译，不要特定平台</li><li>打包体积小（根据代码实际使用情况打包-这点是我一直苦苦寻找的）<ul><li>Go语言中有未用代码消除和可执行文件瘦身机制。只有在程序执行路径上被调用的函数才会进入最终的可执行文件，未被调用的函数会被消除</li><li><a href="https://mp.weixin.qq.com/s/s60J4eA_d0hqrXj-XMPpXA">Go未用代码消除与可执行文件瘦身</a></li></ul></li></ol></li><li><p>为什么现在大多数人都会认为Java启动慢占内存呢？</p><ul><li>首先不是Java自身的原因，而是跟实际使用场景有关</li><li>使用Java大多数用来做业务开发，也习惯引入很多依赖库，首当其冲就是SpringBoot等框架</li><li>多数都是spring相关类、proxy&#x2F;cglib，以及各种bean配置</li><li>而且很多类都是在启动的时候初始化的</li></ul></li><li><p>微服务下的编程语言</p><ul><li>在K8S流行之前，Java通常是使用SpringCloud</li><li>其实微服务相关技术，在K8S已经实现了</li><li>无论是使用Go还是Java，目前都应该向K8S靠近</li><li>还有一点，K8S本身就是用Go实现的</li></ul></li></ul><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><ul><li><p><a href="https://github.com/Kingson4Wu/graalvm_demo">体验Graalvm+SpringBoot+Java21构建原生程序</a></p></li><li><p>在内存利用效率上，Go语言确实比Java做得更好，在4个不同的角度来总结</p><ul><li><a href="https://mp.weixin.qq.com/s/-N4eqdXb9a93uvOWfE4ScQ">Golang与Java全方位对比总结</a></li></ul><ol><li>Java的JIT策略比Golang的AOT策略<ul><li>Java在运行时相比Golang多占用了一些内存。原因在于：<ul><li>Java运行态中包含了一个完整的解释器、一个JIT编译期以及一个垃圾回收器，这会显著地增加内存。</li><li>Golang语言直接编译到机器码，运行态只包含机器码和一个垃圾回收器。</li></ul></li><li>因此Golang的运行态相对消耗内存较少。</li></ul></li><li>内存分配和垃圾回收器<ul><li>Java确实在起步占用上偏多，毕竟jvm需要更多内存做jit，默认的gc算法对内存要求偏高，但这不能代表后续占用仍然线性增长。如果目标是启动成百上千个内存需求较少的进程，那Java确实不擅长。</li></ul></li><li>并发<ul><li>协程模型比线程模型更加节省内存。</li></ul></li><li>反射<ul><li>Golang的反射更加简单，导致框架的内存消耗Golang程序比Java程序优秀。主要是因为： Java的框架实现中大量使用反射，并使用hashmap缓存信息，这2个都是极度消耗内存的行为。 Golang的框架中也使用reflect、map。但是Golang是面向interface和值类型的，这导致Golang的反射模型要比Java的反射模型简单非常多，反射过程要产生的对象数量也少非常多。</li></ul></li></ol></li><li><p>为什么一些已经选择 Java 的公司，现在又开始考虑使用 Go？</p><ul><li><a href="https://mp.weixin.qq.com/s/ZKL-M54IBx9CSkYKoLdsUA">为什么要用Go重写Dubbo？</a></li><li>相较于 Java，Go 在启动速度、编译速度、内存使用和高并发（如协程）方面都有明显优势。所以，那些已经采用 Java 的公司现在也在考虑引入 Go。但要注意的是，目前这样的公司仍然是少数。另外，一些公司并没有严格规定技术栈的选择，因此新成立的部门或新业务团队可以自由选择，而他们可能更倾向于选择 Go 作为开发语言。</li><li>小结: 总的来说，无论是选择 Java 还是 Go，都是有其合理性的。一家公司同时选择这两种语言也同样合理。尽管这样的公司占比不大，但 Java 与 Go 之间的交流需求仍然存在。</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;这里仅从一个业务开发的角度谈谈体会，格局较低，仅做个人记录&lt;br&gt;编程语言是程序员接触和使用最多的工具&lt;br&gt;后端技术基础的深度是快速学习和适应新语言的关键&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
</summary>
      
    
    
    
    
    <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
    <category term="Go" scheme="http://yoursite.com/tags/Go/"/>
    
    <category term="编程语言" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>记录限免业务的经验</title>
    <link href="http://yoursite.com/2024/04/06/20240406-ji-lu-xian-mian-ye-wu-de-jing-yan/"/>
    <id>http://yoursite.com/2024/04/06/20240406-ji-lu-xian-mian-ye-wu-de-jing-yan/</id>
    <published>2024-04-06T14:16:35.000Z</published>
    <updated>2024-04-06T14:18:01.654Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>由于业务需要，比如歌曲，我们需要对部分歌曲开放限免的功能，而且需要限制开放限免的场景。比如这首歌在场景A免费，在场景B收费。</p></li><li><p>先说正确的做法，下发另外一个字段比如free_token，通过这个字段判断业务来源，和判断是否可以免费。free_token是随着对应的场景查询时下发的，是变化的。即同一个歌曲的free_token不是唯一的。</p></li><li><p>现在有另外一种情况，想对现有的业务做限免（前端业务是不认free_token的）。这时可以把歌曲id使用free_token的值来下发，后续通过歌曲id来判断是否符合限免。</p><ul><li>这样做有个前提，就是前端业务没有使用歌曲id来做唯一性的业务（因为这是歌曲id是变化的），比如收藏。所以使用这个方案，要充分测试，而且可能还有其他不兼容的场景。</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;由于业务需要，比如歌曲，我们需要对部分歌曲开放限免的功能，而且需要限制开放限免的场景。比如这首歌在场景A免费，在场景B收费。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;先说正确的做法，下发另外一个字段比如free_token，通过这个字段判断业务来源，和判断是否可</summary>
      
    
    
    
    
    <category term="业务方案" scheme="http://yoursite.com/tags/%E4%B8%9A%E5%8A%A1%E6%96%B9%E6%A1%88/"/>
    
    <category term="限免" scheme="http://yoursite.com/tags/%E9%99%90%E5%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>职场中的“善于沟通”和“高情商”</title>
    <link href="http://yoursite.com/2024/04/05/20240405-zhi-chang-zhong-de-shan-yu-gou-tong-he-gao-qing-shang/"/>
    <id>http://yoursite.com/2024/04/05/20240405-zhi-chang-zhong-de-shan-yu-gou-tong-he-gao-qing-shang/</id>
    <published>2024-04-05T11:02:38.000Z</published>
    <updated>2024-04-05T11:03:45.261Z</updated>
    
    <content type="html"><![CDATA[<blockquote><blockquote><p>很多人普遍认为，不跟人起冲突，能得到别人满意的评价，那么就一定程度上证明他高情商以及沟通能力好。<br>然而，这种观点真的正确吗？在某些情况下，这样做是否必要呢？</p></blockquote></blockquote><ul><li><p>先说结论，在高人才密度的公司中，基本也应该确实是这样。因为大家能相互理解，目标是做正确的事，简明扼要节约时间提升沟通效率，尊重别人及尊重自己，对有能力的人表示钦佩并愿意向他们学习。</p></li><li><p>相反在低密度人才的公司或者公司领导人不开明等情况下，情况就有所不同。举例来说，如果公司内部人际关系不够平等，或者产品地位高于技术。产品需求缺乏认真性和逻辑性，技术人员只能被动接受，甚至放任不管，那么这种沟通方式就变得有问题了。技术人员默默忍受、妥协，把自己变成产品的需求完善员，即使自己的时间被浪费也不可惜。</p></li><li><p>当金钱和地位给予足够时，技术人员选择妥协也可以理解。否则，那简直就是对自己的不尊重。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;很多人普遍认为，不跟人起冲突，能得到别人满意的评价，那么就一定程度上证明他高情商以及沟通能力好。&lt;br&gt;然而，这种观点真的正确吗？在某些情况下，这样做是否必要呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquot</summary>
      
    
    
    
    
    <category term="JOB" scheme="http://yoursite.com/tags/JOB/"/>
    
    <category term="职场" scheme="http://yoursite.com/tags/%E8%81%8C%E5%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>这件事情你需要跟进吗？</title>
    <link href="http://yoursite.com/2024/04/03/20240403-zhe-jian-shi-qing-ni-xu-yao-gen-jin-ma/"/>
    <id>http://yoursite.com/2024/04/03/20240403-zhe-jian-shi-qing-ni-xu-yao-gen-jin-ma/</id>
    <published>2024-04-03T08:04:11.000Z</published>
    <updated>2024-04-03T08:04:57.821Z</updated>
    
    <content type="html"><![CDATA[<blockquote><blockquote><p>在工作中，大多数情况下，大家都喜欢积极跟进事情的人。但有时候，这事情你真的要跟进吗？</p></blockquote></blockquote><ul><li><p>关于这个问题，其实并不是0或1这么简单。很多时候取决于公司的工作氛围或者分工、以及你对自己的定位等情况。</p></li><li><p>在工作中，在相当长的时间里，我执行力特别强的人。我的原则是事事有结论（不给别人挖坑，不让事情烂尾）。所以我会很积极的跟进事情。</p></li><li><p>但渐渐的，我开始怀疑，有些事情是你需要跟进的吗？</p></li><li><p>以技术人员为例。你需要把自己当项目经理那样跟进事情吗？答案是分情况。</p></li><li><p>有些情况你需要跟到底，而有些情况你只需要尽你责任即可，毕竟你有更重要的事情去做，或者说你的价值不应该在这里虚耗。</p></li></ul><h3 id="以下情况可能需要你跟进"><a href="#以下情况可能需要你跟进" class="headerlink" title="以下情况可能需要你跟进"></a>以下情况可能需要你跟进</h3><ol><li>属于你自己责任范围内的事情</li><li>这个事情是你主导发起的事情，关于你绩效等</li><li>你的公司的范围就是要你做项目经理，而且你也能接受（精神损失费不够另说）</li><li>你个人有意愿通过这种方式发展自己的综合素质或人脉等等</li></ol><h3 id="其他情况不需要跟进到底"><a href="#其他情况不需要跟进到底" class="headerlink" title="其他情况不需要跟进到底"></a>其他情况不需要跟进到底</h3><ol><li>已经当天反馈结果并提供解决问题的方向</li><li>需求方并未声明事情的优先级，自身也未跟进（说明不重要，不要经常给别人做无用功）</li><li>技术侧不应该每件事都跟进那么深入，尽了自己的义务即可，毕竟要合理分工</li><li>关于管理人员：不能以治标不治本的方式解决问题，技术领导应该表明立场，也是以后类似问题的处理立场，而不是一味认怂服从，累死下面的兄弟，而且没啥成长，纯粹苦力活</li><li>关于自身的话语权：作为基层员工，有些事情就是推不动，这个大家都很清楚，做到及时反馈的义务即可</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;在工作中，大多数情况下，大家都喜欢积极跟进事情的人。但有时候，这事情你真的要跟进吗？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;关于这个问题，其实并不是0或1这么简单。很多时候</summary>
      
    
    
    
    
    <category term="JOB" scheme="http://yoursite.com/tags/JOB/"/>
    
    <category term="职场" scheme="http://yoursite.com/tags/%E8%81%8C%E5%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>再浅谈接口的安全性和回调机制</title>
    <link href="http://yoursite.com/2024/04/02/20240402-zai-qian-tan-jie-kou-de-an-quan-xing-he-hui-diao-ji-zhi/"/>
    <id>http://yoursite.com/2024/04/02/20240402-zai-qian-tan-jie-kou-de-an-quan-xing-he-hui-diao-ji-zhi/</id>
    <published>2024-04-02T06:42:48.000Z</published>
    <updated>2024-04-02T07:28:43.033Z</updated>
    
    <content type="html"><![CDATA[<blockquote><blockquote><p>最近的工作原因，涉及到接口充权益的接口安全性问题，这里趁热再说说个人看法</p></blockquote></blockquote><ul><li><p>基于之前写的这篇<a href="https://kingson4wu.github.io/2020/07/12/20200712-shi-yong-hui-diao-ji-zhi-ti-gao-jie-kou-an-quan-xing/">使用回调机制提高接口安全性</a>继续聊。上次扩展中提到是不是可以使用非对称加密，替换回调验证？目前我所负责的业务确实使用这种方式。</p></li><li><p>业务中要对接多个渠道，渠道需要调业务的接口来加权益，为了安全性，目前的做法是由渠道自己生成RSA私钥，提供RSA公钥到业务这边。渠道使用私钥生成签名，业务这边则使用公钥解密验证，从而保证请求是合法的。</p></li><li><p>其实这里还是有潜在漏洞，之前的文章也提到过，如何保证私钥不泄漏？虽然说保证私钥不泄漏是渠道自己的问题，但是多年的经验告诉我，大多数公司并没有很好的保存这些私钥的方法。按照我的猜想，这些私钥在公司内部会被经常拷贝发送，至少开发人员基本都有办法知道的。万一知道私钥的人后续离职了作恶呢？</p></li><li><p>而我们经常对接一下小渠道，参差不齐。尽可能保证渠道的安全也是我们作为平台要积极考虑的问题。</p></li><li><p>所以个人的看法，即使使用RSA保证签名的合法，还是要提供回调的能力，提供给渠道，通过二次校验保证知道私钥的人也无法直接从自己的私人客户端发起请求并成功加权益。毕竟回调的请求是到达渠道方的正式服务器，要在正式服务器上线恶意代码，靠谱的公司都有一定的限制和管控。</p></li></ul><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><ul><li>接口一般都会分外网访问和内网访问，我们平常要注意避免只能内网访问的接口暴露给外网访问，因为大多数情况下，我们的内网接口会安全性低一点。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;最近的工作原因，涉及到接口充权益的接口安全性问题，这里趁热再说说个人看法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;基于之前写的这篇&lt;a href=&quot;https://kings</summary>
      
    
    
    
    
    <category term="接口回调" scheme="http://yoursite.com/tags/%E6%8E%A5%E5%8F%A3%E5%9B%9E%E8%B0%83/"/>
    
    <category term="接口安全" scheme="http://yoursite.com/tags/%E6%8E%A5%E5%8F%A3%E5%AE%89%E5%85%A8/"/>
    
    <category term="非对称加密" scheme="http://yoursite.com/tags/%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>打工人心态应该是怎样的？</title>
    <link href="http://yoursite.com/2024/04/02/20240402-da-gong-ren-xin-tai-ying-gai-shi-zen-yang-de/"/>
    <id>http://yoursite.com/2024/04/02/20240402-da-gong-ren-xin-tai-ying-gai-shi-zen-yang-de/</id>
    <published>2024-04-02T06:11:15.000Z</published>
    <updated>2024-04-02T06:12:05.190Z</updated>
    
    <content type="html"><![CDATA[<blockquote><blockquote><p>先来两段经典的话:</p></blockquote></blockquote><blockquote><blockquote><p>一<br>为众人抱薪者，不可使其冻毙于风雪；<br>为大众谋福利者，不可使其孤军奋战；<br>为自由开路者，不可使其困顿于荆棘。</p></blockquote></blockquote><blockquote><blockquote><p>二<br>愿中国青年都摆脱冷气，只是向上走。<br>不要听自暴自弃者的话。<br>能做事的做事，能发声的发声。<br>有一份光，发一份热。<br>就令萤火一般，也可以在黑暗里发一点光。<br>不必等候炬火。</p></blockquote></blockquote><ul><li><p>迫于由于现实的压迫，大家普遍焦虑，也会在工作中认怂，即使是不合理不正确负能量的等等；</p></li><li><p>这些其实都能理解，不管是迫于生活压力，还是对方给得实在太多等原因；</p></li><li><p>但有时，希望我们可以</p><ul><li>我们只是个打工的，有些东西不必过度较真</li><li>虽是打工但也人格独立和自尊，不必唯唯诺诺</li><li>有自己的时间分配和生活，不必紧盯信息，实在紧急对方会打电话</li><li>不必焦虑，事事回复，根据自身情况，适当保持高姿态</li><li>换位思考，容人之度，当然容人不是纵容</li><li>工作时专注和高质量，不浪费自己时间</li></ul></li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://www.163.com/dy/article/I21SD6BV0514ANQM.html"></a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;先来两段经典的话:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;一&lt;br&gt;为众人抱薪者，不可使其冻毙于风雪；&lt;br&gt;为大众谋福利者，不可使其孤军</summary>
      
    
    
    
    
    <category term="JOB" scheme="http://yoursite.com/tags/JOB/"/>
    
    <category term="职场" scheme="http://yoursite.com/tags/%E8%81%8C%E5%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>ToB业务随便讲讲</title>
    <link href="http://yoursite.com/2024/04/01/20240401-tob-ye-wu-sui-bian-jiang-jiang/"/>
    <id>http://yoursite.com/2024/04/01/20240401-tob-ye-wu-sui-bian-jiang-jiang/</id>
    <published>2024-04-01T08:16:48.000Z</published>
    <updated>2024-05-10T03:05:16.892Z</updated>
    
    <content type="html"><![CDATA[<blockquote><blockquote><p>以下内容格局比较小，仅做个人记录</p></blockquote></blockquote><ul><li><p>从我个人接触过的ToB和ToC业务讲，有以下特点（当然肯定不是一定对的，毕竟业务形态实在太多，我没真正接触过的，就不提了）：</p><ul><li>ToC的业务团队，一般只做若干个业务模块；不同的业务有不同的团队</li><li>ToB的业务团队，需要对接几乎所有业务，进而对外提供平台能力</li></ul></li><li><p>关于ToB业务的规范</p><ul><li>ToB的业务，出于通用性，会制定各种规范由客户进行对接</li><li>当然，所谓的规范，有时候是看哪方处于强势</li><li>弱势方即使作为平台也要给客户做定制化</li><li>比如一个简单的回调规范，客户不配合，需要平台这边按照他们的规范适配</li><li>但同样支付宝和微信作为平台，难道要支付宝和微信去适配每个接入方？无非是谁更强势的问题。</li><li>从这方面看，可以一定判断出这个公司目前的状况</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;以下内容格局比较小，仅做个人记录&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;从我个人接触过的ToB和ToC业务讲，有以下特点（当然肯定不是一定对的，毕竟业务形态实在太多，我没真</summary>
      
    
    
    
    
    <category term="ToB" scheme="http://yoursite.com/tags/ToB/"/>
    
  </entry>
  
  <entry>
    <title>提升自己职场中的“可替代性”</title>
    <link href="http://yoursite.com/2024/03/29/20240329-ti-sheng-zi-ji-zhi-chang-zhong-de-ke-ti-dai-xing/"/>
    <id>http://yoursite.com/2024/03/29/20240329-ti-sheng-zi-ji-zhi-chang-zhong-de-ke-ti-dai-xing/</id>
    <published>2024-03-29T07:14:28.000Z</published>
    <updated>2024-03-29T07:15:09.388Z</updated>
    
    <content type="html"><![CDATA[<blockquote><blockquote><p>怎么看待职场中的“业务壁垒”？</p></blockquote></blockquote><ul><li><p>在我的工作中，曾经发生过这样一件事：有一天我们在讨论，能不能实现一个业务通用组件，让各个业务接入，提升业务需求的开发效率等，这时候有一个同事就跟我说：‘那如果真的实现的话，那你这边的业务就啥都没了’，言外之意就是我这边“没事做了”。我给他的回答是：‘没关系，只要是有意义，有价值，对公司是正确的就行’</p></li><li><p>那么？我真的那么爱公司吗？</p><ul><li>当然不是，我只是觉得应该做自己认为正确的事，顺便说一下漂亮话忽悠一下。</li></ul></li><li><p>在工作中，你们到遇到很多“业务壁垒”。通俗来讲，这个东西只有他会，或者短期内只有他能搞定。你甚至会觉得一股恶心，就是很乱很难受，并惊叹对方的忍耐力。</p></li><li><p>然而，无数的事实证明了，这个世界不会因为没有谁就不行。</p></li><li><p>而我的原则是：做正确的事，不制造业务壁垒；保持出色的整理学习能力，输出业务文档，让自己随时可替换，甚至寻找可以替换自己的人；不做狭义对自己有利的事，尽量做广义对公司有利的事。</p></li><li><p>具体来说，可以这样阐述</p><ol><li>“业务壁垒”不是我认同的核心竞争力，甚至混乱的“业务壁垒”不是我能忍受的工作体验；</li><li>出色的整理学习能力，坚信长期主义，才是我认同的核心竞争力；</li><li>我在提升自己可替代性的同时，也是在提升自己的“不可替代性”；而有些地方，并不需要“不可替代性”的人；</li><li>提升自己可替代性，其实也是在保持业务的稳定；不会因个人而大受影响，甚至我因此可以放心度假，因为我会的东西，别人也可以快速学会和处理；</li></ol></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;怎么看待职场中的“业务壁垒”？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在我的工作中，曾经发生过这样一件事：有一天我们在讨论，能不能实现一个业务通用组件，让各个业务接入，提升</summary>
      
    
    
    
    
    <category term="JOB" scheme="http://yoursite.com/tags/JOB/"/>
    
    <category term="职场" scheme="http://yoursite.com/tags/%E8%81%8C%E5%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>对服务架构中的聚合层理解</title>
    <link href="http://yoursite.com/2024/03/28/20240328-dui-fu-wu-jia-gou-zhong-de-ju-he-ceng-li-jie/"/>
    <id>http://yoursite.com/2024/03/28/20240328-dui-fu-wu-jia-gou-zhong-de-ju-he-ceng-li-jie/</id>
    <published>2024-03-28T03:55:49.000Z</published>
    <updated>2024-07-31T02:15:31.132Z</updated>
    
    <content type="html"><![CDATA[<blockquote><blockquote><p>以前刚毕业的时候，进入一个组，叫中间层，那时候还懵懵懂懂不知道想表达啥意思</p></blockquote></blockquote><p><img src="/2024/03/28/20240328-dui-fu-wu-jia-gou-zhong-de-ju-he-ceng-li-jie/%E8%81%9A%E5%90%88%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84.jpeg"></p><ul><li><p>图来源网上，已未知出处</p></li><li><p>这个组是直接给app提供接口的，主要的职能大概有以下</p><ul><li>业务适配</li><li>服务聚合</li><li>数据展示</li><li>安全隔离</li></ul></li><li><p>聚合服务，简单的来说就是聚合底层的各个业务系统，给用户端应用提供接口</p><ul><li>（直接对接用户前端的接口服务，手机app，网站，h5等用户终端）</li><li>BFF —— Backends for frontends（服务于前端的后端），是为了让后端API满足不同的前端使用场景，而演进出来的一种模式。</li><li><a href="https://mp.weixin.qq.com/s/IZ5wD2Dc5k83dP6dR8M9xg">BFF避坑指南</a></li></ul></li><li><p>那么这个组有存在的必要吗？特别是现在服务内部都微服务化，很多业务服务都是直接对app提供接口的。</p></li><li><p>先从表面上看看使不使用聚合层各自的特点和好处</p><ul><li>使用聚合层<ol><li>前端需要对接的接口比较少，对前端来说比较友好</li><li>聚合层可以聚合底层业务的接口，相比前端直接对接，有些业务场景可以提升接口性能</li><li>能根据前端的业务场合适配和统一改动，便于快速迭代和打补丁等</li><li>可以根据前端对数据的不同使用场景，减少不必要的性能损耗<ul><li>如果统一接口，入参就会变得复杂，增加前端的对接成本</li></ul></li></ol></li><li>不使用聚合层<ol><li>有些业务场景，减少多一层调用，有利于提升性能</li><li>业务接口可以复用，不需要聚合层再包一层，减少开发时间<ul><li>前提：整个公司统一接口规范，同个接口可以复用于不同app</li></ul></li><li>分散接口故障风险。一个业务故障，不会导致其他业务也故障。<ul><li>相对使用聚合层，聚合层的服务不可用，整个app都会受影响</li></ul></li></ol></li></ul></li><li><p>仔细想想，简单理解，其实使用聚合层就是水平架构，不使用就是垂直架构；根据康威定律，其实公司决定使用哪种方案，一定程度还受公司组织关系的影响。</p></li><li><p>提外话：由于前后端分离的流行。聚合层服务有时候会由前端团队来维护。使用node服务用于聚合页面和后端接口，从而提升性能。相对于传统的聚合层，前端的聚合层比较轻量化，基本是无状态服务，不存储数据和加工数据，纯粹做聚合接口和页面。</p></li></ul><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><ul><li><a href="https://mp.weixin.qq.com/s/fy5-qiZ54TLJCCTXarKonQ">“胖瘦” BFF：常见的两种微服务形态</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;以前刚毕业的时候，进入一个组，叫中间层，那时候还懵懵懂懂不知道想表达啥意思&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/2024/03/28/20240328-dui-fu-</summary>
      
    
    
    
    
    <category term="架构" scheme="http://yoursite.com/tags/%E6%9E%B6%E6%9E%84/"/>
    
    <category term="服务架构" scheme="http://yoursite.com/tags/%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/"/>
    
    <category term="聚合层" scheme="http://yoursite.com/tags/%E8%81%9A%E5%90%88%E5%B1%82/"/>
    
  </entry>
  
  <entry>
    <title>职场中“马后炮”现象</title>
    <link href="http://yoursite.com/2024/03/27/20240327-zhi-chang-zhong-ma-hou-pao-xian-xiang/"/>
    <id>http://yoursite.com/2024/03/27/20240327-zhi-chang-zhong-ma-hou-pao-xian-xiang/</id>
    <published>2024-03-27T02:22:47.000Z</published>
    <updated>2024-04-18T10:23:53.766Z</updated>
    
    <content type="html"><![CDATA[<blockquote><blockquote><p>职场中有一种奇怪又平常的现象：没出事就没人重视，出事了就各种马后炮。</p></blockquote></blockquote><ul><li><p>以软件开发人员平常应对的事情为例，这里其实有一种无奈的解释：</p><ol><li>需求这么多还没做完，有什么充分的理由去重视这个问题？</li><li>你把事情做好了，完全不出事，怎么证明是你的功劳？</li></ol></li><li><p>普通的干实事的程序员，最讨厌跟行外人谈收益。就像把代码写好了，自然后续维护成本就低了。但是硬要把他转化为节约多少人力。只想一心老老实实写代码的程序员，好心做个事情还要花费心力想办法给你解释，久而久之自然是多一事不如少一事。所谓劣币驱逐良币，有追求的程序员自然离开了，剩下的可想而知。</p></li><li><p>那么，难道这个问题就无解吗？</p><ul><li>当然不是。要建立在不干涉和充分信任的基础上。CEO相信CTO，CTO当然知道把代码写好的好处，所以也不需要底下做事的人过分解释。</li><li>但实际上很多公司，CTO不做CTO的事，只是专注向上汇报，还把汇报的事情层层外包给下面的人。导致本应该自己屏蔽，让底下安心做事的事情，层层透传，苦了干实事的人。而自己就成了汇总PPT的汇报员。</li></ul></li><li><p>最后讲一个故事</p><pre>魏文王问扁鹊曰：“子昆弟三人其孰最善为医？”扁鹊曰：“长兄最善，中兄次之，扁鹊最为下。”魏文王曰：“可得闻邪？”扁鹊曰：“长兄于病视神，未有形而除之，故名不出于家。中兄治病，其在毫毛，故名不出于闾。若扁鹊者，镵血脉，投毒药，副肌肤，故名出闻于诸侯。”魏文王曰：“善。”</pre></li><li><p>善战者无赫赫之功</p></li><li><p>防患于未然的人不如亡羊补牢者获得的赞誉多</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;职场中有一种奇怪又平常的现象：没出事就没人重视，出事了就各种马后炮。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;以软件开发人员平常应对的事情为例，这里其实有一种无奈的解释：&lt;/</summary>
      
    
    
    
    
    <category term="JOB" scheme="http://yoursite.com/tags/JOB/"/>
    
    <category term="职场" scheme="http://yoursite.com/tags/%E8%81%8C%E5%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>小团队管理经验</title>
    <link href="http://yoursite.com/2024/03/26/20240326-xiao-tuan-dui-guan-li-jing-yan/"/>
    <id>http://yoursite.com/2024/03/26/20240326-xiao-tuan-dui-guan-li-jing-yan/</id>
    <published>2024-03-26T02:39:17.000Z</published>
    <updated>2024-03-28T15:39:24.443Z</updated>
    
    <content type="html"><![CDATA[<blockquote><blockquote><p>转眼工作十年了，从20年10月开始，断断续续做了近三年的小团队管理，这里作简要总结一下。</p></blockquote></blockquote><blockquote><blockquote><p>所谓小团队管理，其实就是现在说的虚线组长，需要写代码、给团队提供指导等，但是由于不是高级别大领导，不需要应付很多烦人的破事。从这层来看，挺适合我这种性格的人。</p></blockquote></blockquote><blockquote><blockquote><p>以下是以小团队为背景来总结的，格局显得较小；当然每个人的观点不一样，不一定是正确的理解。</p></blockquote></blockquote><h2 id="核心要点（对自己）"><a href="#核心要点（对自己）" class="headerlink" title="核心要点（对自己）"></a>核心要点（对自己）</h2><ul><li>情商、基于别人的角度思考<ul><li>个人习惯采取对内温和对外强硬的方式；当然结合自身情况和环境具体选择；这个方法可以让你更好的理解人和事情；我不认为所谓的“情商高”就是“老好人”。</li></ul></li><li>以身作则<ul><li>以自己为榜样，让团队其他成员看到正确的做事方式等；包括技术方案、沟通方式等，当然包括一些无法避免的脏活累活等；用高效和人性化等方式应对 。</li></ul></li><li>令人信服的技术功底<ul><li>小团队管理的特点，就是领头的人也是需要写代码和干实事，而且跟团队成员的距离是最近的；需要保持自己良好的技术功底，才能更好的给团队提供有效的建议；另外作为有追求的技术人，谁都想跟着比自己优秀的人一起共事。</li></ul></li><li>保证成员尽量免干扰、休息时间如无必要不打扰<ul><li>这一点是我基于人性化的角度考虑的，有些人可能会觉得不重要。给团队提供深度工作的环境，才能提升效率；在一些不紧急的事情少，要做到不随意打扰，减少团队的负面情绪。对应上面第一条，将心比心，每个人都想要良好的工作体验。</li></ul></li><li>真诚、谦虚、透明<ul><li>尽量保持团队一定的透明度，减少不必要的暗箱操作。大部分情况下不需要开会，只需要一篇简明扼要的文档，即可让团队快速了解事情的内容。团队成员也在发展，要清楚有一天他们的能力会超过你。而我一直坚持的做法是，业务上坚持写文档，尽量减少业务壁垒（也是为自己放假偷懒准备），技术上提供合理的建议，不遗余力的提高自己的“可替代性”。</li><li>认清自己。领导需要团队的力量才能发挥作用。不要错把平台的能力当作自己的能力。把公司的给予当作自己的给予。</li></ul></li><li>人性化管理<ul><li>现在很多公司都追求狼性文化，说着各种假话哄下属为自己加班干活</li><li>个人管理经验理念是，先做人再做领导</li><li>如非必要。不严厉。许多人还没到那个层级就采取低端没人情味的管理方式。要和同事成为朋友，营造友好的工作环境，而不是一味向上管理。</li></ul></li><li>尽量保持技术更新升级<ul><li>在确保充分测试，稳定灰度的同时，适量的升级有利于系统的稳定，增加维护人员的积极性。这种东西无法直接给出具体收益，但应该长远考虑，一味的保守只会让技术越来越落后</li></ul></li></ul><h2 id="核心要点（对团队）"><a href="#核心要点（对团队）" class="headerlink" title="核心要点（对团队）"></a>核心要点（对团队）</h2><ul><li>聪明、叙述简明扼要、能抓重点</li><li>乐于分享、采用高效的分享手段（文章即可）、实事求是</li><li>有团队主人翁意识，主动了解业务</li><li>对技术原理好奇并积极探索</li><li>尊重别人的时间</li><li>跟进事情有反馈和结论</li><li>在正确的事情面前，敢于说不</li><li>重视自己的“可替代性”、免于个人单点、提升团队容错性</li></ul><h2 id="小团队技术管理者的事项列表"><a href="#小团队技术管理者的事项列表" class="headerlink" title="小团队技术管理者的事项列表"></a>小团队技术管理者的事项列表</h2><ul><li>业务侧<ul><li>快速满足需求</li><li>通用业务组件抽象</li><li>旧业务熟悉</li><li>定期删除无用代码，增加代码可维护性</li><li>遗留需求记录和跟进</li><li>业务知识文档化，方便查阅和备忘</li><li>需求上线时间定时跟进（你就是项目经理）</li></ul></li><li>技术侧<ul><li>旧业务梳理和重构</li><li>架构灾备和优化、资源隔离等</li><li>通用工具类封装</li><li>管理后台搭建 （解放技术）</li><li>服务异常监控（后端接口，前端APM等各个维度）</li><li>技术组件升级，提升团队技术广度</li><li>废弃业务下线，回收资源</li><li>业务技术调研，团队具备快速满足产品新需求的能力</li><li>分享，相互学习，个人认为文档就行了，会议实际上挺形式和浪费大家的时间</li><li>帮助review方案和代码</li><li>技术债务登记和逐步处理（分优先级[每个季度一定要完成一定比例的低优先级任务]，保持代码洁癖，不给后来人挖坑）</li><li>开发规范制定（避免后续维护混乱，也方便大家日常开发查阅）</li><li>开发阶段和上线阶段checklist，避免犯重复的错误，避免上线遗漏导致项目延期</li><li>技术面试</li><li>应急处理、日常维护等文档化（公开、透明、高效）</li><li>团队文档整理规划<ul><li>新人指引</li><li>业务模块（服务模块、业务知识整理、业务交接记录、业务安全风险点）</li><li>工作规划（需求列表、技术规划、技术债务）</li><li>开发规范（项目上线流程、公共库说明、开发协议、服务架构图、业务逻辑开发套路等）</li><li>工作文档（应急、日常维护等）<ul><li>常见问题处理导航</li></ul></li><li>技术文档（技术型、分享类）</li><li>技术方案（日常需求上线方案归档）</li><li>复盘、故障报告</li><li>业务调研</li><li>其他备份</li></ul></li></ul></li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://kingson4wu.github.io/2021/08/13/20210813-ge-ren-guan-li-jing-yan-zong-jie/">个人管理经验总结</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;转眼工作十年了，从20年10月开始，断断续续做了近三年的小团队管理，这里作简要总结一下。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;所谓小团队</summary>
      
    
    
    
    
    <category term="团队管理" scheme="http://yoursite.com/tags/%E5%9B%A2%E9%98%9F%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
</feed>
