<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>拉巴力的纸皮箱</title>
  
  
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2025-10-21T09:23:36.377Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Kingson Wu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>生活中的 IT 哲学：从技术架构看人生智慧</title>
    <link href="http://yoursite.com/2025/10/21/20251021-sheng-huo-zhong-de-it-zhe-xue-cong-ji-zhu-jia-gou-kan-ren-sheng-zhi-hui/"/>
    <id>http://yoursite.com/2025/10/21/20251021-sheng-huo-zhong-de-it-zhe-xue-cong-ji-zhu-jia-gou-kan-ren-sheng-zhi-hui/</id>
    <published>2025-10-21T09:21:18.000Z</published>
    <updated>2025-10-21T09:23:36.377Z</updated>
    
    <content type="html"><![CDATA[<blockquote><blockquote><p>内容观点由 <a href="https://kingson4wu.github.io/2021/07/06/20210706-it-zhong-de-sheng-huo-zhe-xue/">IT中的生活哲学</a>启发<br>内容由AI生成</p></blockquote></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在阅读《SRE：Google 运维解密》之后，我越来越觉得 IT 世界的许多技术方案、运维策略、系统设计，其实和生活的哲学息息相关。技术与生活并非简单的比喻关系，而是某种程度上互相借鉴的智慧结晶。</p><p>本文尝试将一些常见的 IT 架构和技术原理，用生活中的场景做类比，希望能从中获得理解技术本质和生活智慧的双重收获。</p><hr><h2 id="混沌工程：面对不确定，提前演练"><a href="#混沌工程：面对不确定，提前演练" class="headerlink" title="混沌工程：面对不确定，提前演练"></a>混沌工程：面对不确定，提前演练</h2><p><strong>技术角度</strong>：混沌工程通过故意制造小规模故障，检验系统的鲁棒性。<br><strong>生活类比</strong>：生活中总会遇到意外，比如临时停电、交通拥堵、突发事件。我们提前做一些演练和准备——备用电源、应急计划、家庭安全演练——就像 IT 中的混沌实验一样，当真正的突发状况发生时，能够从容应对。</p><p><strong>核心观点</strong>：提前体验小规模混乱，让系统和心智更稳健。</p><hr><h2 id="数据持久化与日志：记录比直接修改更安全"><a href="#数据持久化与日志：记录比直接修改更安全" class="headerlink" title="数据持久化与日志：记录比直接修改更安全"></a>数据持久化与日志：记录比直接修改更安全</h2><p><strong>技术角度</strong>：数据库在更新数据时，会先写日志，再修改实际数据行，以保证数据安全和可恢复性。<br><strong>生活类比</strong>：我们在生活中也常用类似方法，比如点餐时先写下订单再执行，日常待办记录先写备忘再行动。家庭财务、日常计划、孩子教育中也常用记录备份的方式，保证即使出现失误也能回溯。</p><p><strong>核心观点</strong>：先记录，后执行，是降低风险的普遍原则。</p><hr><h2 id="负载均衡：合理分工，避免单点过载"><a href="#负载均衡：合理分工，避免单点过载" class="headerlink" title="负载均衡：合理分工，避免单点过载"></a>负载均衡：合理分工，避免单点过载</h2><p><strong>技术角度</strong>：负载均衡通过多台服务器分担请求，保证系统稳定。<br><strong>生活类比</strong>：在家庭、团队或社交场景中，把任务合理分配给不同人：家庭聚会时有人做饭，有人打扫，有人招待；团队项目中，各成员根据专长分工，避免某个人压力过大。</p><p><strong>核心观点</strong>：合理分工，既提升效率，也防止个体超负荷。</p><hr><h2 id="缓存：善用记忆与便利"><a href="#缓存：善用记忆与便利" class="headerlink" title="缓存：善用记忆与便利"></a>缓存：善用记忆与便利</h2><p><strong>技术角度</strong>：缓存保存常用数据，减少重复计算和访问数据库的开销。<br><strong>生活类比</strong>：生活中我们把常用物品放在方便的位置，比如常用厨具、办公文具，或者把常查资料随手记下。大脑短期记忆也是一种天然缓存机制，让我们快速调用常用信息。</p><p><strong>核心观点</strong>：把重要和常用的资源放在“快速可达”位置，提高效率和体验。</p><hr><h2 id="分布式系统：协作与冗余"><a href="#分布式系统：协作与冗余" class="headerlink" title="分布式系统：协作与冗余"></a>分布式系统：协作与冗余</h2><p><strong>技术角度</strong>：通过多个节点协作完成任务，提高容错性和可扩展性。<br><strong>生活类比</strong>：家庭中多个孩子共同分担家务，或者团队成员各自负责不同任务，互相支撑。甚至生育多个孩子，也可以被看作生活中的“备份”，类似 IT 中的主从复制，保证核心功能不因单点故障失效。</p><p><strong>核心观点</strong>：分工协作和冗余设计，是应对复杂世界的不二法门。</p><hr><h2 id="事务与原子性：操作要么全部成功，要么全部回退"><a href="#事务与原子性：操作要么全部成功，要么全部回退" class="headerlink" title="事务与原子性：操作要么全部成功，要么全部回退"></a>事务与原子性：操作要么全部成功，要么全部回退</h2><p><strong>技术角度</strong>：数据库事务保证原子性，一组操作要么全部成功，要么全部撤销。<br><strong>生活类比</strong>：烹饪、装修或签署合同时，如果某一步骤失败，整个操作可能需要重做，而不能留下半成品或不完整状态。生活中的很多重要决策也遵循这个原则：完整性比零碎尝试更可靠。</p><p><strong>核心观点</strong>：完整、可回退的操作设计，可以避免小错误放大为大问题。</p><hr><h2 id="消息队列：异步协作，解耦依赖"><a href="#消息队列：异步协作，解耦依赖" class="headerlink" title="消息队列：异步协作，解耦依赖"></a>消息队列：异步协作，解耦依赖</h2><p><strong>技术角度</strong>：消息队列让系统之间异步通信，平滑流量，解耦依赖。<br><strong>生活类比</strong>：给朋友布置任务或留言，不要求同时完成，大家按顺序处理即可。学校作业、团队任务，也都是这种“有序排队处理”的模式。</p><p><strong>核心观点</strong>：异步沟通和任务排队，是处理复杂协作场景的有效方式。</p><hr><h2 id="微服务架构：模块化与独立"><a href="#微服务架构：模块化与独立" class="headerlink" title="微服务架构：模块化与独立"></a>微服务架构：模块化与独立</h2><p><strong>技术角度</strong>：大型系统拆分成小服务，各自独立部署，减少耦合。<br><strong>生活类比</strong>：家庭日常管理可以拆分为洗衣、做饭、理财、打扫，每个模块独立运作；公司职能拆分为研发、销售、客服、财务，各司其职，减少冲突和依赖。</p><p><strong>核心观点</strong>：模块化设计让系统更灵活、更易管理，也适用于组织和生活规划。</p><hr><h2 id="监控与告警：及时发现异常"><a href="#监控与告警：及时发现异常" class="headerlink" title="监控与告警：及时发现异常"></a>监控与告警：及时发现异常</h2><p><strong>技术角度</strong>：系统通过监控指标和告警机制，及时发现和处理异常。<br><strong>生活类比</strong>：烟雾报警器、健康体检、观察宠物行为变化，都是生活中的监控与告警机制，让我们及时干预，避免小问题演变成大灾难。</p><p><strong>核心观点</strong>：及时发现、早期干预，是保证系统与生活稳定的关键。</p><hr><h2 id="回滚与版本管理：可恢复的决策"><a href="#回滚与版本管理：可恢复的决策" class="headerlink" title="回滚与版本管理：可恢复的决策"></a>回滚与版本管理：可恢复的决策</h2><p><strong>技术角度</strong>：系统或代码出错，可以回滚到稳定版本。<br><strong>生活类比</strong>：烹饪失败可以重做，装修不合适可以恢复旧布局，预算管理出现偏差可以调整记录。生活中拥有“回滚”机制，可以让我们更大胆地尝试，同时降低风险。</p><p><strong>核心观点</strong>：保持可恢复的选择，让尝试和创新更安全。</p><hr><h2 id="幂等性：重复操作不出错"><a href="#幂等性：重复操作不出错" class="headerlink" title="幂等性：重复操作不出错"></a>幂等性：重复操作不出错</h2><p><strong>技术角度</strong>：幂等操作多次执行，结果相同，不会产生额外副作用。<br><strong>生活类比</strong>：发通知或消息，多次发送不会让结果叠加；多次打扫房间不会乱，只会保持整洁；按步骤反复练习技能，结果始终可控。</p><p><strong>核心观点</strong>：设计可重复、可安全执行的操作，是复杂系统和生活中降低意外的有效策略。</p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>从混沌工程到分布式系统，从事务管理到消息队列，IT 的每一个设计原则都映射着生活的智慧。它们提醒我们：</p><ul><li><strong>提前演练与备份</strong>，应对不可预测；</li><li><strong>合理分工与模块化</strong>，提升效率与容错；</li><li><strong>记录、可回滚、幂等性</strong>，降低错误风险；</li><li><strong>监控与告警</strong>，及时发现问题；</li><li><strong>缓存与快速访问</strong>，优化效率与体验。</li></ul><p>生活与技术，其实都是在管理复杂性。理解技术原理，也是在理解生活智慧；把生活经验映射到技术，也能让架构设计更人性、更稳健。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;内容观点由 &lt;a href=&quot;https://kingson4wu.github.io/2021/07/06/20210706-it-zhong-de-sheng-huo-zhe-xue/&quot;&gt;IT中的生活哲学&lt;/a&gt;启发&lt;</summary>
      
    
    
    
    
    <category term="生活哲学" scheme="http://yoursite.com/tags/%E7%94%9F%E6%B4%BB%E5%93%B2%E5%AD%A6/"/>
    
    <category term="技术架构" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>关于“卷”的理性分析与分类</title>
    <link href="http://yoursite.com/2025/10/16/20251016-guan-yu-juan-de-li-xing-fen-xi-yu-fen-lei/"/>
    <id>http://yoursite.com/2025/10/16/20251016-guan-yu-juan-de-li-xing-fen-xi-yu-fen-lei/</id>
    <published>2025-10-16T07:18:11.000Z</published>
    <updated>2025-10-16T07:20:57.223Z</updated>
    
    <content type="html"><![CDATA[<blockquote><blockquote><p>内容由AI生成</p></blockquote></blockquote><p>在现代职场和学业环境中，“卷”已成为普遍现象。然而，卷并非单一形态，而是包含多种类型。这些类型反映了个体在面对竞争压力时的心理态度、动机以及策略选择。理解不同类型的内卷，有助于我们在激烈竞争中保持理性，做出长期有效的职业和生活规划。</p><h2 id="一、迫不得已型：被动卷的生存策略"><a href="#一、迫不得已型：被动卷的生存策略" class="headerlink" title="一、迫不得已型：被动卷的生存策略"></a>一、迫不得已型：被动卷的生存策略</h2><p><strong>特征</strong></p><ul><li><strong>被动应对</strong>：卷的行为主要源于外部压力，而非内在驱动，属于为了维持基本生存和安全感的应激反应。</li><li><strong>缺乏选择空间</strong>：常受经济压力、家庭责任或社会环境限制，短期内难以脱身。</li><li><strong>效率偏低</strong>：因缺乏明确目标，行为易陷入低效重复，消耗精力却收效有限。</li></ul><p><strong>典型情境</strong></p><ul><li>刚毕业的求职者，为了获得稳定岗位，不得不参与长时间求职竞争或加班。</li><li>面临房贷、家庭支出压力的中年职场人，为保住职位或收入，不得不参与公司内卷。</li></ul><p><strong>分析</strong><br>这种类型的内卷反映了外部压力对个体行为的强制性影响。长期处于这种状态，容易产生职业倦怠和心理压力。因此，关键在于寻找自我内在动力，或通过技能提升、转型等方式增加选择自由度，从被动卷转向主动卷。</p><hr><h2 id="二、工贼型：享受卷但缺乏长期视野"><a href="#二、工贼型：享受卷但缺乏长期视野" class="headerlink" title="二、工贼型：享受卷但缺乏长期视野"></a>二、工贼型：享受卷但缺乏长期视野</h2><p><strong>特征</strong></p><ul><li><strong>短期收益导向</strong>：沉浸于即时成就感或表面竞争优势，却缺乏长期战略眼光。</li><li><strong>忽视平衡</strong>：往往牺牲身心健康和团队协作，甚至成为内耗源。</li><li><strong>高度竞争性</strong>：积极参与或推动内卷氛围，将竞争作为自我价值的体现。</li></ul><p><strong>典型情境</strong></p><ul><li>某些互联网企业的“加班文化推手”，将高强度加班视作能力和忠诚的象征。</li><li>为争夺晋升机会，不惜牺牲团队长期合作和整体绩效。</li></ul><p><strong>分析</strong><br>工贼型内卷者短期看似高产，但容易导致团队效率下降和人际关系紧张。理性提醒：即便短期收益可观，也应关注长期健康和团队可持续性，否则个人与组织都会付出隐性成本。</p><hr><h2 id="三、享受卷但不理智型：聪明但缺乏全局观"><a href="#三、享受卷但不理智型：聪明但缺乏全局观" class="headerlink" title="三、享受卷但不理智型：聪明但缺乏全局观"></a>三、享受卷但不理智型：聪明但缺乏全局观</h2><p><strong>特征</strong></p><ul><li><strong>局部最优陷阱</strong>：在卷的过程中能展现高效率和成果，但缺乏长远规划，易被短期利益蒙蔽。</li><li><strong>快速疲惫</strong>：高强度竞争消耗自身资源，难以持续。</li><li><strong>沉迷自我成就感</strong>：过度追求局部成功，忽略长期职业发展和可持续性。</li></ul><p><strong>典型情境</strong></p><ul><li>高薪但高强度岗位的年轻员工，认为“燃烧自己”能快速晋升。</li><li>创业初期团队为占领市场，不惜过度消耗自身创新力。</li></ul><p><strong>分析</strong><br>这种类型显示了智力与努力的结合，但缺乏战略性规划。短期高产可能带来表面优势，但长期会因精力耗尽或资源枯竭而停滞。理性策略是：在追求效率的同时，引入长期目标和可持续性思维。</p><hr><h2 id="四、享受且理智聪明型：卷中的理性巅峰"><a href="#四、享受且理智聪明型：卷中的理性巅峰" class="headerlink" title="四、享受且理智聪明型：卷中的理性巅峰"></a>四、享受且理智聪明型：卷中的理性巅峰</h2><p><strong>特征</strong></p><ul><li><strong>战略性投入</strong>：愿意投入时间和精力，同时制定长期发展规划。</li><li><strong>效率优先</strong>：注重方法优化、持续反思和改进，避免无效内卷。</li><li><strong>多维成长</strong>：关注职业技能、身心健康、心理状态和人际关系的全面发展。</li></ul><p><strong>典型情境</strong></p><ul><li>企业家在创业早期虽然努力投入，但会权衡市场布局和创新力培养。</li><li>高度自律的专业人士，能够平衡工作与生活，实现长期职业成功。</li></ul><p><strong>分析</strong><br>这一类型体现了理性内卷的最佳状态：卷不等于无序努力，而是通过战略规划、效率提升和全局思维实现可持续成长。可视为卷的“成熟形态”，为职业与生活提供可复制的范式。</p><hr><h2 id="总结与思考"><a href="#总结与思考" class="headerlink" title="总结与思考"></a>总结与思考</h2><ol><li>内卷类型随个体认知和环境变化动态演化，不是固定不变的。</li><li>被动卷者需寻找内在动力，逐步从被动卷向主动卷。</li><li>工贼型需意识到长期健康与团队协作的重要性，避免短期得益带来长期损失。</li><li>享受但不理智型应增加战略思维，兼顾效率与可持续性。</li><li>享受且理智聪明型代表理性卷的最高境界，强调全局观、持续优化与多维成长。</li></ol><p><strong>关键启示</strong><br>面对内卷，最重要的是明确自身目标，权衡长期与短期利益，避免被短期焦虑和集体惯性驱动。同时，提升“不可替代性”，通过技能、战略思维和人际影响力实现主动掌控，而不是被动卷入。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;内容由AI生成&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;在现代职场和学业环境中，“卷”已成为普遍现象。然而，卷并非单一形态，而是包含多种类型。这些类型反映了个体在面对竞争压力时的心理态度、动机</summary>
      
    
    
    
    
    <category term="职场" scheme="http://yoursite.com/tags/%E8%81%8C%E5%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>内部会议低效与对外宣讲价值的分析</title>
    <link href="http://yoursite.com/2025/10/15/20251015-nei-bu-hui-yi-di-xiao-yu-dui-wai-xuan-jiang-jie-zhi-de-fen-xi/"/>
    <id>http://yoursite.com/2025/10/15/20251015-nei-bu-hui-yi-di-xiao-yu-dui-wai-xuan-jiang-jie-zhi-de-fen-xi/</id>
    <published>2025-10-15T04:54:21.000Z</published>
    <updated>2025-10-15T04:58:27.327Z</updated>
    
    <content type="html"><![CDATA[<blockquote><blockquote><p>内容由AI生成</p></blockquote></blockquote><p>在职场和组织运作中，“开会效率低下”与“文档可替代会议”的现象非常普遍。与此同时，对外产品推广、宣讲会和培训会却仍被广泛采用，这反映了内部沟通与外部传播在效率和效果上的差异。</p><h2 id="一、内部会议低效的原因"><a href="#一、内部会议低效的原因" class="headerlink" title="一、内部会议低效的原因"></a>一、内部会议低效的原因</h2><ol><li><p><strong>形式化文化</strong><br>很多组织习惯性依赖会议传达信息和决策，会议成为一种流程化仪式，而非解决问题的工具。即便信息可通过文档传达，员工也往往默认必须开会才能算正式。</p></li><li><p><strong>目标不明确</strong><br>会议缺乏清晰的主题和预期成果，参会者只能被动接收信息，讨论易偏离核心问题，效率自然下降。</p></li><li><p><strong>信息冗余</strong><br>当信息已有文档可供查阅时，会议往往只是重复传达，增加时间成本而没有实际增值。</p></li><li><p><strong>责任规避心理</strong><br>集体会议能够降低个人决策风险，让参与者在表面参与中推卸责任，形成“为了开会而开会”的惯性。</p></li><li><p><strong>低效的会议管理</strong><br>缺乏明确主持、议程控制和时间管理，使会议易陷入冗长拖沓，决策难以落地。</p></li></ol><p><strong>总结</strong>：内部低效会议是组织文化、管理习惯及沟通方式选择不当的综合体现。在信息可通过文档等形式高效传递时，会议本身往往成为时间浪费。</p><h2 id="二、对外宣讲会和培训会的价值"><a href="#二、对外宣讲会和培训会的价值" class="headerlink" title="二、对外宣讲会和培训会的价值"></a>二、对外宣讲会和培训会的价值</h2><p>尽管内部会议低效，但面对外部客户或受众时，宣讲会仍具不可替代的作用：</p><ol><li><p><strong>增强信任感</strong><br>面对陌生产品或信息，现场互动能够快速建立信任，现场演示和答疑比文档更具说服力。</p></li><li><p><strong>互动性与即时反馈</strong><br>观众可以实时提出问题并得到解答，避免误解和信息遗漏，提升信息传递的有效性。</p></li><li><p><strong>信息与情感结合</strong><br>演讲者的语气、表情和肢体语言能够传递情感，提高信息感染力，而文档难以做到。</p></li><li><p><strong>引起兴趣与参与感</strong><br>生动展示和故事化表达能够激发主动关注，增强参与感和记忆度。</p></li><li><p><strong>社交与网络效应</strong><br>宣讲会提供人脉拓展和交流机会，这种社交附加价值是文档无法替代的。</p></li></ol><p><strong>总结</strong>：宣讲会不仅是信息传递工具，更兼具情感传递、互动反馈和信任建立的功能，在特定市场和用户心理下仍不可或缺。</p><h2 id="三、平衡会议与文档的使用"><a href="#三、平衡会议与文档的使用" class="headerlink" title="三、平衡会议与文档的使用"></a>三、平衡会议与文档的使用</h2><ol><li><p><strong>内部沟通优化</strong></p><ul><li>区分信息传递型与决策型会议，前者优先使用文档，后者才开会。</li><li>明确议程和目标，确保会议有实际产出。</li></ul></li><li><p><strong>外部推广优化</strong></p><ul><li>结合线上文档、视频和直播，实现线上线下混合传播。</li><li>根据用户偏好调整宣讲形式和频次，避免过度依赖面对面。</li></ul></li><li><p><strong>组织文化建设</strong></p><ul><li>培养员工判断何时开会、何时使用文档的能力，减少形式化会议。</li><li>在培训中兼顾文档与互动式教学，提高效率与体验。</li></ul></li></ol><hr><p><strong>结论</strong>：<br>内部会议效率低下多源于文化、管理和工具选择问题，应优先利用文档、邮件等方式传递信息。对外宣讲会虽耗时，但结合信任、互动和情感传递，仍有其独特价值。合理区分场景和沟通方式，是提升组织效率和传播效果的关键。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;内容由AI生成&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;在职场和组织运作中，“开会效率低下”与“文档可替代会议”的现象非常普遍。与此同时，对外产品推广、宣讲会和培训会却仍被广泛采用，这反映了内</summary>
      
    
    
    
    
    <category term="职场" scheme="http://yoursite.com/tags/%E8%81%8C%E5%9C%BA/"/>
    
    <category term="会议" scheme="http://yoursite.com/tags/%E4%BC%9A%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>Seata 与分布式事务的本质解析</title>
    <link href="http://yoursite.com/2025/09/17/20250917-seata-yu-fen-bu-shi-shi-wu-de-ben-zhi-jie-xi/"/>
    <id>http://yoursite.com/2025/09/17/20250917-seata-yu-fen-bu-shi-shi-wu-de-ben-zhi-jie-xi/</id>
    <published>2025-09-17T06:36:20.000Z</published>
    <updated>2025-09-17T06:40:41.634Z</updated>
    
    <content type="html"><![CDATA[<blockquote><blockquote><p>以前总结过分布式事务，最近又看到有人提Seata，让AI协助在简要总结补充一下</p></blockquote></blockquote><blockquote><blockquote><p>旧文：<a href="https://kingson4wu.github.io/2020/09/12/20200912-fen-bu-shi-shi-wu-jian-yao-zong-jie/">分布式事务简要总结</a></p></blockquote></blockquote><h1 id="Seata-与分布式事务的本质解析"><a href="#Seata-与分布式事务的本质解析" class="headerlink" title="Seata 与分布式事务的本质解析"></a>Seata 与分布式事务的本质解析</h1><p>分布式事务一直是微服务架构中最棘手的问题之一：如何保证跨服务、跨库操作的一致性，又不让业务代码充斥各种回滚和补偿逻辑？Seata 的出现，就是为了解决这个问题。</p><p>本文以 Seata 为例，梳理分布式事务的核心思想、适用边界和设计要点。</p><hr><h2 id="1-分布式事务的本质"><a href="#1-分布式事务的本质" class="headerlink" title="1. 分布式事务的本质"></a>1. 分布式事务的本质</h2><p>分布式事务的核心是两部分：</p><ul><li><strong>状态机</strong>：记录每个参与者的执行状态，决定最终是提交还是回滚。</li><li><strong>补偿逻辑</strong>：在失败时回滚或“补偿”已经执行的操作，恢复一致性。</li></ul><p>传统做法是把状态记录和补偿逻辑散落在各个业务系统中，开发者需要自己写“定时扫描失败事务 → 回滚&#x2F;重试”的代码。Seata 把这些通用能力抽取出来，做成中间件，由协调器统一管理。</p><blockquote><p><strong>一句话概括：Seata &#x3D; 事务状态机 + 补偿机制的中间件化。</strong></p></blockquote><hr><h2 id="2-Seata-的工作原理"><a href="#2-Seata-的工作原理" class="headerlink" title="2. Seata 的工作原理"></a>2. Seata 的工作原理</h2><p>Seata 的核心组件和机制：</p><ul><li><strong>XID</strong>：每个全局事务有一个唯一事务 ID。</li><li><strong>Undo log &#x2F; TCC &#x2F; SAGA</strong>：用于回滚或补偿。</li><li><strong>协调器（Seata Server）</strong>：维护事务状态，异常时通知所有参与者回滚。</li></ul><p>这样，业务代码只需关注本地事务，分布式事务的控制逻辑由 Seata 统一处理。</p><hr><h2 id="3-模式选择与适用场景"><a href="#3-模式选择与适用场景" class="headerlink" title="3. 模式选择与适用场景"></a>3. 模式选择与适用场景</h2><p>Seata 支持四种事务模式：AT、TCC、SAGA、XA。它们的适用场景各不相同：</p><table><thead><tr><th>模式</th><th>范围</th><th>一致性</th><th>补偿逻辑</th><th>复杂度</th><th>性能</th></tr></thead><tbody><tr><td><strong>AT</strong></td><td>数据库 CRUD</td><td>数据库内强&#x2F;最终一致</td><td>自动生成 undo log</td><td>低</td><td>高</td></tr><tr><td><strong>XA</strong></td><td>跨库&#x2F;支持 XA 资源</td><td>强一致</td><td>2PC 自动</td><td>中</td><td>较低</td></tr><tr><td><strong>TCC</strong></td><td>跨系统可控</td><td>强一致（业务可控）</td><td>业务实现 Try&#x2F;Confirm&#x2F;Cancel</td><td>高</td><td>较低</td></tr><tr><td><strong>SAGA</strong></td><td>跨系统可补偿</td><td>最终一致</td><td>业务补偿</td><td>高</td><td>较好</td></tr></tbody></table><p>直观类比：</p><ul><li><strong>AT ≈ 数据库级 SAGA</strong>：自动补偿、透明接入，但仅限数据库操作。</li><li><strong>XA ≈ 数据库级 TCC</strong>：两阶段提交，强一致性，但性能开销大。</li></ul><hr><h2 id="4-AT-模式的边界与风险"><a href="#4-AT-模式的边界与风险" class="headerlink" title="4. AT 模式的边界与风险"></a>4. AT 模式的边界与风险</h2><p>AT 模式通过 undo log 实现“自动回滚”，开发体验好，但前提非常苛刻：</p><ul><li>参与的操作必须是数据库 CRUD。</li><li>所有操作必须可回滚。</li><li>无外部不可控资源参与。</li></ul><p>一旦业务扩展到调用外部系统、发送消息、扣减不可逆资源，AT 模式就无法保证一致性，需要切换到 TCC 或 SAGA。</p><blockquote><p><strong>实务建议</strong>：AT 模式仅适合小范围、可控的内部 CRUD 事务，否则维护成本可能比自己实现补偿更高。</p></blockquote><hr><h2 id="5-XA-模式的定位"><a href="#5-XA-模式的定位" class="headerlink" title="5. XA 模式的定位"></a>5. XA 模式的定位</h2><p>XA 实现了标准的 <strong>2PC 协议</strong>，保证所有参与资源在 commit 或 rollback 上保持强一致。但代价是性能开销大、锁定时间长，容易成为瓶颈。</p><p>适合场景：</p><ul><li>核心金融业务。</li><li>跨数据库、对一致性要求极高的场景。</li></ul><p>不适合场景：</p><ul><li>高吞吐、低延迟要求。</li><li>涉及外部不可回滚操作。</li></ul><hr><h2 id="6-金钱类业务的最佳实践"><a href="#6-金钱类业务的最佳实践" class="headerlink" title="6. 金钱类业务的最佳实践"></a>6. 金钱类业务的最佳实践</h2><p>金钱或虚拟资产的扣减不可单纯依赖数据库回滚，必须在业务层设计冻结与补偿：</p><ul><li><strong>TCC 模式</strong>：冻结资金（Try）→ 成功扣除（Confirm）→ 失败释放（Cancel）。</li><li><strong>SAGA 模式</strong>：通过补偿动作返还或补币，保证最终一致性。</li></ul><blockquote><p><strong>一句话</strong>：资金类业务的回滚是业务设计问题，而非 undo log 能解决的问题。</p></blockquote><hr><h2 id="7-Seata-的优劣势"><a href="#7-Seata-的优劣势" class="headerlink" title="7. Seata 的优劣势"></a>7. Seata 的优劣势</h2><p><strong>优势</strong></p><ul><li>易用：AT 模式接入简单，少量注解即可接入分布式事务。</li><li>微服务友好：跨服务调用自动关联同一全局事务。</li><li>支持多模式：可根据业务复杂度选择 AT、TCC、SAGA、XA。</li></ul><p><strong>局限</strong></p><ul><li>性能开销：协调器通信、undo&#x2F;redo log 可能成为高并发瓶颈。</li><li>业务限制：AT 模式对操作可回滚性要求高，限制业务演进。</li><li>运维成本：需部署和监控 Seata Server。</li></ul><hr><h2 id="8-总结"><a href="#8-总结" class="headerlink" title="8. 总结"></a>8. 总结</h2><ul><li><strong>Seata 的本质</strong>：把分布式事务的状态机和补偿逻辑从业务中剥离，由中间件统一管理。</li><li><strong>AT 模式适合内部可控 CRUD，XA 适合跨库强一致，TCC&#x2F;SAGA 适合跨系统或外部不可回滚场景。</strong></li><li><strong>资金类业务必须设计冻结&#x2F;补偿机制，不能依赖数据库回滚。</strong></li></ul><blockquote><p><strong>一句话总结</strong>：Seata 能大幅降低分布式事务开发成本，但必须理解每种模式的边界，才能在性能和一致性之间找到平衡。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;以前总结过分布式事务，最近又看到有人提Seata，让AI协助在简要总结补充一下&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;旧文：&lt;a href</summary>
      
    
    
    
    
    <category term="分布式事务" scheme="http://yoursite.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
    
    <category term="Seata" scheme="http://yoursite.com/tags/Seata/"/>
    
  </entry>
  
  <entry>
    <title>IP 归属与全球路由：从 IPv4 到 IPv6 的原理与实践</title>
    <link href="http://yoursite.com/2025/09/15/20250915-ip-gui-shu-yu-quan-qiu-lu-you-cong-ipv4-dao-ipv6-de-yuan-li-yu-shi-jian/"/>
    <id>http://yoursite.com/2025/09/15/20250915-ip-gui-shu-yu-quan-qiu-lu-you-cong-ipv4-dao-ipv6-de-yuan-li-yu-shi-jian/</id>
    <published>2025-09-15T13:53:59.000Z</published>
    <updated>2025-09-16T05:37:54.966Z</updated>
    
    <content type="html"><![CDATA[<blockquote><blockquote><p>个人提供问题和疑惑, 最终AI生成</p></blockquote></blockquote><p>在网络运维、网络安全和跨境加速等场景中，常见的问题是：一个 IP 属于哪个国家？能不能直接判断它的归属方？全球 IP、Anycast、IPv6 又在其中扮演什么角色？本文将系统性地梳理相关原理与实践，帮助读者全面理解 IP 地址的归属、解析与加速机制。</p><hr><h2 id="1-IP-地址与国家归属"><a href="#1-IP-地址与国家归属" class="headerlink" title="1. IP 地址与国家归属"></a>1. IP 地址与国家归属</h2><p>首先要明确：<strong>IP 地址本身并不携带国家信息</strong>。一个 IP 的归属由注册和分配记录决定，而这些记录可能随着时间变化。<br>全球有五大区域互联网注册管理机构（RIR）：</p><ul><li><strong>ARIN</strong>（北美）</li><li><strong>RIPE NCC</strong>（欧洲、中东等）</li><li><strong>APNIC</strong>（亚太地区）</li><li><strong>LACNIC</strong>（拉美）</li><li><strong>AFRINIC</strong>（非洲）</li></ul><p>RIR 将 IP 地址段分配给 ISP 或组织，记录在其数据库中。用户可通过 <strong>whois 查询</strong>获取注册信息（组织、联系人、国家字段等）。此外，常见的 <strong>GeoIP 库</strong>则结合注册记录和测量结果，推断实际使用位置。</p><p>需要注意：</p><ul><li>动态分配、云计算、跨国部署可能导致 <strong>注册国 ≠ 实际使用地</strong>。</li><li>RIR 的 <code>country</code> 字段通常存在，但早期分配、小规模分配、私有地址（如 10&#x2F;172.16–31&#x2F;192.168 段）等情况可能缺失或不准确。</li></ul><p>因此，在实践中应结合 whois 与 GeoIP，多维度判断。</p><hr><h2 id="2-公网-IP-与“全球-IP”"><a href="#2-公网-IP-与“全球-IP”" class="headerlink" title="2. 公网 IP 与“全球 IP”"></a>2. 公网 IP 与“全球 IP”</h2><p>所谓 <strong>全球 IP</strong>，通常指的是 <strong>可全球路由的公网 IP</strong>，即：</p><ul><li>必须在 RIR 注册，且可被 <strong>BGP</strong>（边界网关协议）宣告。</li><li>不能是私有地址（RFC1918）或特殊保留地址。</li></ul><p>对于一个全球 IP，其 whois 的国家字段一般对应注册国。但在 CDN、云厂商或动态分配场景下，实际使用地可能不同。GeoIP 库则可能返回另一个国家。</p><hr><h2 id="3-域名解析与全球优化"><a href="#3-域名解析与全球优化" class="headerlink" title="3. 域名解析与全球优化"></a>3. 域名解析与全球优化</h2><p>域名解析（DNS）与 IP 的关系也影响访问路径：</p><ul><li><p>一个域名通常只对应有限数量的 IP，而不是每个节点一个 IP。</p></li><li><p>DNS 解析器根据发起查询的位置，进行<strong>近似的定位</strong>，但并不能保证返回的 IP 就是“最佳路径”。</p></li><li><p>为优化跨运营商或跨国访问，运营商或加速服务会引入 <strong>全球 IP 加速</strong>，包括：</p><ul><li><strong>Anycast</strong>（多点宣告同一 IP，BGP 自动选择最近节点）</li><li><strong>优选链路</strong>与 <strong>网络层优化</strong></li></ul></li></ul><p>组合方式往往是：<strong>DNS 负责粗定位，全球 IP&#x2F;Anycast 负责网络层加速</strong>。</p><hr><h2 id="4-Anycast-与-IP-归属"><a href="#4-Anycast-与-IP-归属" class="headerlink" title="4. Anycast 与 IP 归属"></a>4. Anycast 与 IP 归属</h2><p>Anycast 是一种在全球多节点宣告同一 IP 的方式。其关键点：</p><ul><li><strong>IP 所有权不变</strong>，始终属于某个固定的组织或 ISP。</li><li>多个节点在不同地区通过 BGP 宣告该 IP 前缀。</li><li>BGP 路由器会自动选择“距离最近、路径最优”的节点，从而实现<strong>同一 IP 多点可达</strong>。</li><li>跨运营商场景下，Anycast 体现为路由与节点层面的协作，但不会改变 IP 的归属方。</li></ul><hr><h2 id="5-IPv6-的归属与特性"><a href="#5-IPv6-的归属与特性" class="headerlink" title="5. IPv6 的归属与特性"></a>5. IPv6 的归属与特性</h2><p>IPv6 的分配与 IPv4 相同：由 RIR 分配给 ISP 或组织，whois 中有组织、国家、联系人等字段。<br>IPv6 的特点：</p><ul><li>地址空间巨大，避免了 IPv4 地址枯竭。</li><li>原生支持 Anycast，多节点部署更加灵活。</li><li>分配策略更灵活，可轻松支持大规模网络与 IoT。</li><li>但同样存在 <strong>注册国 ≠ 实际使用国</strong> 的情况。</li></ul><hr><h2 id="6-IPv6-与点对点通信的现实"><a href="#6-IPv6-与点对点通信的现实" class="headerlink" title="6. IPv6 与点对点通信的现实"></a>6. IPv6 与点对点通信的现实</h2><p>理论上，IPv6 每个终端都可分配一个全球唯一的可路由地址，不再依赖 NAT，因此点对点通信可行。但在实际中受到限制：</p><ul><li>防火墙与运营商策略可能阻止入站流量。</li><li>临时地址和可达性问题导致直连不稳定。</li><li>常需依赖 <strong>STUN&#x2F;TURN&#x2F;ICE</strong> 等协议进行 NAT 穿透或中继。</li></ul><p>因此，虽然 IPv6 具备直连潜力，但中间服务器在鉴权、在线状态管理、转发&#x2F;缓存中仍然不可或缺。</p><hr><h2 id="7-IPv6-的加速与应用场景"><a href="#7-IPv6-的加速与应用场景" class="headerlink" title="7. IPv6 的加速与应用场景"></a>7. IPv6 的加速与应用场景</h2><p>IPv6 在加速和部署方面的优势主要体现在：</p><ul><li><strong>Anycast + BGP 全球选路</strong> → 更快更稳的跨境访问。</li><li><strong>减少 NAT 开销</strong> → 路由清晰、端口映射少、传输更高效。</li><li><strong>内部优化</strong> → 在云&#x2F;数据中心或企业网中，通过 IPv6 前缀规划实现高效路由。</li></ul><p>当前的实际应用场景包括：</p><ul><li>移动&#x2F;家宽逐步普及 IPv6 接入。</li><li>CDN、DNS 提供 IPv6 服务。</li><li>IoT 设备大规模寻址与管理。</li><li>科研网、企业网的直连与高性能通信。</li></ul><p>效果上表现为跨国访问延迟更低、丢包率更少，但并非完全消除了中间服务器。</p><hr><h2 id="8-IPv4-与-IPv6-的对比"><a href="#8-IPv4-与-IPv6-的对比" class="headerlink" title="8. IPv4 与 IPv6 的对比"></a>8. IPv4 与 IPv6 的对比</h2><ul><li><strong>IPv4</strong>：地址紧张，依赖 NAT，Anycast 可用但规模受限。</li><li><strong>IPv6</strong>：地址充足，无需 NAT，更易扩展多节点部署与策略管理。</li><li><strong>二层直达</strong>：在同一二层网络，IPv6 可通过 <strong>NDP（邻居发现协议）</strong> 直接解析到 MAC 地址，实现二层转发，低延迟高吞吐。但跨子网仍需三层路由，公网环境也无法直接二层通信。</li><li><strong>内部路由优化</strong>：IPv4&#x2F;IPv6 原理一致，但 IPv6 的地址充裕和 NAT-free 特性让其更适合大规模优化。</li></ul><hr><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>IP 归属与全球加速机制是网络架构中最基础却又最复杂的话题之一。<br>我们可以总结为：</p><ul><li><strong>IP 归属由 RIR 注册记录决定，不随意变化，但注册国与实际使用国可能不同。</strong></li><li><strong>Anycast 提供了“同一 IP，多点接入”的能力，加速跨网跨国通信，但不改变 IP 所属。</strong></li><li><strong>IPv6 在地址空间、路由灵活性和端到端通信潜力上优于 IPv4，但现实部署仍受策略与安全限制。</strong></li></ul><p>理解这些原理，有助于我们在跨境加速、CDN 部署、企业网优化、IoT 管理等场景下更合理地设计网络架构。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;个人提供问题和疑惑, 最终AI生成&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;在网络运维、网络安全和跨境加速等场景中，常见的问题是：一个 IP 属于哪个国家？能不能直接判断它的归属方？全球 IP</summary>
      
    
    
    
    
    <category term="IP" scheme="http://yoursite.com/tags/IP/"/>
    
    <category term="Anycast" scheme="http://yoursite.com/tags/Anycast/"/>
    
    <category term="IPv6" scheme="http://yoursite.com/tags/IPv6/"/>
    
  </entry>
  
  <entry>
    <title>深入理解域名解析与管理：从 DNS 原理到注册商与注册局</title>
    <link href="http://yoursite.com/2025/09/15/20250915-shen-ru-li-jie-yu-ming-jie-xi-yu-guan-li-cong-dns-yuan-li-dao-zhu-ce-shang-yu-zhu-ce-ju/"/>
    <id>http://yoursite.com/2025/09/15/20250915-shen-ru-li-jie-yu-ming-jie-xi-yu-guan-li-cong-dns-yuan-li-dao-zhu-ce-shang-yu-zhu-ce-ju/</id>
    <published>2025-09-15T13:41:02.000Z</published>
    <updated>2025-09-15T13:43:56.220Z</updated>
    
    <content type="html"><![CDATA[<blockquote><blockquote><p>个人提供问题和疑惑, 最终AI生成</p></blockquote></blockquote><p>域名是互联网的入口。我们日常访问网站时，输入的是 <code>example.com</code> 这样的域名，而真正通信依赖的是 IP 地址。域名解析系统（DNS, Domain Name System）正是完成“人类友好名称 → 机器可识别地址”这一过程的基础设施。本文将从域名解析原理、运营商与公共 DNS 的关系、域名管理机制、注册商与注册局的角色，到域名定价和续费规则，全面梳理这一体系。</p><hr><h2 id="一、域名解析的基本原理"><a href="#一、域名解析的基本原理" class="headerlink" title="一、域名解析的基本原理"></a>一、域名解析的基本原理</h2><p>域名解析（DNS 解析）的目标是：<strong>把域名解析为 IP 地址</strong>。它依赖一个全球分布式、分层级的系统，通过递归查询来完成。</p><h3 id="解析流程"><a href="#解析流程" class="headerlink" title="解析流程"></a>解析流程</h3><ol><li><strong>本地缓存</strong>：操作系统或浏览器先查缓存。</li><li><strong>递归解析器</strong>：通常由运营商或公共 DNS 提供。</li><li><strong>根服务器</strong>：告诉解析器某个顶级域（如 <code>.com</code>）由哪个 TLD 服务器负责。</li><li><strong>TLD 服务器</strong>：返回该域名的权威 DNS 信息。</li><li><strong>权威 DNS</strong>：存放最终解析记录（如 A 记录指向 IP）。</li><li><strong>返回结果并缓存</strong>：递归解析器返回给用户，并按 TTL（缓存时间）存储。</li></ol><h3 id="运营商的角色"><a href="#运营商的角色" class="headerlink" title="运营商的角色"></a>运营商的角色</h3><ul><li>运营商一般只提供 <strong>递归解析器</strong>。</li><li>在理论上，他们不能决定权威答案，但可以<strong>干预</strong>（例如 DNS 劫持或污染）。</li><li>用户可改用公共 DNS（如 8.8.8.8、1.1.1.1、9.9.9.9）来规避运营商干预。</li></ul><hr><h2 id="二、域名所有者如何修改解析"><a href="#二、域名所有者如何修改解析" class="headerlink" title="二、域名所有者如何修改解析"></a>二、域名所有者如何修改解析</h2><p>如果你是域名所有者，需要修改域名 IP，流程如下：</p><ol><li><strong>登录注册商控制台</strong>（阿里云、腾讯云、GoDaddy、Namecheap 等）。</li><li><strong>修改 DNS 记录</strong>：例如修改 A 记录指向新的 IP。</li><li><strong>注册商更新权威 DNS</strong>：你的修改会同步到托管的权威服务器。</li><li><strong>等待缓存刷新</strong>：全球的递归解析器会在 TTL 过期后重新查询。</li></ol><p>💡 建议：</p><ul><li>在迁移前先降低 TTL（如 300 秒），确保切换快。</li><li>修改完成后再调回较长 TTL。</li><li>无法强制清理他人缓存，但可手动清理本机缓存。</li></ul><hr><h2 id="三、IP-如何传播与信任机制"><a href="#三、IP-如何传播与信任机制" class="headerlink" title="三、IP 如何传播与信任机制"></a>三、IP 如何传播与信任机制</h2><p>很多人以为“IP 变更后会主动推送到全球”，实际上并不是。</p><ul><li><p><strong>传播机制</strong>：不是推送，而是“递归解析器查询后再缓存”；缓存过期再查新值。</p></li><li><p><strong>信任链</strong>：</p><ul><li>注册商验证域名所有者身份 → 更新权威 DNS</li><li>注册局更新该域名的 NS 信息</li><li>全球递归解析器依据 NS 去权威服务器查询</li><li>最终信任权威答案</li></ul></li></ul><p>注册商与注册局之间通过 <strong>EPP 协议</strong>安全同步，根服务器和 TLD 确保查询链条可信。</p><hr><h2 id="四、权威服务器与去中心化架构"><a href="#四、权威服务器与去中心化架构" class="headerlink" title="四、权威服务器与去中心化架构"></a>四、权威服务器与去中心化架构</h2><ul><li>每个域名都可以指定自己的 <strong>权威服务器</strong>（NS 记录）。</li><li>根服务器仅提供“目录”，不会存具体解析。</li><li>这种设计的优势：<strong>去中心化、可扩展、容错强</strong>。</li></ul><h3 id="切换权威-DNS-的流程"><a href="#切换权威-DNS-的流程" class="headerlink" title="切换权威 DNS 的流程"></a>切换权威 DNS 的流程</h3><p>例如从阿里云迁移到腾讯云：</p><ol><li>在新托管商（如腾讯云 DNSPod）添加域名并配置记录。</li><li>在注册商后台修改 NS（如 <code>ns1.dnspod.net</code>、<code>ns2.dnspod.net</code>）。</li><li>注册商将 NS 改动提交注册局。</li><li>全球解析器按新 NS 查询，约 24–48 小时内生效。</li></ol><p>大多数基础 DNS 托管服务（阿里云、腾讯云、Cloudflare）都是免费的。</p><hr><h2 id="五、自建权威服务器的风险与转移"><a href="#五、自建权威服务器的风险与转移" class="headerlink" title="五、自建权威服务器的风险与转移"></a>五、自建权威服务器的风险与转移</h2><p>如果自建权威服务器宕机，解析会失败，但域名不会“废掉”。</p><ul><li>你可以随时登录注册商，把 NS 改到新的托管商。</li><li>修改不依赖旧权威在线，只要新权威已配置好解析记录即可。</li><li>风险主要来自：账号被盗、域名过期、法律下架。</li></ul><p>👉 建议：</p><ul><li>自建时至少两台分布式 NS，并做好备份与监控。</li><li>如果不想长期维护，直接用托管 DNS。</li></ul><hr><h2 id="六、注册商与所有权确认"><a href="#六、注册商与所有权确认" class="headerlink" title="六、注册商与所有权确认"></a>六、注册商与所有权确认</h2><p>注册商怎么知道你是域名所有者？</p><ul><li>依据注册局的官方数据库（注册人信息、状态、注册商绑定）。</li><li>注册商账号体系（用户名 + 2FA）验证操作权限。</li></ul><p>注册商并非固定不变：</p><ul><li>你可以通过 <strong>转移码（EPP&#x2F;Auth Code）</strong> 转到新注册商。</li><li>转移不会改变所有权与解析，只是管理入口变更（通常赠送 1 年续费）。</li></ul><hr><h2 id="七、注册商与注册局的分工"><a href="#七、注册商与注册局的分工" class="headerlink" title="七、注册商与注册局的分工"></a>七、注册商与注册局的分工</h2><ul><li><p><strong>注册商</strong>：面向用户，负责登记、修改、续费、转移。</p></li><li><p><strong>注册局</strong>：维护某个顶级域（TLD）的数据库，不直接零售。</p></li><li><p>例如：</p><ul><li><code>.com</code> &#x2F; <code>.net</code> → Verisign（美国）</li><li><code>.org</code> → PIR（美国非营利）</li><li><code>.app</code> → Google Registry（美国）</li><li><code>.io</code> → ICB&#x2F;Afilias（英国&#x2F;国际）</li><li><code>.cn</code> → CNNIC（中国）</li><li><code>.top</code> → 中国机构</li></ul></li></ul><p>注册商必须绑定注册局，用户不能绕过注册商直接操作。</p><hr><h2 id="八、域名费用与所有权"><a href="#八、域名费用与所有权" class="headerlink" title="八、域名费用与所有权"></a>八、域名费用与所有权</h2><h3 id="费用构成"><a href="#费用构成" class="headerlink" title="费用构成"></a>费用构成</h3><ul><li><p>注册与续费的钱支付给 <strong>注册商</strong>。</p></li><li><p>注册商再向注册局支付批发费。</p></li><li><p>费用包含：</p><ul><li>注册局成本</li><li>注册商的管理服务（更新 NS、转移、防抢注）</li><li>DNS 托管、隐私保护、SSL、邮箱等增值服务</li></ul></li></ul><h3 id="为什么不同注册商价格不同？"><a href="#为什么不同注册商价格不同？" class="headerlink" title="为什么不同注册商价格不同？"></a>为什么不同注册商价格不同？</h3><p>虽然底层注册局批发价是统一的，但实际到用户手里的价格差异很常见，原因包括：</p><ol><li><p><strong>注册局只规定批发价</strong></p><ul><li>例如 <code>.com</code> 的注册局是 Verisign，目前批发价约 $10&#x2F;年。</li><li>各注册商在此基础上加利润与服务费再零售。</li></ul></li><li><p><strong>注册商定价策略不同</strong></p><ul><li>有的走低价策略（如 Cloudflare Registrar、NameSilo），接近批发价。</li><li>有的走高价+捆绑服务（GoDaddy、国内部分厂商），可能送邮箱、主机等。</li><li>有的搞促销：首年极便宜（几块钱甚至 1 元），后续续费回到正常价。</li></ul></li><li><p><strong>地区差异与税收</strong></p><ul><li>国内注册商价格通常含税，国外注册商显示的价格未必含增值税。</li></ul></li></ol><h4 id="示例价格差异"><a href="#示例价格差异" class="headerlink" title="示例价格差异"></a>示例价格差异</h4><table><thead><tr><th>注册商</th><th><code>.com</code> 首年</th><th><code>.com</code> 续费</th></tr></thead><tbody><tr><td>Cloudflare Registrar</td><td>$9.15（接近批发价）</td><td>$9.15</td></tr><tr><td>Namecheap</td><td>$6.98（促销）</td><td>$15.98</td></tr><tr><td>阿里云</td><td>¥55 左右</td><td>¥69 左右</td></tr><tr><td>GoDaddy</td><td>$12.99</td><td>$21.99</td></tr></tbody></table><blockquote><p>🔑 无论在哪个注册商注册，最终记录都存放在 Verisign 的注册局数据库里。价格差异只是注册商的加价和服务差异。</p></blockquote><h3 id="域名的所有权"><a href="#域名的所有权" class="headerlink" title="域名的所有权"></a>域名的所有权</h3><ul><li>“买域名”并不是买断，而是<strong>按年租用</strong>。</li><li>注册商只是代理，最终归属以注册局数据库为准（WHOIS 可查）。</li><li>若启用隐私保护，对外显示的是代理信息。</li></ul><hr><h2 id="九、价格机制与溢价域名"><a href="#九、价格机制与溢价域名" class="headerlink" title="九、价格机制与溢价域名"></a>九、价格机制与溢价域名</h2><ul><li>域名价格 &#x3D; 注册局批发价 + 注册商定价策略 + 市场供需。</li><li>Premium 域名（短、热门、单词域名）价格更高。</li><li>普通 <code>.com</code> 批发价约 7–10 美元&#x2F;年，零售价 10–15 美元&#x2F;年。</li><li><code>.app</code>、<code>.io</code> 等批发价更高，因此零售价也贵。</li><li>Premium 域名不仅首年贵，续费也可能长期溢价。</li></ul><hr><h2 id="十、为什么要分层治理？"><a href="#十、为什么要分层治理？" class="headerlink" title="十、为什么要分层治理？"></a>十、为什么要分层治理？</h2><p>有人疑惑：注册局和注册商是不是“白赚”？其实不然。</p><ul><li>注册局负责顶级域数据库、根&#x2F;权威运维、安全合规，收取批发费。</li><li>注册商面向用户，提供控制台、账户体系、隐私服务、解析面板。</li><li>分层设计保证了互联网的规模化和稳定性。</li></ul><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><strong>DNS 是全球分布式系统</strong>，通过递归查询找到权威答案。</li><li><strong>运营商</strong>通常只提供递归解析器，权威答案存放在权威 DNS。</li><li><strong>域名所有者</strong>通过注册商修改 DNS 记录，变更逐级传播。</li><li><strong>注册商</strong>是用户入口，<strong>注册局</strong>是顶级域数据库，二者分工明确。</li><li><strong>费用机制</strong>透明：批发价由注册局定，零售价由注册商定，不同注册商价格差异源于策略与市场。</li><li><strong>安全与稳定</strong>依赖去中心化架构、EPP 协议、分布式 NS 与全球缓存机制。</li></ul><p>域名解析不仅仅是一个“把名字变成 IP”的过程，而是一整套跨国、跨机构的分布式治理体系。理解这套机制，有助于我们更好地管理域名、保障业务稳定。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;个人提供问题和疑惑, 最终AI生成&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;域名是互联网的入口。我们日常访问网站时，输入的是 &lt;code&gt;example.com&lt;/code&gt; 这样的域名，而真</summary>
      
    
    
    
    
    <category term="域名" scheme="http://yoursite.com/tags/%E5%9F%9F%E5%90%8D/"/>
    
    <category term="域名注册商" scheme="http://yoursite.com/tags/%E5%9F%9F%E5%90%8D%E6%B3%A8%E5%86%8C%E5%95%86/"/>
    
    <category term="域名注册局" scheme="http://yoursite.com/tags/%E5%9F%9F%E5%90%8D%E6%B3%A8%E5%86%8C%E5%B1%80/"/>
    
  </entry>
  
  <entry>
    <title>用脚本+AI CLI半自动写代码：实践经验分享</title>
    <link href="http://yoursite.com/2025/09/02/20250902-yong-jiao-ben-ai-cli-ban-zi-dong-xie-dai-ma-shi-jian-jing-yan-fen-xiang/"/>
    <id>http://yoursite.com/2025/09/02/20250902-yong-jiao-ben-ai-cli-ban-zi-dong-xie-dai-ma-shi-jian-jing-yan-fen-xiang/</id>
    <published>2025-09-02T13:44:21.000Z</published>
    <updated>2025-10-15T04:58:27.197Z</updated>
    
    <content type="html"><![CDATA[<p>最近在折腾一个“半自动编程”项目，目标是让 AI 工具在一个相对可控的框架下持续编码，帮我实现一个个明确的开发任务。这里分享整个过程、思路和实践套路，算是一次探索性的工程笔记。</p><h2 id="为什么要搞半自动"><a href="#为什么要搞半自动" class="headerlink" title="为什么要搞半自动"></a>为什么要搞半自动</h2><p>市面上的 AI 编程工具越来越多，比如：Claude Code、Gemini CLI、QWEN CODE 以及其他支持 CLI 模式的 AI 工具。<br>它们都能帮我们提高开发效率，但如果只是一次次手动问问题，效率还是不够高。我的想法是：</p><ol><li>用脚本封装和调度这些 AI 工具；</li><li>利用 <code>tmux</code> 维持 AI CLI 的会话状态；</li><li>自动给 AI 下发任务、收集结果，让 AI 一直“干活”，直到任务完成。</li></ol><p>这就像有个“虚拟小弟”24小时帮你写代码，而你更多做架构和技术方案的管理。</p><hr><h2 id="总体套路"><a href="#总体套路" class="headerlink" title="总体套路"></a>总体套路</h2><p>我总结下来整个流程可以分成四步，每一步都强调<strong>人工 review</strong>，避免“AI乱写”导致项目失控。</p><h3 id="1-初始化项目：立规范、搭框架"><a href="#1-初始化项目：立规范、搭框架" class="headerlink" title="1. 初始化项目：立规范、搭框架"></a>1. 初始化项目：立规范、搭框架</h3><p>项目开始前先搞定<strong>规范和架构</strong>，这是整个半自动化的基础。</p><ul><li><p>新建 GitHub 仓库，初始化代码框架：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:Kingson4Wu/ts-playground.git</span><br></pre></td></tr></table></figure></li><li><p>参考已有项目文档，比如我用的 <a href="https://github.com/Kingson4Wu/cpp-linux-playground/blob/main/PROJECT.md">cpp-linux-playground</a>，根据 TypeScript 项目的需求，改写成自己的 <code>PROJECT.md</code>。</p></li><li><p>规划好：</p><ul><li>技术栈（语言、工具链、标准）</li><li>测试和任务验收标准</li><li>静态分析工具</li><li>项目目录结构</li><li>Git 提交规范</li></ul></li></ul><blockquote><p>小建议：把 <code>docs/</code> 改成更专门的目录名（比如 <code>specifications/</code>），避免混乱。</p></blockquote><p>这一阶段主要是人工定规则、搭骨架，AI可以辅助起草文档，但最终必须你拍板。</p><hr><h3 id="2-细化任务实现方案"><a href="#2-细化任务实现方案" class="headerlink" title="2. 细化任务实现方案"></a>2. 细化任务实现方案</h3><p>所有任务先出详细的实现和测试方案，放在 <code>@specifications/task_specs/</code> 下。<br>原则：</p><ul><li><p><strong>不直接写代码</strong>，先写详细设计；</p></li><li><p>每个任务的设计经过人工审查和修改；</p></li><li><p>任务设计文件需要明确：</p><ul><li>功能描述</li><li>实现逻辑</li><li>输入输出</li><li>单元测试方案</li><li>潜在问题或风险点</li></ul></li></ul><p>这样做的好处是：AI有明确的执行指南，写出的代码更可控，后续修改成本也低。</p><hr><h3 id="3-半自动化驱动编码"><a href="#3-半自动化驱动编码" class="headerlink" title="3. 半自动化驱动编码"></a>3. 半自动化驱动编码</h3><p>有了规范和任务设计，就可以开始半自动写代码了。<br>我的方案是：</p><ul><li><p>用 Python 脚本驱动 AI CLI 工具；</p></li><li><p>通过 <code>tmux</code> 维持 AI 会话，避免中断；</p></li><li><p>每个任务循环：</p><ol><li>给 AI 发实现方案；</li><li>要求它按方案写代码，但<strong>不要自动提交代码</strong>；</li><li>人工检查后再提交到 Git。</li></ol></li></ul><p>脚本和逻辑可以参考 <a href="https://github.com/Kingson4Wu/ForgeFlow">ForgeFlow</a>，里面有完整的交互逻辑示例。</p><blockquote><p>小技巧：</p><ul><li>每个 Prompt 末尾强调“不要自动提交代码”；</li><li>如果任务超时超过1小时，自动触发检查机制；</li><li>项目进度同步到 <code>TODO.md</code>，并在 <code>PROJECT.md</code> 中引用。</li></ul></blockquote><hr><h3 id="4-定义“完成”的标准"><a href="#4-定义“完成”的标准" class="headerlink" title="4. 定义“完成”的标准"></a>4. 定义“完成”的标准</h3><p>一个任务完成的定义：</p><ol><li>按实现方案完成代码；</li><li>单元测试全部通过；</li><li>脚本和 Prompt 更新到位；</li><li>构建和测试无异常；</li><li>Git 提交所有改动；</li><li>进入下一个任务。</li></ol><p>最终目标是：</p><blockquote><p>输出所有方案 -&gt; 自动实现 -&gt; 所有项目任务完成后，AI只返回“完成”两个字。</p></blockquote><hr><h2 id="实战项目参考"><a href="#实战项目参考" class="headerlink" title="实战项目参考"></a>实战项目参考</h2><p>示例项目：<a href="https://github.com/Kingson4Wu/ts-playground">ts-playground</a><br>这是我搭的一个 TypeScript 学习和实验环境：</p><ul><li>CI&#x2F;CD 流程完整；</li><li>用于系统掌握 TypeScript 类型系统；</li><li>可以复用于后端服务、CLI 工具开发。</li></ul><p>这个项目就是通过“人机协作+半自动化”方式落地的。</p><hr><h2 id="半自动-vs-全自动"><a href="#半自动-vs-全自动" class="headerlink" title="半自动 vs 全自动"></a>半自动 vs 全自动</h2><p>目前这种方案是“半自动”，而不是“全自动”。原因：</p><ul><li><strong>设计和规范必须人工介入</strong>：AI生成的规范往往不够完善；</li><li><strong>脚本和Prompt需要不断打磨</strong>：无法覆盖所有场景；</li><li><strong>代码质量还需人工检查</strong>：AI的水平不总是稳定。</li></ul><p>换句话说，这是一个低成本、可控、复用性强的探索阶段方案。<br>全自动化？有点远，尤其是多Agent复杂度太高，难以管理上下文和控制风险。</p><hr><h2 id="上下文管理的核心"><a href="#上下文管理的核心" class="headerlink" title="上下文管理的核心"></a>上下文管理的核心</h2><p>要想让AI持续有效地工作，项目上下文必须有序管理：</p><ol><li>规范文件分类清晰，按模块分目录；</li><li>方案文档结构化，方便AI快速索引；</li><li>自动化脚本根据任务调度上下文，让AI“看得懂项目”。</li></ol><p>这才是真正的“AI编程助手”关键所在。</p><hr><h2 id="一点哲学思考"><a href="#一点哲学思考" class="headerlink" title="一点哲学思考"></a>一点哲学思考</h2><p>这套方案的本质是把开发人员角色分层：</p><ul><li>AI是“码农+助理”，帮你实现具体功能；</li><li>你是“开发经理”，负责设计、审查、控制质量；</li><li>团队协作依旧重要，人类仍然是决策核心。</li></ul><p>AI工具不是真正的替代，而是推动开发人员往更高的抽象层次发展。<br>从这个角度看，AI是个强大的加速器，而不是终点。</p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>整个实践路线：</p><ol><li>项目初始化，搭规范和骨架；</li><li>细化任务方案，人工Review；</li><li>用脚本驱动AI半自动写代码；</li><li>明确完成标准，逐步推进。</li></ol><p>这是目前我能找到的最可控、最实用的“AI编程”方式。<br>它既降低了成本，又不至于乱套，非常适合小团队或者个人工程师快速起项目。</p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><ul><li>细化任务方案，可以参考<a href="https://github.com/github/spec-kit%E7%9A%84%E5%A5%97%E8%B7%AF">https://github.com/github/spec-kit的套路</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近在折腾一个“半自动编程”项目，目标是让 AI 工具在一个相对可控的框架下持续编码，帮我实现一个个明确的开发任务。这里分享整个过程、思路和实践套路，算是一次探索性的工程笔记。&lt;/p&gt;
&lt;h2 id=&quot;为什么要搞半自动&quot;&gt;&lt;a href=&quot;#为什么要搞半自动&quot; class=</summary>
      
    
    
    
    
    <category term="tmux" scheme="http://yoursite.com/tags/tmux/"/>
    
    <category term="AI编程" scheme="http://yoursite.com/tags/AI%E7%BC%96%E7%A8%8B/"/>
    
    <category term="自动化开发" scheme="http://yoursite.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%BC%80%E5%8F%91/"/>
    
    <category term="Prompt工程" scheme="http://yoursite.com/tags/Prompt%E5%B7%A5%E7%A8%8B/"/>
    
    <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>用 tmux + 内网穿透，让出门也能指导编程任务</title>
    <link href="http://yoursite.com/2025/08/28/20250828-yong-tmux-nei-wang-chuan-tou-rang-chu-men-ye-neng-zhi-dao-bian-cheng-ren-wu/"/>
    <id>http://yoursite.com/2025/08/28/20250828-yong-tmux-nei-wang-chuan-tou-rang-chu-men-ye-neng-zhi-dao-bian-cheng-ren-wu/</id>
    <published>2025-08-28T09:56:54.000Z</published>
    <updated>2025-08-28T10:00:44.765Z</updated>
    
    <content type="html"><![CDATA[<p>以前写代码是个挺“重”的事情：开一堆 IDE、文档、调试窗口，在桌面环境里来回切换。要是人在外面，就算能远程登录，也常常因为手机输入不方便、网络不稳定而放弃。</p><p>但现在情况不一样了。很多时候，你并不需要全套开发环境。只要能接上家里的机器，就能让零碎时间发挥点价值：不管是写点脚手架代码，跑几个命令，还是做些前期准备工作，都可以在外面先处理掉。等回到电脑前，再做深度开发和调试，就顺畅很多。</p><h2 id="实际效果"><a href="#实际效果" class="headerlink" title="实际效果"></a>实际效果</h2><p><img src="/2025/08/28/20250828-yong-tmux-nei-wang-chuan-tou-rang-chu-men-ye-neng-zhi-dao-bian-cheng-ren-wu/Chrome_Remote_Desktop.PNG"></p><p><img src="/2025/08/28/20250828-yong-tmux-nei-wang-chuan-tou-rang-chu-men-ye-neng-zhi-dao-bian-cheng-ren-wu/tmux.PNG"></p><hr><h2 id="思路很简单"><a href="#思路很简单" class="headerlink" title="思路很简单"></a>思路很简单</h2><p>其实只要搞定两件事，就能让“人在外面也能继续编程”变得靠谱：</p><h3 id="1-远程连上家里的环境"><a href="#1-远程连上家里的环境" class="headerlink" title="1. 远程连上家里的环境"></a>1. 远程连上家里的环境</h3><p>最简单的方式是用 <strong>Chrome Remote Desktop</strong> 直接把桌面搬到手机上。<br>但如果你更喜欢命令行的简洁，可以在 Mac 上开好 <strong>SSH + tmux</strong>，再配合 <strong>内网穿透工具</strong>（比如 Cloudflare Tunnel、frp、zerotier），这样就能在手机终端里直连家里的 tmux 会话。</p><h3 id="2-保持会话不中断"><a href="#2-保持会话不中断" class="headerlink" title="2. 保持会话不中断"></a>2. 保持会话不中断</h3><p>这里的关键是 <code>tmux</code>：</p><ul><li>它能把会话挂在后台，不会因为你断开 SSH 就消失。</li><li>下次连上去，只要 <code>tmux attach</code> 就能回到之前的窗口，继续干活，丝毫不影响节奏。</li></ul><hr><h2 id="这种方式的好处"><a href="#这种方式的好处" class="headerlink" title="这种方式的好处"></a>这种方式的好处</h2><ul><li><strong>轻量</strong>：不用开完整远程桌面，命令行就够了。</li><li><strong>连续性强</strong>：断线没关系，tmux 会帮你“记住现场”。</li><li><strong>利用碎片时间</strong>：比如地铁上、咖啡店里，掏出手机就能跑些小任务。</li></ul><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>tmux + 内网穿透，说白了就是给自己搭了条随时可用的远程工作通道。<br>出门在外，你可以用手机连上去，把一些零碎的准备工作先做掉；回到家，再用大屏幕和 IDE 把任务完善。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;以前写代码是个挺“重”的事情：开一堆 IDE、文档、调试窗口，在桌面环境里来回切换。要是人在外面，就算能远程登录，也常常因为手机输入不方便、网络不稳定而放弃。&lt;/p&gt;
&lt;p&gt;但现在情况不一样了。很多时候，你并不需要全套开发环境。只要能接上家里的机器，就能让零碎时间发挥点价值</summary>
      
    
    
    
    
    <category term="tmux" scheme="http://yoursite.com/tags/tmux/"/>
    
    <category term="内网穿透" scheme="http://yoursite.com/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    
    <category term="AI编程" scheme="http://yoursite.com/tags/AI%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Chrome Remote Desktop" scheme="http://yoursite.com/tags/Chrome-Remote-Desktop/"/>
    
  </entry>
  
  <entry>
    <title>VS Code + Dev Container：打造丝滑的 Linux 开发调试体验</title>
    <link href="http://yoursite.com/2025/08/25/20250825-vs-code-dev-container-da-zao-si-hua-de-linux-kai-fa-diao-shi-ti-yan/"/>
    <id>http://yoursite.com/2025/08/25/20250825-vs-code-dev-container-da-zao-si-hua-de-linux-kai-fa-diao-shi-ti-yan/</id>
    <published>2025-08-25T07:12:09.000Z</published>
    <updated>2025-09-02T09:43:44.967Z</updated>
    
    <content type="html"><![CDATA[<p>最近在重新学习 Linux C++ 的过程中，发现了一种优雅的方式：借助 <strong>Docker + VS Code Dev Container</strong> 在任何系统上轻松获得一致的 Linux 开发调试环境。作为长期在 macOS 和 Windows 上开发的人，这种体验让我感受到前所未有的丝滑，真有点“相逢恨晚”。</p><p>从此，无论是 C++、Python、Go，还是其他需要 Linux 环境的项目，都可以通过 Dev Container 轻松构建一致的开发调试环境。以下是相关的整理和总结。</p><hr><h2 id="1-Dev-Container-的核心优势"><a href="#1-Dev-Container-的核心优势" class="headerlink" title="1. Dev Container 的核心优势"></a>1. Dev Container 的核心优势</h2><ul><li><strong>统一环境</strong>：项目环境配置集中管理，避免“环境配置地狱”。</li><li><strong>真实 Linux 环境</strong>：Mac&#x2F;Windows 上可获得接近原生 Linux 的开发体验。</li><li><strong>环境隔离</strong>：每个项目独立运行，避免宿主机污染。</li><li><strong>一键上手</strong>：新人无需安装复杂依赖，直接启动容器即用。</li><li><strong>跨平台一致性</strong>：团队成员无论使用何种操作系统，都能保持开发环境完全一致。</li></ul><hr><h2 id="2-调试工作原理"><a href="#2-调试工作原理" class="headerlink" title="2. 调试工作原理"></a>2. 调试工作原理</h2><ul><li><strong>VS Code 前端</strong>：仅负责界面展示和用户交互。</li><li><strong>容器内调试器后端</strong>：断点、变量跟踪等逻辑均在容器中执行。</li><li><strong>Docker 通信</strong>：通过端口映射或内置通道实现容器与宿主机的连接。</li><li><strong>DAP 协议</strong>：调试适配器协议（Debug Adapter Protocol）统一了调试接口，支持多语言插件。</li><li><strong>无缝体验</strong>：Dev Container 自动部署 VS Code Server，调试如同本地运行。</li></ul><hr><h2 id="3-跨架构开发（Mac-ARM-跑-x86-容器）"><a href="#3-跨架构开发（Mac-ARM-跑-x86-容器）" class="headerlink" title="3. 跨架构开发（Mac ARM 跑 x86 容器）"></a>3. 跨架构开发（Mac ARM 跑 x86 容器）</h2><ul><li><strong>QEMU 仿真</strong>：通过指令翻译运行 x86 ELF 程序。</li><li><strong>binfmt_misc</strong>：自动识别并调度不同架构的可执行文件。</li><li><strong>优势</strong>：可兼容仅支持 x86 的旧软件或镜像。</li><li><strong>不足</strong>：性能有损耗，不适合重度计算任务或长期运行。</li></ul><hr><h2 id="4-微服务项目的容器化策略"><a href="#4-微服务项目的容器化策略" class="headerlink" title="4. 微服务项目的容器化策略"></a>4. 微服务项目的容器化策略</h2><ol><li><p><strong>共享开发环境容器</strong><br>单一容器作为开发机，挂载多个项目，减少容器启动和切换成本。</p></li><li><p><strong>多服务合一容器</strong><br>借助 <code>supervisord</code> 管理多个进程，将多个微服务打包到同一个容器中运行。</p></li><li><p><strong>docker-compose 管理公共依赖</strong><br>数据库、缓存等共享服务通过 <code>docker-compose</code> 集中管理，避免重复维护。</p></li><li><p><strong>多项目 Dev Container 配置</strong></p><ul><li>利用 <code>workspaceMount</code> 挂载多个项目目录；</li><li><code>.devcontainer/</code> 建议放在仓库或 monorepo 顶层，便于团队协作。</li></ul></li></ol><h4 id="方法1-vs-方法4-对比表"><a href="#方法1-vs-方法4-对比表" class="headerlink" title="方法1 vs 方法4 对比表"></a>方法1 vs 方法4 对比表</h4><table><thead><tr><th>特性</th><th>方法1：单容器开发机</th><th>方法4：多项目 Dev Container</th></tr></thead><tbody><tr><td>容器构建</td><td>手动构建镜像</td><td>自动构建</td></tr><tr><td>配置文件位置</td><td>可选，不依赖 <code>.devcontainer</code></td><td>必须在仓库最外层目录</td></tr><tr><td>多项目管理</td><td>手动挂载路径</td><td>自动 <code>workspaceMount</code></td></tr><tr><td>团队协作</td><td>偏向个人开发</td><td>团队友好</td></tr><tr><td>启动方式</td><td>手动 Attach</td><td>一键 <code>Reopen in Container</code></td></tr></tbody></table><blockquote><p>对于大型项目或多团队协作，可以考虑 Kubernetes 或云端 Codespaces 来简化开发环境管理。</p></blockquote><hr><h2 id="5-总结与趋势"><a href="#5-总结与趋势" class="headerlink" title="5. 总结与趋势"></a>5. 总结与趋势</h2><ul><li><strong>容器化开发环境已成趋势</strong>：开发环境可以像代码一样被版本化、迁移、复刻。</li><li><strong>适用场景广泛</strong>：不仅适合现代项目，对老旧技术栈（如 PHP 项目）同样友好。</li><li><strong>开发体验升级</strong>：只需一次配置，团队成员无需手动搭建环境，即可专注业务开发。</li></ul><hr><p>这样一套方案，让跨平台、跨语言、跨架构的开发调试都像在本地一样丝滑高效。</p><hr><h2 id="参考例子"><a href="#参考例子" class="headerlink" title="参考例子"></a>参考例子</h2><ul><li><a href="https://github.com/Kingson4Wu/cpp-linux-playground">https://github.com/Kingson4Wu/cpp-linux-playground</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近在重新学习 Linux C++ 的过程中，发现了一种优雅的方式：借助 &lt;strong&gt;Docker + VS Code Dev Container&lt;/strong&gt; 在任何系统上轻松获得一致的 Linux 开发调试环境。作为长期在 macOS 和 Windows 上开发</summary>
      
    
    
    
    
    <category term="vscode" scheme="http://yoursite.com/tags/vscode/"/>
    
    <category term="DevContainer" scheme="http://yoursite.com/tags/DevContainer/"/>
    
    <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
    <category term="CPP" scheme="http://yoursite.com/tags/CPP/"/>
    
  </entry>
  
  <entry>
    <title>家庭宽带中的公网与内网 IP 分配机制解析</title>
    <link href="http://yoursite.com/2025/08/17/20250817-jia-ting-kuan-dai-zhong-de-gong-wang-yu-nei-wang-ip-fen-pei-ji-zhi-jie-xi/"/>
    <id>http://yoursite.com/2025/08/17/20250817-jia-ting-kuan-dai-zhong-de-gong-wang-yu-nei-wang-ip-fen-pei-ji-zhi-jie-xi/</id>
    <published>2025-08-17T05:10:04.000Z</published>
    <updated>2025-08-17T05:11:11.489Z</updated>
    
    <content type="html"><![CDATA[<blockquote><blockquote><p>以下内容由AI生成</p></blockquote></blockquote><p>在日常使用家庭宽带时，很多人会遇到“到底我家有没有独立公网 IP”的问题。这不仅关系到能否顺利访问外网，更影响到是否可以在家中搭建服务器、使用 P2P 应用等。本文将系统梳理家庭宽带 IP 的分配方式、运营商 NAT 的机制以及其对用户的实际影响。</p><hr><h2 id="1-家庭宽带的几种典型-IP-分配方式"><a href="#1-家庭宽带的几种典型-IP-分配方式" class="headerlink" title="1. 家庭宽带的几种典型 IP 分配方式"></a>1. 家庭宽带的几种典型 IP 分配方式</h2><h3 id="（1）独立公网-IP"><a href="#（1）独立公网-IP" class="headerlink" title="（1）独立公网 IP"></a>（1）独立公网 IP</h3><ul><li>家庭路由器的 <strong>WAN 口直接获取公网 IPv4 地址</strong>（或独立 IPv6 前缀）。</li><li>此时家庭就是一个独立的外网节点，可直接与互联网通信（除非被防火墙限制）。</li><li><strong>典型场景</strong>：早期 ADSL 宽带、当前部分电信&#x2F;联通&#x2F;移动的 IPv6 分配。</li></ul><p><strong>优势</strong>：可开放端口、搭建服务器，外网可直接访问家庭设备。</p><hr><h3 id="（2）共享公网-IP（运营商-NAT-x2F-CGNAT）"><a href="#（2）共享公网-IP（运营商-NAT-x2F-CGNAT）" class="headerlink" title="（2）共享公网 IP（运营商 NAT &#x2F; CGNAT）"></a>（2）共享公网 IP（运营商 NAT &#x2F; CGNAT）</h3><ul><li><p>由于 IPv4 地址紧张，很多家庭宽带 WAN 口拿到的并不是公网地址，而是内网地址：</p><ul><li><code>100.64.x.x</code>（CGNAT 专用）、<code>10.x.x.x</code>、<code>172.16–31.x.x</code>、<code>192.168.x.x</code> 等。</li></ul></li><li><p>运营商在核心网部署 NAT，把成百上千家庭流量映射到同一个公网 IP 上。</p></li></ul><p><strong>特点与问题</strong>：</p><ul><li>家庭没有独立公网出口，而是和他人“拼”一个公网 IP。</li><li><strong>限制</strong>：端口映射困难甚至不可能 → 无法轻易搭建对外服务。</li></ul><hr><h3 id="（3）混合模式（IPv6-公网-IPv4-NAT）"><a href="#（3）混合模式（IPv6-公网-IPv4-NAT）" class="headerlink" title="（3）混合模式（IPv6 公网 + IPv4 NAT）"></a>（3）混合模式（IPv6 公网 + IPv4 NAT）</h3><ul><li>家庭可获得独立的 <strong>IPv6 前缀</strong>（相当于独立公网地址）。</li><li>IPv4 依旧通过 NAT，共享公网 IP。</li><li>这种情况在目前逐渐普及，算是“半独立外网”。</li></ul><hr><h2 id="2-内网与外网的关系"><a href="#2-内网与外网的关系" class="headerlink" title="2. 内网与外网的关系"></a>2. 内网与外网的关系</h2><ul><li><strong>LAN 内网 IP</strong>：路由器分配给家庭设备的地址（如 192.168.x.x），可支持上百台设备。</li><li><strong>WAN IP</strong>：路由器外网口的地址，可能是真公网，也可能是运营商 NAT 内网（如 100.64.x.x）。</li></ul><p><strong>关键点</strong>：</p><ul><li><p>家庭可分配的内网 IP 数量不受共享公网限制，理论上仍可支持数百设备。</p></li><li><p>共享公网真正的限制在于：</p><ul><li>端口映射受阻</li><li>P2P 软件连接困难</li><li>搭建家庭服务器几乎不可能</li></ul></li></ul><hr><h2 id="3-CGNAT-的工作机制"><a href="#3-CGNAT-的工作机制" class="headerlink" title="3. CGNAT 的工作机制"></a>3. CGNAT 的工作机制</h2><p>CGNAT 的核心是 <strong>端口映射表</strong>。</p><ol><li>家庭路由器将内网设备请求 NAT 成 <strong>WAN IP + 端口</strong>。</li><li>运营商 CGNAT 再将 WAN IP + 端口转换为 <strong>公网 IP + 唯一端口</strong>。</li><li>返回数据时，CGNAT 通过映射表查找，精准把数据包发回正确的家庭。</li></ol><p><strong>要点</strong>：</p><ul><li>即使不同家庭设备端口相同，CGNAT 会分配不同的公网端口 → 不会冲突。</li><li>每个家庭必须有唯一的 WAN IP（即便是私有地址），否则映射表无法区分连接。</li></ul><hr><h2 id="4-特殊地址段：100-64-x-x"><a href="#4-特殊地址段：100-64-x-x" class="headerlink" title="4. 特殊地址段：100.64.x.x"></a>4. 特殊地址段：100.64.x.x</h2><ul><li><p><strong>定义</strong>：RFC 6598 规定 <code>100.64.0.0/10</code> 专用于 <strong>运营商级 NAT</strong>。</p></li><li><p><strong>特性</strong>：</p><ul><li>不是公网 IP（外网无法直达）。</li><li>不是家庭 LAN 内网（192.168&#x2F;10.x&#x2F;172.16–31），而是运营商内部“二级内网”。</li></ul></li><li><p><strong>工作方式</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">家庭设备 192.168.1.2</span><br><span class="line">    ↓ 家庭路由器 NAT</span><br><span class="line">WAN: 100.64.1.2  ← 运营商私有地址</span><br><span class="line">    ↓ 运营商 CGNAT</span><br><span class="line">公网 IP: 1.2.3.4</span><br><span class="line">    ↓ Internet</span><br></pre></td></tr></table></figure></li></ul><p><strong>注意</strong>：家庭网络不应使用 100.64.x.x 作为 LAN 地址，否则会和运营商 CGNAT 冲突，导致公网无法访问。</p><hr><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><ol><li><strong>独立公网 IP</strong>：可直接对外通信，最自由。</li><li><strong>共享公网 IP（CGNAT）</strong>：常见于 IPv4，无法轻易开放端口，但家庭内网不受影响。</li><li><strong>IPv6 普及下的混合模式</strong>：IPv6 独立公网，IPv4 仍共享。</li><li><strong>100.64.x.x 是运营商内网地址</strong>，不是公网 IP。</li><li><strong>核心差异</strong>：家庭内网数量不受限制，但共享公网时外网访问受阻。</li></ol><hr><p>📌 <strong>一句话总结</strong>：<br>大多数家庭宽带并没有独立公网 IPv4，而是通过 CGNAT 与他人共享出口。要想获得真正独立的公网地址，需要向运营商申请“公网 IP 服务”或使用企业宽带。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;以下内容由AI生成&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;在日常使用家庭宽带时，很多人会遇到“到底我家有没有独立公网 IP”的问题。这不仅关系到能否顺利访问外网，更影响到是否可以在家中搭建服</summary>
      
    
    
    
    
    <category term="家庭网络" scheme="http://yoursite.com/tags/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C/"/>
    
    <category term="公网IP" scheme="http://yoursite.com/tags/%E5%85%AC%E7%BD%91IP/"/>
    
  </entry>
  
  <entry>
    <title>VPN 与正向代理的原理与差异分析</title>
    <link href="http://yoursite.com/2025/08/17/20250817-vpn-yu-zheng-xiang-dai-li-de-yuan-li-yu-chai-yi-fen-xi/"/>
    <id>http://yoursite.com/2025/08/17/20250817-vpn-yu-zheng-xiang-dai-li-de-yuan-li-yu-chai-yi-fen-xi/</id>
    <published>2025-08-17T04:59:59.000Z</published>
    <updated>2025-08-17T05:12:17.215Z</updated>
    
    <content type="html"><![CDATA[<blockquote><blockquote><p>以下内容由AI生成，本人审阅</p></blockquote></blockquote><h2 id="一、VPN-的基本原理"><a href="#一、VPN-的基本原理" class="headerlink" title="一、VPN 的基本原理"></a>一、VPN 的基本原理</h2><p>**VPN（Virtual Private Network，虚拟专用网络）**的核心思想是在 <strong>公网上（Internet）</strong> 建立一条 <strong>加密隧道</strong>，使用户的数据能够像在同一局域网中一样安全传输。其关键机制包括：</p><ol><li><p><strong>隧道封装（Tunneling）</strong></p><ul><li>将原始 IP 包或 TCP&#x2F;UDP 流量再次封装后发送至 VPN 服务器。</li><li>VPN 服务器解封装后再转发至目标网站或服务。</li><li>常见协议包括 PPTP、L2TP、IPSec、OpenVPN（基于 TLS&#x2F;SSL）、WireGuard 等。</li></ul></li><li><p><strong>数据加密（Encryption）</strong></p><ul><li>VPN 的核心能力之一就是加密，例如 AES、ChaCha20。</li><li>运营商或中间路由器看到的只是加密数据流，而无法识别内容。</li></ul></li><li><p><strong>虚拟网卡（Virtual NIC）</strong></p><ul><li>客户端安装 VPN 时会创建虚拟网卡。</li><li>系统将原始流量交给虚拟网卡，由 VPN 客户端进行加密与封装，再传输至服务器。</li></ul></li></ol><hr><h2 id="二、正向代理的基本原理"><a href="#二、正向代理的基本原理" class="headerlink" title="二、正向代理的基本原理"></a>二、正向代理的基本原理</h2><p><strong>正向代理（Forward Proxy）</strong> 是一种由客户端主动指定的代理模式：</p><ul><li>客户端 → <strong>代理服务器</strong> → 目标网站</li><li>代理服务器替代客户端访问网站。</li></ul><p>常见类型包括：</p><ul><li><strong>HTTP Proxy</strong>：仅代理网页流量。</li><li><strong>SOCKS5 Proxy</strong>：支持 TCP&#x2F;UDP，更通用。</li></ul><p>👉 如果在正向代理的基础上增加加密，就得到 <strong>加密正向代理</strong>，例如：</p><ul><li><strong>Shadowsocks</strong>（基于 SOCKS5 + 加密）</li><li><strong>V2Ray、Trojan</strong>（自定义协议 + 加密）</li></ul><hr><h2 id="三、VPN-与正向代理的关系"><a href="#三、VPN-与正向代理的关系" class="headerlink" title="三、VPN 与正向代理的关系"></a>三、VPN 与正向代理的关系</h2><ol><li><p><strong>共性</strong></p><ul><li>都是正向代理的广义形式，用户请求最终都由中间服务器转发。</li><li>都可以实现数据加密、突破访问限制、保护隐私。</li></ul></li><li><p><strong>差异</strong></p><ul><li><strong>VPN</strong>：工作在 <strong>网络层</strong>，接管整个系统的所有流量，不需要应用单独配置。</li><li><strong>加密代理（Shadowsocks&#x2F;V2Ray&#x2F;Trojan 等）</strong>：工作在 <strong>传输层&#x2F;应用层</strong>，更灵活，可以选择性分流。</li></ul></li></ol><p>✅ 准确的表述是：</p><blockquote><p><strong>VPN 是一种在网络层实现的“全流量加密隧道代理”；而机场协议（如 Shadowsocks&#x2F;V2Ray&#x2F;Trojan）是工作在传输层或应用层的“加密正向代理”。</strong></p></blockquote><hr><h2 id="四、为什么“机场代理”常被叫做-VPN"><a href="#四、为什么“机场代理”常被叫做-VPN" class="headerlink" title="四、为什么“机场代理”常被叫做 VPN"></a>四、为什么“机场代理”常被叫做 VPN</h2><ul><li>手机或电脑端的 Shadowsocks&#x2F;V2Ray 客户端通常会申请系统的 <strong>VPN 权限（VPNService）</strong>，创建虚拟网卡，将流量导入代理。</li><li>在用户体验上，表现为“一键开启，所有流量都出国”，与 VPN 相似。</li><li>但协议层面，它们并非传统 VPN，而是 <strong>加密正向代理 + VPN 伪装</strong> 的结合体。</li></ul><hr><h2 id="五、效果、效率与使用体验差异"><a href="#五、效果、效率与使用体验差异" class="headerlink" title="五、效果、效率与使用体验差异"></a>五、效果、效率与使用体验差异</h2><h3 id="1-效果层面"><a href="#1-效果层面" class="headerlink" title="1. 效果层面"></a>1. 效果层面</h3><ul><li><strong>VPN</strong>：全流量隧道，统一加密转发。</li><li><strong>机场代理</strong>：通过加密代理转发流量，用户体验上几乎无差别。</li></ul><h3 id="2-效率与性能"><a href="#2-效率与性能" class="headerlink" title="2. 效率与性能"></a>2. 效率与性能</h3><ul><li><strong>VPN</strong>：底层封装，效率较高（WireGuard 延迟小、速度快）。</li><li><strong>代理</strong>：协议转换可能增加开销，但现代实现已高度优化。</li></ul><h3 id="3-使用体验"><a href="#3-使用体验" class="headerlink" title="3. 使用体验"></a>3. 使用体验</h3><ul><li><strong>VPN</strong>：系统级全局接管，适合企业远程办公、统一管控。</li><li><strong>机场代理</strong>：支持灵活分流（国际流量走代理、国内直连），更适合个人日常使用。</li></ul><hr><h2 id="六、典型场景对比"><a href="#六、典型场景对比" class="headerlink" title="六、典型场景对比"></a>六、典型场景对比</h2><ol><li><p><strong>公司 VPN</strong></p><ul><li>常见模式是 <strong>全隧道（Full Tunnel）</strong>，所有流量经由公司出口，安全统一但效率偏低。</li><li>有些公司支持 <strong>分隧道（Split Tunnel）</strong>，仅内网走 VPN，外网直连，但安全性存在隐患。</li></ul></li><li><p><strong>机场代理</strong></p><ul><li>可选择 <strong>全局代理</strong>，模拟 VPN 效果。</li><li>或使用 <strong>规则分流</strong>（PAC 模式），国际流量走代理，国内直连，更高效。</li></ul></li></ol><hr><h2 id="七、总结"><a href="#七、总结" class="headerlink" title="七、总结"></a>七、总结</h2><ul><li><strong>VPN</strong>：本质是 <strong>网络层的加密隧道代理</strong>，接管系统所有流量。</li><li><strong>机场协议（Shadowsocks、V2Ray、Trojan）</strong>：本质是 <strong>传输层&#x2F;应用层的加密正向代理</strong>，通过虚拟网卡实现“伪装成 VPN”的体验。</li><li><strong>共同点</strong>：都加密、都代理、都能突破限制。</li><li><strong>差异点</strong>：VPN 更底层、统一接管；机场代理更灵活、支持分流。</li></ul><p>👉 一句话概括：<br><strong>VPN 与机场协议都是“加密正向代理”，区别只在于工作层级和使用方式。</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;以下内容由AI生成，本人审阅&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一、VPN-的基本原理&quot;&gt;&lt;a href=&quot;#一、VPN-的基本原理&quot; class=&quot;headerlink&quot; t</summary>
      
    
    
    
    
    <category term="正向代理" scheme="http://yoursite.com/tags/%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86/"/>
    
    <category term="VPN" scheme="http://yoursite.com/tags/VPN/"/>
    
  </entry>
  
  <entry>
    <title>深入理解 SOCKS5 正向代理原理</title>
    <link href="http://yoursite.com/2025/08/17/20250817-shen-ru-li-jie-socks5-zheng-xiang-dai-li-yuan-li/"/>
    <id>http://yoursite.com/2025/08/17/20250817-shen-ru-li-jie-socks5-zheng-xiang-dai-li-yuan-li/</id>
    <published>2025-08-17T04:54:40.000Z</published>
    <updated>2025-08-17T04:55:51.683Z</updated>
    
    <content type="html"><![CDATA[<blockquote><blockquote><p>以下内容由AI生成，本人审阅</p></blockquote></blockquote><p>在网络代理领域，<strong>SOCKS5</strong> 是一种常用的正向代理协议。它不同于传统的 HTTP 代理，能够为各种应用层协议提供通用的转发支持。本文将从概念、协议机制、工作流程和应用场景几个层次，系统梳理 SOCKS5 的技术原理。</p><hr><h2 id="1-正向代理的基本概念"><a href="#1-正向代理的基本概念" class="headerlink" title="1. 正向代理的基本概念"></a>1. 正向代理的基本概念</h2><p><strong>正向代理</strong>是指客户端主动使用代理服务器，把请求先发给代理，再由代理去访问目标服务器，并把结果返回客户端。</p><p><strong>主要作用</strong>：</p><ul><li>隐藏客户端真实 IP</li><li>绕过访问限制（如内网封锁、跨境访问）</li><li>统一出口流量，便于管理和审计</li></ul><hr><h2 id="2-SOCKS-协议简介"><a href="#2-SOCKS-协议简介" class="headerlink" title="2. SOCKS 协议简介"></a>2. SOCKS 协议简介</h2><p><strong>SOCKS (Socket Secure)</strong> 是一种通用的代理协议，不依赖特定的应用层协议。</p><ul><li><p><strong>SOCKS5</strong> 是该协议的第 5 版，支持更多功能：</p><ul><li>TCP 与 UDP 转发</li><li>用户认证（无认证、用户名&#x2F;密码等）</li><li>IPv4 &#x2F; IPv6 &#x2F; 域名解析</li></ul></li></ul><p>👉 与 HTTP 代理相比，SOCKS5 并不解析上层应用协议，只做数据字节的透明转发，因此适用范围更广。</p><hr><h2 id="3-SOCKS5-的工作流程"><a href="#3-SOCKS5-的工作流程" class="headerlink" title="3. SOCKS5 的工作流程"></a>3. SOCKS5 的工作流程</h2><p>假设客户端配置了一个 SOCKS5 代理，整个交互过程如下：</p><h3 id="1）客户端与代理握手"><a href="#1）客户端与代理握手" class="headerlink" title="1）客户端与代理握手"></a>1）客户端与代理握手</h3><ul><li>客户端告知代理：“我支持哪些认证方式（无认证 &#x2F; 用户名密码 &#x2F; …）”</li><li>代理回应：“我要求用某种认证方式”</li><li>若需认证，客户端提交凭证，通过后进入下一阶段</li></ul><h3 id="2）客户端请求目标地址"><a href="#2）客户端请求目标地址" class="headerlink" title="2）客户端请求目标地址"></a>2）客户端请求目标地址</h3><ul><li>客户端通过代理的 TCP 连接，发送目标地址和端口，例如：<code>example.com:80</code></li><li>代理尝试与目标服务器建立连接</li></ul><h3 id="3）代理回应结果"><a href="#3）代理回应结果" class="headerlink" title="3）代理回应结果"></a>3）代理回应结果</h3><ul><li>连接成功：返回成功报文，允许数据传输</li><li>连接失败：返回错误码（如目标不可达、连接被拒绝等）</li></ul><h3 id="4）数据转发"><a href="#4）数据转发" class="headerlink" title="4）数据转发"></a>4）数据转发</h3><ul><li>客户端与目标服务器的所有数据均通过代理中转</li><li>代理只做字节转发，不理解应用层协议内容</li><li>这使得 SOCKS5 成为一种非常通用的代理机制</li></ul><hr><h2 id="4-TCP-与-UDP-的支持"><a href="#4-TCP-与-UDP-的支持" class="headerlink" title="4. TCP 与 UDP 的支持"></a>4. TCP 与 UDP 的支持</h2><p>SOCKS5 协议既能代理 <strong>TCP</strong>，也能代理 <strong>UDP</strong>：</p><ul><li><p><strong>TCP CONNECT</strong></p><ul><li>客户端请求代理建立到目标服务器的 TCP 连接</li><li>数据传输过程中，代理双向转发 TCP 流量</li><li>应用场景：网页浏览、SSH、邮件收发等</li></ul></li><li><p><strong>UDP ASSOCIATE</strong></p><ul><li>客户端先通过 TCP 控制通道告诉代理要进行 UDP 转发</li><li>代理返回一个专用的 UDP 端口</li><li>客户端将 UDP 数据包（带 SOCKS5 UDP 头）发送到该端口，代理再转发到目标服务器</li><li>应用场景：DNS 查询、在线游戏、视频流</li></ul></li></ul><hr><h2 id="5-TCP-与-UDP-的关系"><a href="#5-TCP-与-UDP-的关系" class="headerlink" title="5. TCP 与 UDP 的关系"></a>5. TCP 与 UDP 的关系</h2><p>需要特别注意：</p><ol><li><p><strong>控制信道：必然是 TCP</strong></p><ul><li>无论最终转发 TCP 还是 UDP，客户端和代理之间都要先建立一条 TCP 连接</li><li>握手、认证、UDP 转发上下文都依赖该 TCP 控制信道</li></ul></li><li><p><strong>数据通道：因请求而异</strong></p><ul><li><strong>CONNECT 命令</strong> → 代理 TCP 流量</li><li><strong>UDP ASSOCIATE 命令</strong> → 代理 UDP 数据包</li></ul></li></ol><p>👉 简单比喻：</p><ul><li>TCP 就像一条“电话线”，你先打电话告诉代理你要去哪</li><li>如果是 TCP 业务，代理帮你中继对话</li><li>如果是 UDP 业务，代理给你一个“邮局地址”，你把信件（UDP 包）寄过去，它帮你转发</li></ul><hr><h2 id="6-为什么-SOCKS5-常用"><a href="#6-为什么-SOCKS5-常用" class="headerlink" title="6. 为什么 SOCKS5 常用"></a>6. 为什么 SOCKS5 常用</h2><p>SOCKS5 在现代网络应用中被广泛使用，原因在于：</p><ul><li><strong>协议层次低</strong>：位于 TCP&#x2F;UDP 之上，应用层之下，对上层协议透明</li><li><strong>适用性广</strong>：能代理任意应用层协议，不仅限于 HTTP</li><li><strong>支持 UDP 转发</strong>：满足实时性要求高的业务场景</li><li><strong>支持身份认证与 IPv6</strong>：更安全，适应新网络环境</li><li><strong>比 HTTP 代理更灵活</strong>：不做解析，只做转发</li></ul><hr><h2 id="7-总结"><a href="#7-总结" class="headerlink" title="7. 总结"></a>7. 总结</h2><p>一句话概括：<br><strong>SOCKS5 正向代理的原理是——客户端和代理建立 TCP 会话，告诉代理要访问的目标地址，代理再代表客户端发起连接，并负责转发所有 TCP&#x2F;UDP 数据。代理本身不理解应用层协议，只是透明转发。</strong></p><hr><p>⚡关键点回顾：</p><ul><li>SOCKS5 协议本身基于 TCP</li><li>可代理 TCP 与 UDP 流量</li><li>UDP 转发依赖 TCP 控制信道维持会话</li><li>对应用层协议透明，通用性极强</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;以下内容由AI生成，本人审阅&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;在网络代理领域，&lt;strong&gt;SOCKS5&lt;/strong&gt; 是一种常用的正向代理协议。它不同于传统的 HTTP 代理，</summary>
      
    
    
    
    
    <category term="正向代理" scheme="http://yoursite.com/tags/%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86/"/>
    
    <category term="SOCKS5" scheme="http://yoursite.com/tags/SOCKS5/"/>
    
  </entry>
  
  <entry>
    <title>深入理解正向代理与反向代理：HTTP 报文与 TCP 连接的区别</title>
    <link href="http://yoursite.com/2025/08/17/20250817-shen-ru-li-jie-zheng-xiang-dai-li-yu-fan-xiang-dai-li-http-bao-wen-yu-tcp-lian-jie-de-qu-bie/"/>
    <id>http://yoursite.com/2025/08/17/20250817-shen-ru-li-jie-zheng-xiang-dai-li-yu-fan-xiang-dai-li-http-bao-wen-yu-tcp-lian-jie-de-qu-bie/</id>
    <published>2025-08-16T16:41:19.000Z</published>
    <updated>2025-08-16T16:43:06.545Z</updated>
    
    <content type="html"><![CDATA[<blockquote><blockquote><p>发现之前的理解有一点小偏差，重新整理一下<br>以下内容由AI生成，本人审阅</p></blockquote></blockquote><p>在日常开发和运维中，“正向代理（Forward Proxy）”和“反向代理（Reverse Proxy）”是两个高频概念。但很多人容易混淆两者的请求格式和工作机制。本文将从 <strong>HTTP 报文格式、TCP 连接目标、历史规范</strong> 等角度，系统梳理这两种代理的差别与本质。</p><hr><h2 id="1-正向代理（Forward-Proxy）"><a href="#1-正向代理（Forward-Proxy）" class="headerlink" title="1. 正向代理（Forward Proxy）"></a>1. 正向代理（Forward Proxy）</h2><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>客户端无法直接访问目标网站（如跨境访问、内网限制），于是先把请求交给代理服务器，由代理转发给目标站点。</p><h3 id="请求示例"><a href="#请求示例" class="headerlink" title="请求示例"></a>请求示例</h3><p>客户端请求发送给代理时，<strong>请求行必须带完整 URL</strong>：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">http://www.example.com/index.html</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>www.example.com</span><br></pre></td></tr></table></figure><ul><li>TCP 连接目标：代理服务器（如 <code>proxy.mycorp.com:8080</code>）</li><li>请求行：完整 URL（<code>http://host/path</code>）</li><li>Host：目标站点域名（<code>www.example.com</code>）</li></ul><p>👉 代理根据 URL 或 Host，建立新连接去访问目标网站，再返回结果。</p><hr><h2 id="2-反向代理（Reverse-Proxy）"><a href="#2-反向代理（Reverse-Proxy）" class="headerlink" title="2. 反向代理（Reverse Proxy）"></a>2. 反向代理（Reverse Proxy）</h2><h3 id="使用场景-1"><a href="#使用场景-1" class="headerlink" title="使用场景"></a>使用场景</h3><p>客户端以为自己访问的是目标站点，其实连到的是反向代理（常见如 Nginx、Apache）。代理再根据配置，把请求分发给后端不同的服务。</p><h3 id="请求示例-1"><a href="#请求示例-1" class="headerlink" title="请求示例"></a>请求示例</h3><p>客户端对代理并不知情，请求格式与直连一致：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/index.html</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>www.example.com</span><br></pre></td></tr></table></figure><ul><li>TCP 连接目标：反向代理（如 <code>nginx</code>）</li><li>请求行：相对路径 <code>/path</code></li><li>Host：目标站点域名（用于路由转发）</li></ul><p>👉 对客户端而言，看起来就是访问了目标站点。</p><hr><h2 id="3-请求报文差异总结"><a href="#3-请求报文差异总结" class="headerlink" title="3. 请求报文差异总结"></a>3. 请求报文差异总结</h2><table><thead><tr><th>特性</th><th>正向代理</th><th>反向代理 &#x2F; 直连</th></tr></thead><tbody><tr><td>TCP 连接目标</td><td>代理服务器</td><td>目标服务器 &#x2F; 反向代理</td></tr><tr><td>请求行</td><td><strong>完整 URL</strong> (<code>http://host/path</code>)</td><td><strong>相对路径</strong> (<code>/path</code>)</td></tr><tr><td>Host 头</td><td>目标域名（如 <code>www.example.com</code>）</td><td>目标域名（同上）</td></tr><tr><td>客户端感知</td><td><strong>知道在用代理</strong></td><td><strong>不知道有代理</strong></td></tr></tbody></table><hr><h2 id="4-为什么正向代理要写完整-URL？"><a href="#4-为什么正向代理要写完整-URL？" class="headerlink" title="4. 为什么正向代理要写完整 URL？"></a>4. 为什么正向代理要写完整 URL？</h2><p>这源于 <strong>HTTP&#x2F;1.0 的历史限制</strong>：</p><ul><li><p><strong>早期（HTTP&#x2F;1.0）</strong>：请求行只有路径，如 <code>GET /index.html HTTP/1.0</code>。<br>当时一个 IP 对应一个网站，直连场景没问题；但如果连的是代理，代理无法得知目标域名。<br>👉 解决方案：<strong>在代理模式下，强制请求行写完整 URL</strong>。</p></li><li><p><strong>HTTP&#x2F;1.1</strong>：引入 <code>Host</code> 头，直连时可区分虚拟主机。<br>但 <strong>代理模式依旧保留完整 URL 规则</strong>，原因有两点：</p><ol><li>向后兼容旧代理。</li><li>代理可直接用 URL 做缓存键、写日志，逻辑更清晰。</li></ol></li></ul><p>因此，虽然代理理论上可以只靠 <code>Host</code> 判断目标，但规范要求写完整 URL。</p><hr><h2 id="5-TCP-连接层与应用层的分工"><a href="#5-TCP-连接层与应用层的分工" class="headerlink" title="5. TCP 连接层与应用层的分工"></a>5. TCP 连接层与应用层的分工</h2><p>这里的核心区别在于 <strong>TCP 与 HTTP 的分工</strong>：</p><ul><li><p><strong>TCP 层</strong>：只管“连哪个 IP:Port”。</p><ul><li>直连：连 <code>www.example.com:80</code></li><li>正向代理：连 <code>proxy.mycorp.com:8080</code></li></ul></li><li><p><strong>HTTP 层</strong>：报文里体现目标站点信息。</p><ul><li>直连&#x2F;反向代理：请求行 <code>/path</code> + Host</li><li>正向代理：请求行 <code>http://host/path</code> + Host</li></ul></li></ul><p>👉 换句话说，<strong>TCP 根本不知道什么是代理</strong>，它只负责传字节流；代理语义完全由 HTTP 层和客户端实现决定。</p><hr><h2 id="6-为什么客户端在代理模式下，TCP-连接建到代理服务器？"><a href="#6-为什么客户端在代理模式下，TCP-连接建到代理服务器？" class="headerlink" title="6. 为什么客户端在代理模式下，TCP 连接建到代理服务器？"></a>6. 为什么客户端在代理模式下，TCP 连接建到代理服务器？</h2><p>👉 因为这是 <strong>客户端实现决定的</strong>，不是 HTTP 协议强制的。</p><h3 id="1-普通直连模式"><a href="#1-普通直连模式" class="headerlink" title="1. 普通直连模式"></a>1. 普通直连模式</h3><p>浏览器要访问 <code>http://www.example.com/index.html</code>：</p><ul><li><p>DNS 解析 <code>www.example.com</code> → 得到 IP</p></li><li><p>建立 TCP 连接 <code>www.example.com:80</code></p></li><li><p>发请求：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/index.html</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>www.example.com</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="2-配置了正向代理模式"><a href="#2-配置了正向代理模式" class="headerlink" title="2. 配置了正向代理模式"></a>2. 配置了正向代理模式</h3><p>当浏览器或系统配置了代理地址，例如：</p><ul><li>代理地址：<code>proxy.mycorp.com</code></li><li>端口：<code>8080</code></li></ul><p>此时客户端行为改变：</p><ul><li><p>DNS 不再解析 <code>www.example.com</code></p></li><li><p>TCP 连接目标改为 <code>proxy.mycorp.com:8080</code></p></li><li><p>发请求：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">http://www.example.com/index.html</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>www.example.com</span><br></pre></td></tr></table></figure></li></ul><p>👉 代理收到报文后，根据 Host 或 URL 确定目标网站，再去转发。</p><hr><h3 id="3-为什么这是客户端逻辑？"><a href="#3-为什么这是客户端逻辑？" class="headerlink" title="3. 为什么这是客户端逻辑？"></a>3. 为什么这是客户端逻辑？</h3><ul><li><p>HTTP 协议只规定“请求报文格式”</p></li><li><p>TCP 连接目标是由客户端实现决定的</p></li><li><p>浏览器配置代理的含义就是：</p><blockquote><p>“以后别直连目标网站，把请求先交给代理。”</p></blockquote></li></ul><p>因此：<br>✔ 直连模式 → TCP 连目标站点<br>✔ 代理模式 → TCP 连代理服务器<br>✔ 完全是客户端的选择和实现逻辑</p><hr><h3 id="4-特别注意：HTTPS-代理"><a href="#4-特别注意：HTTPS-代理" class="headerlink" title="4. 特别注意：HTTPS + 代理"></a>4. 特别注意：HTTPS + 代理</h3><p>当访问 HTTPS 时，客户端会先向代理发送 <strong>CONNECT 方法</strong>：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CONNECT</span> <span class="string">www.example.com:443</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>www.example.com:443</span><br></pre></td></tr></table></figure><p>代理收到后，建立一条 TCP 隧道；TLS 握手和加密流量在隧道中传输，代理无法解密。<br>👉 这同样完全是客户端的实现逻辑。</p><hr><p>✅ <strong>结论</strong><br>正向代理模式下，客户端确实是 <strong>主动选择连代理服务器</strong>，而不是目标站点。<br>这是因为客户端知道自己在用代理，所以构造了“特殊的请求行 + 代理 TCP 目标”。</p><p>其实从客户端角度看，即使请求行写得像直连模式，效果也常常一样，因为多数代理会兼容：</p><ul><li>如果请求行缺少完整 URL</li><li>代理也能 fallback 到用 Host 提取目标域名</li></ul><p>因此对用户体验影响不大，差别更多是 <strong>规范要求 vs 代理实现的便利性</strong>。</p><hr><h2 id="7-正向代理的本质"><a href="#7-正向代理的本质" class="headerlink" title="7. 正向代理的本质"></a>7. 正向代理的本质</h2><p>从不同角度来看，正向代理的核心本质可以归纳为三层：</p><ul><li><p><strong>从 TCP 角度</strong><br>客户端只是在“建 TCP 连接”这一步，选择连代理服务器的 IP:Port，而不是目标服务器的 IP:Port。<br>👉 对 TCP 来说，这没有什么“特殊”，就是连了另一台机器而已。</p></li><li><p><strong>从 HTTP 角度</strong><br>客户端在请求报文里写的是绝对 URI（<code>http://host/path</code>），这样代理才能知道目标是谁。<br>👉 这就是“请求行会有完整路径”的原因。</p></li><li><p><strong>从代理实现角度</strong><br>代理要支持解析这种“带绝对 URI 的请求行”，并根据 Host&#x2F;URI 再去发起一个新的 TCP 连接转发给目标。<br>👉 这就是“代理服务器要有支持转发的逻辑”。</p></li></ul><hr><h2 id="8-实际实现-vs-规范要求"><a href="#8-实际实现-vs-规范要求" class="headerlink" title="8. 实际实现 vs 规范要求"></a>8. 实际实现 vs 规范要求</h2><table><thead><tr><th>维度</th><th>规范要求</th><th>实际实现兼容性</th></tr></thead><tbody><tr><td>正向代理请求行</td><td>必须写完整 URL</td><td>大部分代理也容忍只写 <code>/path</code>，会用 Host 拼接</td></tr><tr><td>Host 头</td><td>必须携带</td><td>必须携带</td></tr><tr><td>缓存&#x2F;日志</td><td>直接用 URL 做键，简单高效</td><td>如果缺 URL，代理需额外拼接 Host</td></tr></tbody></table><hr><h2 id="9-HTTPS-与正向代理的特殊性"><a href="#9-HTTPS-与正向代理的特殊性" class="headerlink" title="9. HTTPS 与正向代理的特殊性"></a>9. HTTPS 与正向代理的特殊性</h2><p>当通过正向代理访问 HTTPS 站点时，客户端先发起 <strong>CONNECT 隧道请求</strong>：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CONNECT</span> <span class="string">www.example.com:443</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>www.example.com:443</span><br></pre></td></tr></table></figure><p>代理建立 TCP 隧道后，客户端在隧道内直接跑 TLS 握手，代理无法看到明文。<br>👉 这同样由客户端的代理配置决定，TCP 本身并不区分。</p><hr><h2 id="10-结论"><a href="#10-结论" class="headerlink" title="10. 结论"></a>10. 结论</h2><ol><li><p><strong>正向代理</strong>：</p><ul><li>TCP 连代理服务器</li><li>HTTP 请求行写完整 URL</li><li>客户端知道自己在用代理</li></ul></li><li><p><strong>反向代理</strong>：</p><ul><li>TCP 连反向代理（表面看似目标站点）</li><li>HTTP 请求行写路径，Host 提供目标域名</li><li>客户端无感知</li></ul></li><li><p><strong>核心差别</strong>：</p><ul><li>正向代理：服务于客户端，帮助突破访问限制</li><li>反向代理：服务于服务器，做负载均衡、缓存、安全隔离</li></ul></li></ol><hr><p>📌 总结一句话：<br><strong>正向代理是客户端主动配置的中转站，反向代理是服务端架构中的门面。区别的本质在于 TCP 建链目标和 HTTP 请求行格式。</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;发现之前的理解有一点小偏差，重新整理一下&lt;br&gt;以下内容由AI生成，本人审阅&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;在日常开发和运维中，“正向代理（Forward Proxy）”和“反向代理</summary>
      
    
    
    
    
    <category term="TCP" scheme="http://yoursite.com/tags/TCP/"/>
    
    <category term="HTTP" scheme="http://yoursite.com/tags/HTTP/"/>
    
    <category term="正向代理" scheme="http://yoursite.com/tags/%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86/"/>
    
    <category term="反向代理" scheme="http://yoursite.com/tags/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>多语言大模型如何处理不同语言？是翻译成英语后再推理的吗？</title>
    <link href="http://yoursite.com/2025/08/07/20250807-duo-yu-yan-da-mo-xing-ru-he-chu-li-bu-tong-yu-yan-shi-fan-yi-cheng-ying-yu-hou-zai-tui-li-de-ma/"/>
    <id>http://yoursite.com/2025/08/07/20250807-duo-yu-yan-da-mo-xing-ru-he-chu-li-bu-tong-yu-yan-shi-fan-yi-cheng-ying-yu-hou-zai-tui-li-de-ma/</id>
    <published>2025-08-07T04:14:48.000Z</published>
    <updated>2025-08-07T04:39:38.663Z</updated>
    
    <content type="html"><![CDATA[<blockquote><blockquote><p>以下文章有ChatGPT生成</p></blockquote></blockquote><p>多语言大模型（Multilingual LLM）越来越普及，但一个常见的问题是：<strong>模型处理非英语语言时，是直接在原语言上推理，还是先翻译成英语再处理？</strong></p><p>简短回答：<strong>大多数主流模型并不会将输入翻译为英语后再推理，而是直接在原语言上进行理解与生成。</strong></p><p>以下是详细解释。</p><hr><h2 id="1-训练方式：直接多语言训练"><a href="#1-训练方式：直接多语言训练" class="headerlink" title="1. 训练方式：直接多语言训练"></a>1. 训练方式：直接多语言训练</h2><p>当前主流大模型（如 GPT、Claude、Gemini、Mistral、LLaMA、BLOOM 等）在训练时使用了多语种语料，模型在训练阶段就学会了多语言的语法、词汇和语义表达：</p><ul><li>不会将所有语料翻译成英语；</li><li>而是在训练过程中构建出一个“跨语言的共享语义空间”，在这个空间中不同语言的同义句会靠得很近；</li><li>因此，模型具备了直接理解和生成多语言的能力。</li></ul><hr><h2 id="2-英语的优势与“隐性中心化”"><a href="#2-英语的优势与“隐性中心化”" class="headerlink" title="2. 英语的优势与“隐性中心化”"></a>2. 英语的优势与“隐性中心化”</h2><p>虽然模型支持多语言，但英语仍然是“最强语言”，原因包括：</p><ul><li>英语在训练数据中占比通常高达 60%~90%；</li><li>模型参数对英语有更强的优化效果；</li><li>英语可能隐性地作为“锚点”来对齐其他语言的语义表示。</li></ul><p>这种语义对齐并不是翻译行为，而是一种深层语义空间的统一。</p><hr><h2 id="3-推理流程：不会翻译成英语再处理"><a href="#3-推理流程：不会翻译成英语再处理" class="headerlink" title="3. 推理流程：不会翻译成英语再处理"></a>3. 推理流程：不会翻译成英语再处理</h2><p>当你用中文或其他语言提问时，模型不会走「中文 → 英文 → 推理 → 翻译成中文」这一路径，而是：</p><ul><li>直接在中文语境中理解问题；</li><li>在语义空间中执行推理；</li><li>直接生成中文结果。</li></ul><p>当然，部分三方插件可能人为引入翻译步骤，但这不是模型本身的机制。</p><hr><h2 id="4-支持机制的实验证据"><a href="#4-支持机制的实验证据" class="headerlink" title="4. 支持机制的实验证据"></a>4. 支持机制的实验证据</h2><ul><li><strong>对比实验</strong>：模型处理法语、德语等非英语输入时，直接完成推理与生成，无中转行为。</li><li><strong>语义嵌入对齐</strong>：多语言句子在语义空间中具有高度重合性。</li><li><strong>激活层分析</strong>：输入非英语语言时，中间激活状态未显示出“语言切换”迹象。</li></ul><hr><h2 id="5-用英语输入表现是否更好？"><a href="#5-用英语输入表现是否更好？" class="headerlink" title="5. 用英语输入表现是否更好？"></a>5. 用英语输入表现是否更好？</h2><p>是的。虽然模型支持多语言，但用英语输入通常效果最佳，尤其体现在知识完整性、表达清晰度、推理深度等方面：</p><h3 id="为什么英语效果更好："><a href="#为什么英语效果更好：" class="headerlink" title="为什么英语效果更好："></a>为什么英语效果更好：</h3><table><thead><tr><th>因素</th><th>原因说明</th></tr></thead><tbody><tr><td>数据占比高</td><td>英语语料远多于其他语言，覆盖面更广，细节更丰富</td></tr><tr><td>表达优化充分</td><td>模型在英语上训练迭代次数更多，结构化表达能力更强</td></tr><tr><td>知识密度高</td><td>很多细节知识只出现在英文语料（如 Reddit、Wikipedia、新闻、论文等）中</td></tr><tr><td>推理能力领先</td><td>英文任务训练量大，模型更善于处理多步推理、复杂逻辑问题</td></tr></tbody></table><hr><h3 id="对比示例："><a href="#对比示例：" class="headerlink" title="对比示例："></a>对比示例：</h3><table><thead><tr><th>输入语言</th><th>问题</th><th>模型响应风格与质量</th></tr></thead><tbody><tr><td>英语</td><td>Why did the Roman Empire fall?</td><td>内容结构清晰，信息丰富，逻辑严密</td></tr><tr><td>中文</td><td>罗马帝国为何衰亡？</td><td>内容相似，但用词偏模板化，论证略显单薄</td></tr><tr><td>阿拉伯语</td><td>لماذا سقطت الإمبراطورية الرومانية؟</td><td>回答趋于泛泛，具体细节缺失</td></tr></tbody></table><hr><h2 id="6-Prompt-编写建议"><a href="#6-Prompt-编写建议" class="headerlink" title="6. Prompt 编写建议"></a>6. Prompt 编写建议</h2><table><thead><tr><th>使用场景</th><th>推荐策略</th></tr></thead><tbody><tr><td>复杂推理&#x2F;创作</td><td>使用英文 Prompt，提升准确性和内容质量</td></tr><tr><td>中文对话&#x2F;问答</td><td>可直接用中文，响应速度快，语义易控</td></tr><tr><td>翻译任务</td><td>直接使用目标语言作为输入&#x2F;输出，模型对翻译任务表现良好</td></tr><tr><td>多语言兼容输出</td><td>英文 Prompt + 指令 <code>Please answer in Chinese.</code> 等，结果可控</td></tr></tbody></table><hr><h2 id="7-实用技巧：英文-Prompt-中文输出"><a href="#7-实用技巧：英文-Prompt-中文输出" class="headerlink" title="7. 实用技巧：英文 Prompt + 中文输出"></a>7. 实用技巧：英文 Prompt + 中文输出</h2><h3 id="模板："><a href="#模板：" class="headerlink" title="模板："></a>模板：</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Your task in English]</span><br><span class="line">Please answer in Chinese.</span><br></pre></td></tr></table></figure><h3 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Write a short argumentative essay about how artificial intelligence is impacting the future of employment. Focus on both the opportunities and challenges it presents. Use logical reasoning and real-world examples.</span><br><span class="line">Please answer in Chinese.</span><br></pre></td></tr></table></figure><h3 id="输出（模型生成中文）："><a href="#输出（模型生成中文）：" class="headerlink" title="输出（模型生成中文）："></a>输出（模型生成中文）：</h3><blockquote><p>人工智能正在以惊人的速度改变就业的未来……（略）</p></blockquote><hr><h2 id="8-进阶策略：先生成英文，再翻译"><a href="#8-进阶策略：先生成英文，再翻译" class="headerlink" title="8. 进阶策略：先生成英文，再翻译"></a>8. 进阶策略：先生成英文，再翻译</h2><p>对于需要最大限度保持内容质量的应用，可以：</p><ol><li>使用英文 Prompt；</li><li>得到英文结果后，用模型翻译为中文；</li></ol><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Translate the following text into Chinese:</span><br><span class="line">[英文生成内容]</span><br></pre></td></tr></table></figure><p>适合精细控制内容质量的生产环境。</p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><table><thead><tr><th>问题</th><th>答案</th></tr></thead><tbody><tr><td>大模型是否将非英语输入翻译为英语再推理？</td><td>否，直接在原语言上推理</td></tr><tr><td>英语输入是否效果更好？</td><td>是，表现更强、内容更准确、表达更自然</td></tr><tr><td>多语言之间是否共享知识？</td><td>共享语义空间，但知识覆盖仍取决于训练数据分布</td></tr><tr><td>推荐的 Prompt 编写方式？</td><td>英文 Prompt + 中文输出 或 英文生成 + 翻译为中文</td></tr></tbody></table><hr><h2 id="延伸阅读"><a href="#延伸阅读" class="headerlink" title="延伸阅读"></a>延伸阅读</h2><ul><li><a href="https://arxiv.org/abs/2010.11934">Massively Multilingual Models (mT5)</a></li><li><a href="https://huggingface.co/bigscience/bloom">BLOOM: a 176B Multilingual LLM</a></li><li><a href="https://arxiv.org/abs/2201.10005">XGLM: Multilingual Autoregressive Language Model</a></li><li><a href="https://openai.com/research/multilingual">OpenAI: Language models as multilingual translators</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;以下文章有ChatGPT生成&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;多语言大模型（Multilingual LLM）越来越普及，但一个常见的问题是：&lt;strong&gt;模型处理非英语语言时，是直</summary>
      
    
    
    
    
    <category term="AI" scheme="http://yoursite.com/tags/AI/"/>
    
    <category term="LLM" scheme="http://yoursite.com/tags/LLM/"/>
    
    <category term="大模型" scheme="http://yoursite.com/tags/%E5%A4%A7%E6%A8%A1%E5%9E%8B/"/>
    
    <category term="多语言" scheme="http://yoursite.com/tags/%E5%A4%9A%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>三种学习法核心精髓</title>
    <link href="http://yoursite.com/2025/08/04/20250804-san-chong-xue-xi-fa-he-xin-jing-sui/"/>
    <id>http://yoursite.com/2025/08/04/20250804-san-chong-xue-xi-fa-he-xin-jing-sui/</id>
    <published>2025-08-04T05:55:52.000Z</published>
    <updated>2025-08-07T04:15:13.711Z</updated>
    
    <content type="html"><![CDATA[<h2 id="🧠-一、费曼学习法（Feynman-Technique）"><a href="#🧠-一、费曼学习法（Feynman-Technique）" class="headerlink" title="🧠 一、费曼学习法（Feynman Technique）"></a>🧠 一、费曼学习法（Feynman Technique）</h2><p><strong>核心理念：用教别人的方式来教自己。</strong></p><h3 id="📌-关键步骤："><a href="#📌-关键步骤：" class="headerlink" title="📌 关键步骤："></a>📌 关键步骤：</h3><ol><li><strong>选择概念</strong>：挑选你想学的知识点。  </li><li><strong>解释给小白听</strong>：用简单、口语化的语言讲解，好像在教一个完全不懂的人（比如小学生）。  </li><li><strong>找出盲点</strong>：当你卡住或讲不清楚，说明你还没真正理解。  </li><li><strong>回顾补全</strong>：回到原材料查漏补缺，搞清楚所有细节。  </li><li><strong>重新讲解 &amp; 简化</strong>：再次讲解，并尽量用更简单的语言表达。</li></ol><p>✅ <strong>核心关键：</strong>  </p><blockquote><p>“能讲清楚，才算真正学懂。”</p></blockquote><hr><h2 id="🧩-二、西蒙学习法（Herbert-Simon-Learning-Strategy）"><a href="#🧩-二、西蒙学习法（Herbert-Simon-Learning-Strategy）" class="headerlink" title="🧩 二、西蒙学习法（Herbert Simon Learning Strategy）"></a>🧩 二、西蒙学习法（Herbert Simon Learning Strategy）</h2><p>（又称“问题解决导向学习”Problem-Solving Learning）</p><h3 id="📌-关键特点："><a href="#📌-关键特点：" class="headerlink" title="📌 关键特点："></a>📌 关键特点：</h3><ol><li><strong>以问题为驱动</strong>：学习过程围绕真实问题展开，而不是被动接收知识。  </li><li><strong>建立知识结构</strong>：通过已有的知识和逻辑推理解决新问题。  </li><li><strong>重视反思与优化</strong>：每一次问题解决都伴随着策略的反思和迭代。</li></ol><p>✅ <strong>核心关键：</strong>  </p><blockquote><p>“用解决问题的方式构建知识体系。”</p></blockquote><hr><h2 id="📝-三、康奈尔学习法（Cornell-Note-taking-System）"><a href="#📝-三、康奈尔学习法（Cornell-Note-taking-System）" class="headerlink" title="📝 三、康奈尔学习法（Cornell Note-taking System）"></a>📝 三、康奈尔学习法（Cornell Note-taking System）</h2><p><strong>核心理念：结构化笔记提升理解与记忆。</strong></p><h3 id="📌-五大步骤："><a href="#📌-五大步骤：" class="headerlink" title="📌 五大步骤："></a>📌 五大步骤：</h3><ol><li><strong>笔记区（右侧大块）</strong>：上课或阅读时记下主要内容。  </li><li><strong>提问区（左侧小块）</strong>：课后写下问题、关键词或提示语，用于复习时自测。  </li><li><strong>总结区（底部）</strong>：用自己的话总结整页笔记的核心。  </li><li><strong>回顾复习</strong>：定期回看并测试自己，强化记忆。  </li><li><strong>联结思考</strong>：不断将新知识与旧知识联系起来。</li></ol><p>✅ <strong>核心关键：</strong>  </p><blockquote><p>“记笔记不是为了记录，而是为了思考和复习。”</p></blockquote><hr><h2 id="🔍-总结对比表"><a href="#🔍-总结对比表" class="headerlink" title="🔍 总结对比表"></a>🔍 总结对比表</h2><table><thead><tr><th>学习法</th><th>核心关键</th><th>适用场景</th></tr></thead><tbody><tr><td>费曼学习法</td><td>教别人来检验理解深度</td><td>理论知识、概念型内容</td></tr><tr><td>西蒙学习法</td><td>以解决问题构建知识结构</td><td>数理逻辑、编程、工程类内容</td></tr><tr><td>康奈尔学习法</td><td>结构化笔记促进理解与回顾</td><td>听课、读书、考试复习</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;🧠-一、费曼学习法（Feynman-Technique）&quot;&gt;&lt;a href=&quot;#🧠-一、费曼学习法（Feynman-Technique）&quot; class=&quot;headerlink&quot; title=&quot;🧠 一、费曼学习法（Feynman Technique）&quot;&gt;&lt;/a</summary>
      
    
    
    
    
    <category term="学习法" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>quick_worker 项目分析：基于 Channel 的高效异步批处理与 CPU 空转问题解析</title>
    <link href="http://yoursite.com/2025/07/17/20250717-quick-worker-xiang-mu-fen-xi-ji-yu-channel-de-gao-xiao-yi-bu-pi-chu-li-yu-cpu-kong-zhuan-wen-ti-jie-xi/"/>
    <id>http://yoursite.com/2025/07/17/20250717-quick-worker-xiang-mu-fen-xi-ji-yu-channel-de-gao-xiao-yi-bu-pi-chu-li-yu-cpu-kong-zhuan-wen-ti-jie-xi/</id>
    <published>2025-07-16T16:20:44.000Z</published>
    <updated>2025-07-16T16:22:06.782Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/Kingson4Wu/quick_worker"><code>quick_worker</code></a> 是一个用 Go 实现的轻量级异步批处理框架。它通过 channel 和 goroutine 构建了一个高效的生产者-消费者模型，支持按批量大小或超时触发数据处理，适合高并发、吞吐敏感的场景。</p><p>本文将围绕其核心并发模型进行分析，重点讨论：</p><ul><li>是否存在 CPU 空转（Busy Waiting）问题</li><li><code>select</code> 和 channel 的阻塞特性</li><li>在什么情况下应考虑使用 <code>sync.Cond</code> 替代主动轮询</li></ul><hr><h3 id="一、项目核心架构概览"><a href="#一、项目核心架构概览" class="headerlink" title="一、项目核心架构概览"></a>一、项目核心架构概览</h3><p><code>quick_worker</code> 的核心工作流程：</p><ol><li><strong>数据投递</strong>：调用方通过 <code>Produce</code> 方法投递任务数据。</li><li><strong>缓冲通道</strong>：数据进入内部 <code>dataChan</code> 缓冲通道。</li><li><strong>消费者循环</strong>：独立的消费者 goroutine 执行 <code>consume</code> 方法，负责从通道中取出数据并批量处理。</li><li><strong>触发机制</strong>：处理可以由达到最大批量（maxBatchSize）或等待超时（maxWaitDuration）触发。</li><li><strong>退出控制</strong>：通过 <code>doneChan</code> 通知消费者优雅退出。</li></ol><p>这一模型兼具性能与可靠性，典型用于日志聚合、异步队列、延迟任务聚合等场景。</p><hr><h3 id="二、关于-CPU-空转（Busy-Waiting）问题的分析"><a href="#二、关于-CPU-空转（Busy-Waiting）问题的分析" class="headerlink" title="二、关于 CPU 空转（Busy Waiting）问题的分析"></a>二、关于 CPU 空转（Busy Waiting）问题的分析</h3><h4 id="1-消费者循环是否会导致空转？"><a href="#1-消费者循环是否会导致空转？" class="headerlink" title="1. 消费者循环是否会导致空转？"></a>1. 消费者循环是否会导致空转？</h4><p><code>core/worker.go</code> 中的主循环如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> data, ok := &lt;-w.dataChan:</span><br><span class="line">        <span class="comment">// 接收并处理数据</span></span><br><span class="line">    <span class="keyword">case</span> &lt;-timer.C:</span><br><span class="line">        <span class="comment">// 超时触发处理</span></span><br><span class="line">    <span class="keyword">case</span> &lt;-w.doneChan:</span><br><span class="line">        <span class="comment">// 接收到退出信号</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该循环具有以下特性：</p><ul><li><strong>select 是阻塞式的</strong>：当所有分支都不满足时，<code>select</code> 会自动挂起，不占用 CPU。</li><li>只要 <code>dataChan</code> 中没有数据、<code>timer</code> 没有到期、<code>doneChan</code> 没有信号，该 goroutine 会自然休眠。</li><li><strong>结论：这段代码不会导致 CPU 空转，是标准的 Go 并发写法。</strong></li></ul><h4 id="2-生产者逻辑是否安全？"><a href="#2-生产者逻辑是否安全？" class="headerlink" title="2. 生产者逻辑是否安全？"></a>2. 生产者逻辑是否安全？</h4><p>生产者调用 <code>Produce</code> 方法将数据投递进通道时，使用了非阻塞的 <code>select</code>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> w.dataChan &lt;- data:</span><br><span class="line">    <span class="comment">// 投递成功</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="comment">// 通道已满，放弃投递</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这避免了阻塞与死循环，也没有任何 busy loop 行为。</p><h4 id="3-可能导致空转的场景分析"><a href="#3-可能导致空转的场景分析" class="headerlink" title="3. 可能导致空转的场景分析"></a>3. 可能导致空转的场景分析</h4><table><thead><tr><th>场景</th><th>quick_worker 中是否存在</th><th>说明</th></tr></thead><tbody><tr><td><code>for &#123;&#125;</code> 死循环</td><td>❌</td><td>无此代码</td></tr><tr><td><code>for &#123; select &#123;&#125; &#125;</code> 且无阻塞分支</td><td>❌</td><td>每个 select 都含有阻塞通道</td></tr><tr><td>定时器设置过小，频繁唤醒</td><td>⚠️</td><td>频繁 wakeup 但不构成空转</td></tr><tr><td>通道满后生产者死循环 retry</td><td>❌</td><td>当前实现非阻塞，未重试</td></tr></tbody></table><h4 id="✅-总结结论："><a href="#✅-总结结论：" class="headerlink" title="✅ 总结结论："></a>✅ 总结结论：</h4><ul><li><code>quick_worker</code> 中的核心并发逻辑是以阻塞式 channel + timer 驱动的。</li><li>消费者 goroutine 不存在任何 busy waiting。</li><li>项目天然避免了 CPU 空转问题，性能开销可控。</li></ul><hr><h3 id="三、sync-Cond：在什么情况下必须使用它来避免-CPU-空转？"><a href="#三、sync-Cond：在什么情况下必须使用它来避免-CPU-空转？" class="headerlink" title="三、sync.Cond：在什么情况下必须使用它来避免 CPU 空转？"></a>三、sync.Cond：在什么情况下必须使用它来避免 CPU 空转？</h3><p>虽然 <code>quick_worker</code> 本身没有使用 <code>sync.Cond</code>，但了解它的用途对于设计其他复杂同步场景非常重要。</p><h4 id="1-什么是-CPU-空转？"><a href="#1-什么是-CPU-空转？" class="headerlink" title="1. 什么是 CPU 空转？"></a>1. 什么是 CPU 空转？</h4><p>CPU 空转（Busy Waiting）是指：<strong>线程在等待某个条件成立时，不阻塞、不 sleep，而是反复检查条件的状态，导致 CPU 被无意义地占用</strong>。</p><p>例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> !ready &#123;</span><br><span class="line">    <span class="comment">// 空转：一直检查条件，浪费 CPU</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码没有任何阻塞操作，会让 CPU 持续忙碌。</p><h4 id="2-如何使用-sync-Cond-避免空转？"><a href="#2-如何使用-sync-Cond-避免空转？" class="headerlink" title="2. 如何使用 sync.Cond 避免空转？"></a>2. 如何使用 sync.Cond 避免空转？</h4><p><code>sync.Cond</code> 提供了条件变量机制，允许我们在等待某个条件时挂起 goroutine，直到条件成立被显式唤醒。</p><p>示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mu sync.Mutex</span><br><span class="line"><span class="keyword">var</span> cond = sync.NewCond(&amp;mu)</span><br><span class="line"><span class="keyword">var</span> ready <span class="type">bool</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 等待方（消费者）</span></span><br><span class="line">mu.Lock()</span><br><span class="line"><span class="keyword">for</span> !ready &#123;</span><br><span class="line">    cond.Wait() <span class="comment">// 阻塞等待，自动释放锁，避免空转</span></span><br><span class="line">&#125;</span><br><span class="line">mu.Unlock()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通知方（生产者）</span></span><br><span class="line">mu.Lock()</span><br><span class="line">ready = <span class="literal">true</span></span><br><span class="line">cond.Signal() <span class="comment">// 或 cond.Broadcast()</span></span><br><span class="line">mu.Unlock()</span><br></pre></td></tr></table></figure><p>优点：</p><ul><li><code>Wait()</code> 会阻塞 goroutine，而不是让它空转。</li><li><code>Signal()</code> 只唤醒一个等待者，<code>Broadcast()</code> 唤醒所有等待者。</li></ul><h4 id="3-使用-sync-Cond-的典型场景"><a href="#3-使用-sync-Cond-的典型场景" class="headerlink" title="3. 使用 sync.Cond 的典型场景"></a>3. 使用 sync.Cond 的典型场景</h4><table><thead><tr><th>适用场景</th><th>原因</th></tr></thead><tbody><tr><td>缓存读取等待写入</td><td>等待数据可用，不适合用 channel 表达</td></tr><tr><td>对象池等待资源释放</td><td>条件复杂或需共享状态，channel 难以表达</td></tr><tr><td>多线程 barrier 同步</td><td>等待多个条件成立后同时唤醒</td></tr><tr><td>控制 goroutine 启停</td><td>管理状态而不是数据流</td></tr></tbody></table><h4 id="4-channel-和-sync-Cond-的选择建议"><a href="#4-channel-和-sync-Cond-的选择建议" class="headerlink" title="4. channel 和 sync.Cond 的选择建议"></a>4. channel 和 sync.Cond 的选择建议</h4><table><thead><tr><th>特性</th><th>channel</th><th>sync.Cond</th></tr></thead><tbody><tr><td>数据流驱动</td><td>✅（首选）</td><td>❌（不适合）</td></tr><tr><td>条件状态驱动</td><td>❌（难表达）</td><td>✅（适合表达条件判断）</td></tr><tr><td>是否易用</td><td>简单直观</td><td>需要配合锁、小心竞态</td></tr><tr><td>是否阻塞</td><td>✅（天然阻塞）</td><td>✅（Wait 手动阻塞）</td></tr></tbody></table><p><strong>结论：</strong></p><blockquote><p>如果你在等待某个“条件”而非“数据”，又无法用 channel 表达，那么使用 <code>sync.Cond</code> 可以有效避免 busy loop。</p></blockquote><hr><h3 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h3><ul><li><code>quick_worker</code> 项目使用阻塞式 select 循环，无 busy loop 行为，不存在 CPU 空转问题。</li><li>Go 的 channel 和 timer 本身就是高效的阻塞机制，只要 select 内有阻塞分支，goroutine 就不会占用 CPU。</li><li>只有在使用 <code>for + 条件判断</code> 等原始自旋方式等待状态时，才需要引入 <code>sync.Cond</code>。</li><li><code>sync.Cond</code> 更适合资源池、复杂状态条件协作等无法使用 channel 描述的场景。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/Kingson4Wu/quick_worker&quot;&gt;&lt;code&gt;quick_worker&lt;/code&gt;&lt;/a&gt; 是一个用 Go 实现的轻量级异步批处理框架。它通过 channel 和 goroutine 构建了一个高效的</summary>
      
    
    
    
    
    <category term="Go" scheme="http://yoursite.com/tags/Go/"/>
    
    <category term="CPU" scheme="http://yoursite.com/tags/CPU/"/>
    
    <category term="批处理任务" scheme="http://yoursite.com/tags/%E6%89%B9%E5%A4%84%E7%90%86%E4%BB%BB%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>QuicKit：高效并发任务管理工具库详解</title>
    <link href="http://yoursite.com/2025/07/16/20250716-quickit-gao-xiao-bing-fa-ren-wu-guan-li-gong-ju-ku-xiang-jie/"/>
    <id>http://yoursite.com/2025/07/16/20250716-quickit-gao-xiao-bing-fa-ren-wu-guan-li-gong-ju-ku-xiang-jie/</id>
    <published>2025-07-16T14:50:57.000Z</published>
    <updated>2025-07-16T16:13:40.932Z</updated>
    
    <content type="html"><![CDATA[<p>在现代软件开发中，高效的任务管理与并发处理是提升系统性能的关键。<strong>QuicKit</strong> 是一个基于 Java 的工具库，专注于并发任务调度、执行控制、重试机制等通用能力的封装。本文将深入介绍 QuicKit 的核心功能及其实现原理。</p><hr><h2 id="1-延迟任务调度：DelayQueueUtils"><a href="#1-延迟任务调度：DelayQueueUtils" class="headerlink" title="1. 延迟任务调度：DelayQueueUtils"></a>1. 延迟任务调度：<code>DelayQueueUtils</code></h2><p><code>DelayQueueUtils</code> 使用 <strong>HashedWheelTimer</strong> 实现延迟任务的高效调度。</p><h3 id="实现原理："><a href="#实现原理：" class="headerlink" title="实现原理："></a>实现原理：</h3><ul><li><strong>时间轮机制</strong>：将时间划分为多个槽（slots），类似时钟的刻度。</li><li><strong>任务分配</strong>：任务根据设定的延迟时间分配至对应槽中。</li><li><strong>槽激活</strong>：时间轮旋转，当指针指向某个槽时，执行该槽内的所有任务。</li></ul><blockquote><p>✅ 优势：极大减少内存消耗和调度开销，适合高频延迟任务场景。</p></blockquote><hr><h2 id="2-执行频率控制：ExecutionFrequencyUtils"><a href="#2-执行频率控制：ExecutionFrequencyUtils" class="headerlink" title="2. 执行频率控制：ExecutionFrequencyUtils"></a>2. 执行频率控制：<code>ExecutionFrequencyUtils</code></h2><p>用于<strong>控制任务执行频率</strong>，防止系统被大量任务压垮。</p><h3 id="实现原理：-1"><a href="#实现原理：-1" class="headerlink" title="实现原理："></a>实现原理：</h3><ul><li><strong>任务分片</strong>：将任务列表切分为多个子任务，每批任务在一定时间间隔内执行。</li><li><strong>频率限制</strong>：可配置每秒允许执行的任务数量，避免突发任务过载系统。</li></ul><blockquote><p>✅ 应用场景：接口限流、批量处理限速、系统保护。</p></blockquote><hr><h2 id="3-并行任务处理：ParallelTask"><a href="#3-并行任务处理：ParallelTask" class="headerlink" title="3. 并行任务处理：ParallelTask"></a>3. 并行任务处理：<code>ParallelTask</code></h2><p>提供简洁高效的<strong>并行处理能力</strong>，充分利用多核 CPU 性能。</p><h3 id="实现原理：-2"><a href="#实现原理：-2" class="headerlink" title="实现原理："></a>实现原理：</h3><ul><li><strong>并行流</strong>：基于 Java 8 的 <code>parallelStream()</code> 并行处理任务。</li><li><strong>线程池管理</strong>：使用 <code>ExecutorService</code> 管理线程，降低线程创建销毁开销。</li></ul><blockquote><p>✅ 适用场景：批量任务处理、并发计算、数据转换等。</p></blockquote><hr><h2 id="4-重试机制：RetryUtils"><a href="#4-重试机制：RetryUtils" class="headerlink" title="4. 重试机制：RetryUtils"></a>4. 重试机制：<code>RetryUtils</code></h2><p>内置灵活的<strong>重试机制</strong>，应对任务失败后的自动恢复。</p><h3 id="实现原理：-3"><a href="#实现原理：-3" class="headerlink" title="实现原理："></a>实现原理：</h3><ul><li><strong>重试策略配置</strong>：通过 <code>RetryerBuilder</code> 设置重试次数、间隔、终止条件等。</li><li><strong>异常捕获与处理</strong>：根据异常类型与策略自动判断是否重试。</li></ul><blockquote><p>✅ 典型用途：数据库重试、远程服务调用、临时异常容忍。</p></blockquote><hr><h2 id="5-读写锁封装：ReadWriteLockWrapper"><a href="#5-读写锁封装：ReadWriteLockWrapper" class="headerlink" title="5. 读写锁封装：ReadWriteLockWrapper"></a>5. 读写锁封装：<code>ReadWriteLockWrapper</code></h2><p>封装 Java 原生 <code>ReentrantReadWriteLock</code>，简化并发数据访问控制。</p><h3 id="实现原理：-4"><a href="#实现原理：-4" class="headerlink" title="实现原理："></a>实现原理：</h3><ul><li><strong>读写分离</strong>：多个线程可同时读，写需独占。</li><li><strong>锁降级支持</strong>：支持写锁降级为读锁，提升吞吐性能。</li></ul><blockquote><p>✅ 适用场景：缓存读取、配置中心、共享资源管理等。</p></blockquote><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>QuicKit</strong> 通过提供一系列高性能并发工具，极大简化了任务调度、线程管理与错误恢复的复杂性。无论你在构建分布式系统、服务中间件，还是日常业务逻辑开发，QuicKit 都是一个值得使用的并发基础组件库。</p><hr><p>📦 <strong>项目地址</strong>：<br>👉 <a href="https://github.com/Kingson4Wu/QuicKit">https://github.com/Kingson4Wu/QuicKit</a></p><p>📚 <strong>文档地址</strong>：<br>👉 <a href="https://deepwiki.com/Kingson4Wu/QuicKit">https://deepwiki.com/Kingson4Wu/QuicKit</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在现代软件开发中，高效的任务管理与并发处理是提升系统性能的关键。&lt;strong&gt;QuicKit&lt;/strong&gt; 是一个基于 Java 的工具库，专注于并发任务调度、执行控制、重试机制等通用能力的封装。本文将深入介绍 QuicKit 的核心功能及其实现原理。&lt;/p&gt;
&lt;hr</summary>
      
    
    
    
    
    <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
    <category term="并发" scheme="http://yoursite.com/tags/%E5%B9%B6%E5%8F%91/"/>
    
    <category term="延迟队列" scheme="http://yoursite.com/tags/%E5%BB%B6%E8%BF%9F%E9%98%9F%E5%88%97/"/>
    
    <category term="频率控制" scheme="http://yoursite.com/tags/%E9%A2%91%E7%8E%87%E6%8E%A7%E5%88%B6/"/>
    
    <category term="失败重试" scheme="http://yoursite.com/tags/%E5%A4%B1%E8%B4%A5%E9%87%8D%E8%AF%95/"/>
    
    <category term="读写锁" scheme="http://yoursite.com/tags/%E8%AF%BB%E5%86%99%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>刷LeetCode总结的算法基础和套路</title>
    <link href="http://yoursite.com/2025/07/09/20250709-shua-leetcode-zong-jie-de-suan-fa-ji-chu-he-tao-lu/"/>
    <id>http://yoursite.com/2025/07/09/20250709-shua-leetcode-zong-jie-de-suan-fa-ji-chu-he-tao-lu/</id>
    <published>2025-07-09T07:20:22.000Z</published>
    <updated>2025-07-30T07:17:43.607Z</updated>
    
    <content type="html"><![CDATA[<blockquote><blockquote><p>最近重新刷LeetCode，对一些算法基础和套路做下总结，以做备忘</p></blockquote></blockquote><hr><h1 id="简要分类总结"><a href="#简要分类总结" class="headerlink" title="简要分类总结"></a>简要分类总结</h1><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><ul><li>数组（Array）</li><li>链表（Linked List） </li><li>哈希表（HashMap &#x2F; HashSet）</li><li>堆（Heap）<ul><li>最大堆 &#x2F; 最小堆</li><li>常用于：优先队列、Top K、调度排序</li></ul></li><li>栈 &#x2F; 队列（Stack &#x2F; Queue）<ul><li>DFS 通常借助栈实现，BFS 借助队列</li></ul></li><li>树（Tree）<ul><li>普通二叉树</li><li>二叉搜索树（BST）</li><li>平衡二叉树（AVL &#x2F; 红黑树）</li><li>字典树（Trie）</li><li>线段树（Segment Tree）</li><li>树状数组（Fenwick Tree）</li><li>并查集</li></ul></li><li>图（Graph）<ul><li>表示方式：邻接表、邻接矩阵</li><li>有向图 &#x2F; 无向图，带权图 &#x2F; 无权图</li><li>拓扑排序<ul><li>Kahn 算法（BFS 实现）</li><li>DFS 逆后序（递归 + 回退）</li><li>用于检测有向图中是否存在环、任务调度等</li></ul></li><li>最短路径算法：Dijkstra、Floyd、Bellman-Ford（带权图最短路径）</li><li>最小生成树算法：Kruskal &#x2F; Prim</li><li>稠密图和稀疏图<ul><li>稠密图：边很多，接近“完全图”</li><li>稀疏图：边很少，大多数节点之间没有直接连接</li></ul></li></ul></li></ul><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><ul><li>遍历算法<ul><li>深度优先搜索（DFS）<ul><li>栈结构实现（递归或手动栈）</li><li>回溯 （&#x3D; DFS + 剪枝 + 状态恢复（回退））<ul><li>常用于：组合、排列、子集、数独、八皇后等问题</li></ul></li></ul></li><li>广度优先搜索（BFS）<ul><li>队列结构实现，逐层遍历</li></ul></li></ul></li><li>排序（冒泡、快速、堆）</li><li>快慢指针&#x2F; 双指针</li><li>滑动窗口</li><li>单调栈 &#x2F; 单调队列</li><li>二分查找</li><li>分治算法（Divide &amp; Conquer）</li><li>贪心算法（Greedy）</li><li>动态规划（DP）<ul><li>背包问题（0-1 背包、子集背包、完全背包）</li><li>子序列问题（LIS 最长递增子序列、LCS 最长公共子序列）</li><li>区间 DP &#x2F; 状态压缩 &#x2F; 滚动数组</li></ul></li><li>回溯算法（Backtracking）<ul><li>用于枚举所有可能解，如全排列、组合 &#x2F; 子集</li></ul></li></ul><hr><h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><ul><li><p>与数组不同，链表在构建子链时不会增加额外的空间复杂度。因此可以放心地构造子链，无需考虑节点交换的问题，也不必执着于“原地交换”的思路。</p></li><li><p>使用哨兵节点是一种常见技巧，它可以避免处理头指针等特殊情况，在代码实现上更加简洁。</p><ul><li><strong>链表内指定区间反转：</strong><br>给定一个单链表的头指针 <code>head</code>，以及两个整数 <code>left</code> 和 <code>right</code>（其中 <code>left &lt;= right</code>），请你反转从位置 <code>left</code> 到位置 <code>right</code> 的链表节点，返回反转后的链表。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverseBetween</span><span class="params">(head *ListNode, m <span class="type">int</span>, n <span class="type">int</span>)</span></span> *ListNode &#123;</span><br><span class="line">    <span class="keyword">if</span> m == n || head == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> head</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 哨兵节点，避免处理头指针的特殊情况</span></span><br><span class="line">    dummy := &amp;ListNode&#123;Next: head&#125;</span><br><span class="line">    pre := dummy</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 找到第 m-1 个节点</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt; m; i++ &#123;</span><br><span class="line">        pre = pre.Next</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 反转 m 到 n 之间的节点，采用头插法</span></span><br><span class="line">    start := pre.Next      <span class="comment">// 第 m 个节点</span></span><br><span class="line">    then := start.Next     <span class="comment">// 第 m+1 个节点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n-m; i++ &#123;</span><br><span class="line">        start.Next = then.Next</span><br><span class="line">        then.Next = pre.Next</span><br><span class="line">        pre.Next = then</span><br><span class="line">        then = start.Next</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dummy.Next</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><ul><li><p><strong>二叉树遍历（先序、中序、后序）</strong></p><ul><li>先序（中左右）、中序（左中右）、后序（左右中）</li><li>包含递归与非递归两种实现方式</li><li><strong>DFS</strong>：先序 &#x2F; 中序 &#x2F; 后序（递归 &#x2F; 栈实现）</li><li><strong>BFS</strong>：层序遍历（借助队列实现）</li></ul></li><li><p><strong>二叉查找树（Binary Search Tree，简称 BST）</strong></p><ul><li>左子树所有节点的值均小于根节点，右子树所有节点的值均大于根节点（<strong>不允许等于</strong>）</li><li><strong>中序遍历结果是升序序列</strong></li></ul></li><li><p><strong>完全二叉树</strong></p><ul><li>如果一棵深度为 <code>h</code> 的二叉树，除了第 <code>h</code> 层，其它每一层的节点数都达到最大值，并且第 <code>h</code> 层的节点都尽量靠左排列，则该树是完全二叉树</li><li>第 <code>h</code> 层可能包含 <code>1 ~ 2^h</code> 个节点</li><li><strong>堆</strong>（大顶堆 &#x2F; 小顶堆）是一种基于完全二叉树的结构</li></ul></li><li><p><strong>平衡二叉树（Balanced Binary Tree）</strong></p><ul><li>要么是空树，要么满足以下条件：左右子树的高度差的绝对值不超过 1，且左右子树也分别是平衡二叉树</li></ul></li></ul><h2 id="二叉树遍历"><a href="#二叉树遍历" class="headerlink" title="二叉树遍历"></a>二叉树遍历</h2><ul><li><p>树的遍历主要分为两类：</p><ul><li><p><strong>广度优先遍历（BFS）</strong>：也称层序遍历，使用队列实现</p></li><li><p><strong>深度优先遍历（DFS）</strong>：包括先序、中序、后序三种形式，可使用递归或栈实现</p><ul><li>递归</li><li>栈</li></ul></li></ul></li><li><p><strong>深度优先遍历（DFS）说明</strong></p><ul><li>使用递归实现 DFS 时，虽然代码中未显式使用栈，但其实是借助系统的 <strong>调用栈（Call Stack）</strong> 来进行函数的递归与回溯</li></ul></li></ul><h3 id="先序遍历（前序）"><a href="#先序遍历（前序）" class="headerlink" title="先序遍历（前序）"></a>先序遍历（前序）</h3><ul><li><p>栈实现流程：</p><ol><li>循环条件：<code>root != nil || len(stack) &gt; 0</code></li><li>若 <code>root != nil</code>，访问节点、入栈、转向左子树</li><li>否则出栈、转向右子树</li></ol></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(root *TreeNode)</span></span> preorder() []<span class="type">int</span> &#123;</span><br><span class="line">res := []<span class="type">int</span>&#123;&#125;</span><br><span class="line"><span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line">stack := []*TreeNode&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> root != <span class="literal">nil</span> || <span class="built_in">len</span>(stack) &gt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">if</span> root != <span class="literal">nil</span> &#123;</span><br><span class="line">res = <span class="built_in">append</span>(res, root.data)      <span class="comment">// 访问当前节点</span></span><br><span class="line">stack = <span class="built_in">append</span>(stack, root)       <span class="comment">// 入栈</span></span><br><span class="line">root = root.Lchild                <span class="comment">// 向左子树移动</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">root = stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>]        <span class="comment">// 出栈</span></span><br><span class="line">stack = stack[:<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">root = root.Rchild                <span class="comment">// 转向右子树</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h3><ul><li><p>栈实现流程：</p><ol><li>循环条件：<code>root != nil || len(stack) &gt; 0</code></li><li>若 <code>root != nil</code>，将当前节点入栈并转向左子树</li><li>否则出栈并访问节点</li><li>然后转向右子树</li></ol></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(root *TreeNode)</span></span> inorder() []<span class="type">int</span> &#123;</span><br><span class="line">res := []<span class="type">int</span>&#123;&#125;</span><br><span class="line"><span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line">stack := []*TreeNode&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> root != <span class="literal">nil</span> || <span class="built_in">len</span>(stack) &gt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">if</span> root != <span class="literal">nil</span> &#123;</span><br><span class="line">stack = <span class="built_in">append</span>(stack, root)       <span class="comment">// 入栈，等待回溯</span></span><br><span class="line">root = root.Lchild                <span class="comment">// 向左走</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">root = stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>]        <span class="comment">// 出栈</span></span><br><span class="line">stack = stack[:<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">res = <span class="built_in">append</span>(res, root.data)      <span class="comment">// 访问节点</span></span><br><span class="line">root = root.Rchild                <span class="comment">// 转向右子树</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>示例题目：判断一棵二叉树是否为二叉搜索树</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isValidBST</span><span class="params">(root *TreeNode)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    stack := []*TreeNode&#123;&#125;</span><br><span class="line">    inorder := math.MinInt64</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">len</span>(stack) &gt; <span class="number">0</span> || root != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> root != <span class="literal">nil</span> &#123;</span><br><span class="line">            stack = <span class="built_in">append</span>(stack, root)</span><br><span class="line">            root = root.Left</span><br><span class="line">        &#125;</span><br><span class="line">        root = stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">        stack = stack[:<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">if</span> root.Val &lt;= inorder &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        inorder = root.Val</span><br><span class="line">        root = root.Right</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h3><ul><li>非递归实现关键：访问节点需保证其左右子树均已访问或为空</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(root *TreeNode)</span></span> Postorder() []<span class="type">int</span> &#123;</span><br><span class="line">res := []<span class="type">int</span>&#123;&#125;</span><br><span class="line"><span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line">stack := []*TreeNode&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> pre *TreeNode = <span class="literal">nil</span></span><br><span class="line">stack = <span class="built_in">append</span>(stack, root)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">len</span>(stack) &gt; <span class="number">0</span> &#123;</span><br><span class="line">cur := stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line"><span class="comment">// 如果是叶子节点，或子节点已访问，则访问当前节点</span></span><br><span class="line"><span class="keyword">if</span> (cur.Lchild == <span class="literal">nil</span> &amp;&amp; cur.Rchild == <span class="literal">nil</span>) || (pre != <span class="literal">nil</span> &amp;&amp; (pre == cur.Lchild || pre == cur.Rchild)) &#123;</span><br><span class="line">res = <span class="built_in">append</span>(res, cur.data)</span><br><span class="line">stack = stack[:<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">pre = cur <span class="comment">// 标记当前已访问</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> cur.Rchild != <span class="literal">nil</span> &#123;</span><br><span class="line">stack = <span class="built_in">append</span>(stack, cur.Rchild)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> cur.Lchild != <span class="literal">nil</span> &#123;</span><br><span class="line">stack = <span class="built_in">append</span>(stack, cur.Lchild)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除二叉搜索树中的节点"><a href="#删除二叉搜索树中的节点" class="headerlink" title="删除二叉搜索树中的节点"></a>删除二叉搜索树中的节点</h2><ul><li><p>删除节点的四种情况：</p><ol><li><p><strong>叶子节点（无子节点）</strong></p><ul><li>直接删除，返回 <code>nil</code>。</li></ul></li><li><p><strong>只有左子树</strong></p><ul><li>用左子节点替代当前节点，返回 <code>root.Left</code>。</li></ul></li><li><p><strong>只有右子树</strong></p><ul><li>用右子节点替代当前节点，返回 <code>root.Right</code>。</li></ul></li><li><p><strong>左右子树都有</strong></p><ul><li>找右子树中最小的节点（即<strong>后继 successor</strong>），</li><li>用 successor 的值替代当前节点的值，</li><li>然后在右子树中递归删除该 successor 节点。</li></ul></li></ol></li><li><p>情况 4 的说明：</p><ul><li>**右子树的最小节点（successor）**不一定是叶子节点；</li><li>它一定没有左子节点，但<strong>可能有右子节点</strong>。</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  10                        11        </span><br><span class="line"> /  \                      /  \</span><br><span class="line">5    15                   5   15</span><br><span class="line">    /                         /  </span><br><span class="line">   11       --&gt;             13</span><br><span class="line">     \                     /  \  </span><br><span class="line">     13                   12  14</span><br><span class="line">    /  \</span><br><span class="line">   12   14</span><br></pre></td></tr></table></figure><ul><li><p>什么是“递归删除 successor 节点”？</p><ul><li>当我们删除一个节点（设为 <code>root</code>）且其有左右子树时，选择右子树中最小节点（successor）作为替代；</li><li>但此时右子树中仍存在原来的 successor 节点，因此需在右子树中递归删除该节点；</li><li>这样才能确保整棵树依然符合**二叉搜索树（BST）**的性质。</li></ul></li></ul><h2 id="实现示例"><a href="#实现示例" class="headerlink" title="实现示例"></a>实现示例</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deleteNode</span><span class="params">(root *TreeNode, key <span class="type">int</span>)</span></span> *TreeNode &#123;</span><br><span class="line"><span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> key &lt; root.Val &#123;</span><br><span class="line">root.Left = deleteNode(root.Left, key)</span><br><span class="line"><span class="keyword">return</span> root</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> key &gt; root.Val &#123;</span><br><span class="line">root.Right = deleteNode(root.Right, key)</span><br><span class="line"><span class="keyword">return</span> root</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//找到要删除的结点</span></span><br><span class="line"><span class="keyword">if</span> root.Left == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> root.Right</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> root.Right == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> root.Left</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 情况4：左右子树都有</span></span><br><span class="line"><span class="comment">//需要找右子树的最小值的结点, 最小的一定在最左边</span></span><br><span class="line">successor := root.Right</span><br><span class="line"><span class="keyword">for</span> successor.Left != <span class="literal">nil</span> &#123;</span><br><span class="line">successor = successor.Left</span><br><span class="line">&#125;</span><br><span class="line">successor.Right = deleteNode(root.Right, successor.Val)</span><br><span class="line">successor.Left = root.Left</span><br><span class="line"><span class="keyword">return</span> successor</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="树状数组（Fenwick-Tree-x2F-Binary-Indexed-Tree）"><a href="#树状数组（Fenwick-Tree-x2F-Binary-Indexed-Tree）" class="headerlink" title="树状数组（Fenwick Tree &#x2F; Binary Indexed Tree）"></a>树状数组（Fenwick Tree &#x2F; Binary Indexed Tree）</h2><ul><li><p><strong>适用场景</strong>：一维前缀和问题（如区间求和、频率统计等）</p></li><li><p><strong>核心思想</strong>：</p><ul><li>利用二进制的最低位（lowbit）来定位负责某段区间的节点</li><li>是一种空间压缩形式的前缀树结构</li></ul></li><li><p>一种可动态维护序列前缀和的数据结构，支持以下操作：</p><ul><li>**单点更新 <code>update(i, v)</code>**：将第 <code>i</code> 个位置的值增加 <code>v</code>（如本题中 <code>v = 1</code>）</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">update</span><span class="params">(i <span class="type">int</span>, v <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i &lt;= n &#123;  <span class="comment">// n 是树状数组的长度</span></span><br><span class="line">        bit[i] += v</span><br><span class="line">        i += i &amp; -i  <span class="comment">// 跳到下一个负责这个区间的节点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>**区间查询 <code>query(i)</code>**：查询区间 <code>[1..i]</code> 的前缀和</p><ul><li>通过跳跃式回溯累加，效率高</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询 bit[1] 到 bit[i] 的前缀和</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">query</span><span class="params">(i <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    res := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i &gt; <span class="number">0</span> &#123;</span><br><span class="line">        res += bit[i]</span><br><span class="line">        i -= i &amp; -i  <span class="comment">// i &amp; -i 取最低位的 1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="query-p-的跳跃计算示意"><a href="#query-p-的跳跃计算示意" class="headerlink" title="query(p) 的跳跃计算示意"></a>query(p) 的跳跃计算示意</h3><ul><li>树状数组 <code>bit[]</code> 示意如下：</li></ul><table><thead><tr><th>下标（i）</th><th>bit[i]</th><th>表示的区间</th></tr></thead><tbody><tr><td>1</td><td>2</td><td>sum(1)</td></tr><tr><td>2</td><td>1</td><td>sum(1..2)</td></tr><tr><td>3</td><td>0</td><td>sum(3)</td></tr><tr><td>4</td><td>3</td><td>sum(1..4)</td></tr><tr><td>5</td><td>0</td><td>sum(5)</td></tr><tr><td>6</td><td>0</td><td>sum(5..6)</td></tr><tr><td>7</td><td>0</td><td>sum(7)</td></tr><tr><td>8</td><td>?</td><td>sum(1..8)</td></tr></tbody></table><ul><li><p>查询 <code>query(5)</code> 实际执行过程如下：</p><ul><li>第一次：<code>p = 5</code> → <code>sum += bit[5] = 0</code> → <code>p = 5 - 1 = 4</code></li><li>第二次：<code>p = 4</code> → <code>sum += bit[4] = 3</code> → <code>p = 4 - 4 = 0</code></li><li>退出循环，结果为 <code>sum = 3</code></li></ul></li><li><p>实际加了哪些区间：</p><ul><li><code>bit[5]</code> → 表示 <code>[5]</code></li><li><code>bit[4]</code> → 表示 <code>[1..4]</code></li><li>所以 <code>sum[1..5] = bit[5] + bit[4]</code></li></ul></li></ul><h3 id="为什么-x-amp-x-能取得-x-的最低位-1？"><a href="#为什么-x-amp-x-能取得-x-的最低位-1？" class="headerlink" title="为什么 x &amp; (-x) 能取得 x 的最低位 1？"></a>为什么 <code>x &amp; (-x)</code> 能取得 <code>x</code> 的最低位 1？</h3><ul><li><p>原理：使用补码</p><ul><li><code>-x = ^x + 1</code>（按位取反再加 1）</li></ul></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x     = <span class="number">00001100</span></span><br><span class="line">-x    = <span class="number">11110100</span></span><br><span class="line">----------------</span><br><span class="line">x &amp; -x = <span class="number">00000100</span>  <span class="comment">// 取出最低位的 1</span></span><br></pre></td></tr></table></figure><ul><li>补码运算确保 <code>x &amp; -x</code> 恰好保留最低位的 1，其它位互斥</li></ul><h3 id="树状数组的安全构造方式"><a href="#树状数组的安全构造方式" class="headerlink" title="树状数组的安全构造方式"></a>树状数组的安全构造方式</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 计算最小安全长度（为离散化后的数组保留空间）</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getSafeFenwickArraySize</span><span class="params">(n <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    nextPowerOf2 := <span class="number">1</span> &lt;&lt; bits.Len(<span class="type">uint</span>(n))</span><br><span class="line">    <span class="keyword">return</span> nextPowerOf2 + <span class="number">1</span> <span class="comment">// +1 处理边界</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例题：315-计算右侧小于当前元素的个数"><a href="#例题：315-计算右侧小于当前元素的个数" class="headerlink" title="例题：315. 计算右侧小于当前元素的个数"></a>例题：<a href="https://leetcode.cn/problems/count-of-smaller-numbers-after-self/description/">315. 计算右侧小于当前元素的个数</a></h2><ul><li><strong>题意</strong>：返回数组 <code>counts</code>，其中 <code>counts[i]</code> 表示 <code>nums[i]</code> 右侧比它小的元素数量</li><li><strong>解法</strong>：树状数组 + 离散化优化空间</li></ul><h3 id="解题流程："><a href="#解题流程：" class="headerlink" title="解题流程："></a>解题流程：</h3><ol><li><p><strong>离散化</strong>：将原数组值映射到连续整数范围（防止值域过大）</p></li><li><p><strong>从后向前遍历</strong>：</p><ul><li>查询当前数 <strong>前面比它小</strong> 的数的出现次数 → <code>query(id - 1)</code></li><li>更新当前数出现次数 → <code>update(id)</code></li></ul></li><li><p><strong>树状数组操作时间复杂度：O(log n)</strong></p></li></ol><h3 id="实现代码："><a href="#实现代码：" class="headerlink" title="实现代码："></a>实现代码：</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">countSmaller</span><span class="params">(nums []<span class="type">int</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">    <span class="comment">// 离散化映射：数值 -&gt; 索引</span></span><br><span class="line">    numToId := <span class="function"><span class="keyword">func</span><span class="params">(nums []<span class="type">int</span>)</span></span> <span class="keyword">map</span>[<span class="type">int</span>]<span class="type">int</span> &#123;</span><br><span class="line">        set := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">        <span class="keyword">for</span> _, num := <span class="keyword">range</span> nums &#123;</span><br><span class="line">            set[num] = <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        a := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">0</span>, <span class="built_in">len</span>(set))</span><br><span class="line">        <span class="keyword">for</span> num := <span class="keyword">range</span> set &#123;</span><br><span class="line">            a = <span class="built_in">append</span>(a, num)</span><br><span class="line">        &#125;</span><br><span class="line">        sort.Ints(a)</span><br><span class="line">        m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">int</span>)</span><br><span class="line">        <span class="keyword">for</span> i, num := <span class="keyword">range</span> a &#123;</span><br><span class="line">            m[num] = i + <span class="number">1</span>  <span class="comment">// 从 1 开始</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> m</span><br><span class="line">    &#125;(nums)</span><br><span class="line"></span><br><span class="line">    c := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="built_in">len</span>(nums)+<span class="number">5</span>)</span><br><span class="line">    lowBit := <span class="function"><span class="keyword">func</span><span class="params">(x <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x &amp; -x</span><br><span class="line">    &#125;</span><br><span class="line">    query := <span class="function"><span class="keyword">func</span><span class="params">(pos <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">        ret := <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> pos &gt; <span class="number">0</span> &#123;</span><br><span class="line">            ret += c[pos]</span><br><span class="line">            pos -= lowBit(pos)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    &#125;</span><br><span class="line">    update := <span class="function"><span class="keyword">func</span><span class="params">(pos <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> pos &lt; <span class="built_in">len</span>(c) &#123;</span><br><span class="line">            c[pos]++</span><br><span class="line">            pos += lowBit(pos)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ans := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="built_in">len</span>(nums))</span><br><span class="line">    <span class="keyword">for</span> i := <span class="built_in">len</span>(nums) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i-- &#123;</span><br><span class="line">        id := numToId[nums[i]]</span><br><span class="line">        ans[i] = query(id - <span class="number">1</span>)</span><br><span class="line">        update(id)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线段树（Segment-Tree）"><a href="#线段树（Segment-Tree）" class="headerlink" title="线段树（Segment Tree）"></a>线段树（Segment Tree）</h2><ul><li><p><strong>适用场景</strong>：支持区间查询 + 单点或区间修改等</p></li><li><p><strong>典型用途</strong>：</p><ul><li>区间最大值、最小值、区间和</li><li>区间赋值、区间加法（懒标记 &#x2F; Lazy Propagation）</li></ul></li><li><p><strong>结构特征</strong>：</p><ul><li>完全二叉树结构</li><li>每个节点维护一个区间的信息</li><li>父节点信息由左右子树合并而来</li></ul></li></ul><h2 id="例题：699-掉落的方块"><a href="#例题：699-掉落的方块" class="headerlink" title="例题：699. 掉落的方块"></a>例题：<a href="https://leetcode.cn/problems/falling-squares/description/">699. 掉落的方块</a></h2><ul><li>问题：模拟落方块过程，返回每一步的最高高度</li><li>典型的线段树区间最大值更新与查询问题</li></ul><h3 id="解题流程：-1"><a href="#解题流程：-1" class="headerlink" title="解题流程："></a>解题流程：</h3><ol><li><p><strong>离散化所有坐标</strong>：防止空间浪费（坐标最大值可达 10^9）</p></li><li><p><strong>使用线段树</strong>维护每个区间的最大高度</p></li><li><p><strong>每次插入一个方块</strong>：</p><ul><li>查询当前 <code>[left, right]</code> 区间的最大高度 <code>h</code></li><li>更新该区间的值为 <code>h + sideLength</code></li><li>记录全局最大高度</li></ul></li></ol><h2 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h2><h2 id="例题：684-冗余连接"><a href="#例题：684-冗余连接" class="headerlink" title="例题：684. 冗余连接"></a>例题：<a href="https://leetcode.cn/problems/redundant-connection/description">684. 冗余连接</a></h2><ul><li>在含有一个环的无向图中找出一条可删边使其变为树</li></ul><h3 id="解题流程：-2"><a href="#解题流程：-2" class="headerlink" title="解题流程："></a>解题流程：</h3><ul><li>使用并查集判断边是否构成环：<ul><li>初始化每个节点为不同集合；<ul><li>遍历 edges 中每条边 (u, v)：<ul><li>如果 u 与 v 已在同一集合中，说明这条边构成环 → 返回它；</li><li>否则合并 u 和 v；</li></ul></li></ul></li><li>因为题目要求返回「最后构成环的边」，只需从前往后遍历一次即可。</li></ul></li></ul><h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findRedundantConnection</span><span class="params">(edges [][]<span class="type">int</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">    parent := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="built_in">len</span>(edges)+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> parent &#123;</span><br><span class="line">        parent[i] = i</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> find <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>)</span></span> <span class="type">int</span></span><br><span class="line">    find = <span class="function"><span class="keyword">func</span><span class="params">(x <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> parent[x] != x &#123;</span><br><span class="line">            parent[x] = find(parent[x])</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> parent[x]</span><br><span class="line">    &#125;</span><br><span class="line">    union := <span class="function"><span class="keyword">func</span><span class="params">(from, to <span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">        x, y := find(from), find(to)</span><br><span class="line">        <span class="keyword">if</span> x == y &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        parent[x] = y</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> _, e := <span class="keyword">range</span> edges &#123;</span><br><span class="line">        <span class="keyword">if</span> !union(e[<span class="number">0</span>], e[<span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">return</span> e</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h1><h3 id="基本性质与操作（以最大堆为例）"><a href="#基本性质与操作（以最大堆为例）" class="headerlink" title="基本性质与操作（以最大堆为例）"></a>基本性质与操作（以最大堆为例）</h3><ol><li><p>最大堆的性质</p><ul><li>最大堆是一种<strong>完全二叉树</strong>，满足每个父节点的值都<strong>大于或等于</strong>其左右子节点的值。</li><li>虽然逻辑结构为树，实际通常使用<strong>数组</strong>来实现。</li></ul></li><li><p>元素的插入与删除方式</p><ul><li><p><strong>插入新节点</strong>：将元素追加到数组末尾，然后进行<strong>向上调整（Sift-Up）</strong>，直到堆序性恢复。</p></li><li><p><strong>删除任意节点</strong>：将目标节点与数组最后一个元素交换，然后删除最后一个元素：</p><ul><li>若新值<strong>大于父节点</strong> → 进行<strong>向上调整</strong>；</li><li>若新值<strong>小于任一子节点</strong> → 进行<strong>向下调整</strong>。</li></ul></li></ul></li><li><p>特殊操作：删除堆顶（最大值）</p><ul><li>删除堆顶（即数组第一个元素）时，将最后一个元素移至根节点位置，再进行<strong>向下调整（Sift-Down）</strong>，以恢复堆的结构。</li></ul></li><li><p>时间复杂度分析</p><ul><li><p><strong>插入</strong>或<strong>删除</strong>操作中，最多需要调整一条从叶节点到根节点或从根节点到叶节点的路径，因此时间复杂度均为：</p><blockquote><p>✅ <strong>O(log n)</strong></p></blockquote></li></ul></li><li><p>与二分查找的比较</p><ul><li><p><strong>二分查找</strong>的时间复杂度也是：</p><blockquote><p>✅ <strong>O(log n)</strong></p></blockquote></li><li><p>不过它依赖于<strong>有序数组</strong>，而最大堆只维护<strong>局部有序结构</strong>（即每个父节点大于子节点）。两者在原理和应用场景上存在本质区别。</p></li></ul></li></ol><h1 id="图"><a href="#图" class="headerlink" title="图"></a>图</h1><h2 id="无向图"><a href="#无向图" class="headerlink" title="无向图"></a>无向图</h2><ul><li><p>由两个部分组成：</p><ul><li><strong>顶点（Vertices）</strong>：图中的节点。</li><li><strong>边（Edges）</strong>：连接两个顶点的线段。</li></ul></li><li><p><strong>边用集合表示</strong>：一条边连接两个顶点，用 <code>&#123;A, B&#125;</code> 表示（不区分方向），区别于有向图中的 <code>(A, B)</code>。<br><strong>度（Degree）</strong>：一个顶点的度是连接它的边的数量（不考虑方向）。</p></li><li><p>无向图可以表示为：</p><ul><li>顶点：<code>&#123;A, B, C&#125;</code></li><li>边：<code>&#123;&#123;A, B&#125;, &#123;B, C&#125;&#125;</code></li></ul></li><li><p>图形示意：</p><ul><li><code>A —— B —— C</code></li></ul></li><li><p><strong>无向图的深度优先搜索（DFS）</strong></p><ul><li>从某个顶点开始；</li><li>标记为“已访问”；</li><li>遍历它的邻居；</li><li>对每一个未访问的邻居递归执行 DFS；</li><li>如果遇到没有未访问邻居的死胡同，则回退。</li></ul></li><li><p><strong>递归实现 DFS</strong>：</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">graph, start, visited=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> visited <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        visited = <span class="built_in">set</span>()</span><br><span class="line">    <span class="built_in">print</span>(start)  <span class="comment"># 访问当前节点</span></span><br><span class="line">    visited.add(start)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> neighbor <span class="keyword">in</span> graph[start]:</span><br><span class="line">        <span class="keyword">if</span> neighbor <span class="keyword">not</span> <span class="keyword">in</span> visited:</span><br><span class="line">            dfs(graph, neighbor, visited)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用</span></span><br><span class="line">dfs(graph, <span class="string">&#x27;A&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>非递归实现（使用栈）</strong>：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">dfs_iterative</span>(<span class="params">graph, start</span>):</span><br><span class="line">    visited = <span class="built_in">set</span>()</span><br><span class="line">    stack = [start]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> stack:</span><br><span class="line">        node = stack.pop()</span><br><span class="line">        <span class="keyword">if</span> node <span class="keyword">not</span> <span class="keyword">in</span> visited:</span><br><span class="line">            <span class="built_in">print</span>(node)</span><br><span class="line">            visited.add(node)</span><br><span class="line">            <span class="comment"># 为了保持访问顺序，反转邻居顺序</span></span><br><span class="line">            <span class="keyword">for</span> neighbor <span class="keyword">in</span> <span class="built_in">reversed</span>(graph[node]):</span><br><span class="line">                <span class="keyword">if</span> neighbor <span class="keyword">not</span> <span class="keyword">in</span> visited:</span><br><span class="line">                    stack.append(neighbor)</span><br><span class="line"></span><br><span class="line">dfs_iterative(graph, <span class="string">&#x27;A&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li><p><strong>无向图 DFS 的注意事项</strong>：</p><ul><li><strong>防止死循环</strong>：必须使用 <code>visited</code> 集合记录已访问节点，因为无向图的边是双向的，若不记录，会在 A-B-A-B 间无限循环。</li><li><strong>图不连通的情况</strong>：只对一个起点 DFS 无法遍历所有节点。可对所有节点进行一次 DFS。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">dfs_all</span>(<span class="params">graph</span>):</span><br><span class="line">    visited = <span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">for</span> node <span class="keyword">in</span> graph:</span><br><span class="line">        <span class="keyword">if</span> node <span class="keyword">not</span> <span class="keyword">in</span> visited:</span><br><span class="line">            dfs(graph, node, visited)</span><br></pre></td></tr></table></figure><h2 id="有向图"><a href="#有向图" class="headerlink" title="有向图"></a>有向图</h2><h3 id="有向图的拓扑排序"><a href="#有向图的拓扑排序" class="headerlink" title="有向图的拓扑排序"></a>有向图的拓扑排序</h3><ul><li><p>拓扑排序（Topological Sorting）适用于 <strong>有向无环图（DAG，Directed Acyclic Graph）</strong>。其目标是将所有顶点排成一个线性序列，使得每条边 <code>u → v</code> 中，顶点 <code>u</code> 排在 <code>v</code> 的前面。</p></li><li><p>举例说明：</p><ul><li><strong>学习顺序</strong>：先学 A，再学 B，最后学 C。</li><li><strong>任务依赖</strong>：任务 B 必须在任务 A 完成后执行。</li><li>将任务抽象为节点，依赖关系为边，则问题转化为 DAG 的拓扑排序。</li></ul></li><li><p><strong>适用范围</strong>：</p><ul><li>必须是有向无环图（DAG）。</li><li>若图中存在环，则无法进行拓扑排序。</li></ul></li><li><p><strong>拓扑排序的两种常用算法</strong>：</p><ul><li><p><strong>方法一：Kahn 算法（入度表 + 队列）</strong></p><ul><li>统计所有顶点的入度。</li><li>将入度为 0 的顶点加入队列。</li><li>从队列中取出顶点 <code>u</code> 加入结果序列。</li><li>删除 <code>u</code> 指向的边（使相邻顶点 <code>v</code> 入度减 1）。</li><li>若 <code>v</code> 入度变为 0，加入队列。</li><li>重复以上过程直至队列为空。</li><li>若最终结果序列包含所有节点，则拓扑排序成功；否则图中存在环。</li></ul></li><li><p><strong>方法二：DFS 法（后序入栈）</strong></p><ul><li>从未访问的节点开始 DFS。</li><li>递归访问其所有后继节点。</li><li>当前节点所有后继访问完成后，将其压入栈中。</li><li>所有节点访问完成后，从栈顶依次弹出即为拓扑序列。</li></ul></li></ul></li><li><p><strong>常见应用场景</strong>：</p><ul><li>编译器模块依赖分析</li><li>项目任务调度</li><li>数据处理管道排序</li><li>课程安排问题（Leetcode 207、210）</li></ul></li></ul><h3 id="Kahn-算法（Golang-实现）："><a href="#Kahn-算法（Golang-实现）：" class="headerlink" title="Kahn 算法（Golang 实现）："></a>Kahn 算法（Golang 实现）：</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 拓扑排序（Kahn 算法）</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">topologicalSort</span><span class="params">(graph <span class="keyword">map</span>[<span class="type">string</span>][]<span class="type">string</span>)</span></span> ([]<span class="type">string</span>, <span class="type">bool</span>) &#123;</span><br><span class="line">  inDegree := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>)</span><br><span class="line">  <span class="keyword">var</span> result []<span class="type">string</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化入度表</span></span><br><span class="line">  <span class="keyword">for</span> u := <span class="keyword">range</span> graph &#123;</span><br><span class="line">    <span class="keyword">if</span> _, ok := inDegree[u]; !ok &#123;</span><br><span class="line">      inDegree[u] = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> graph[u] &#123;</span><br><span class="line">      inDegree[v]++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 入度为 0 的节点入队</span></span><br><span class="line">  <span class="keyword">var</span> queue []<span class="type">string</span></span><br><span class="line">  <span class="keyword">for</span> node, deg := <span class="keyword">range</span> inDegree &#123;</span><br><span class="line">    <span class="keyword">if</span> deg == <span class="number">0</span> &#123;</span><br><span class="line">      queue = <span class="built_in">append</span>(queue, node)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 拓扑排序</span></span><br><span class="line">  <span class="keyword">for</span> <span class="built_in">len</span>(queue) &gt; <span class="number">0</span> &#123;</span><br><span class="line">    node := queue[<span class="number">0</span>]</span><br><span class="line">    queue = queue[<span class="number">1</span>:]</span><br><span class="line">    result = <span class="built_in">append</span>(result, node)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, neighbor := <span class="keyword">range</span> graph[node] &#123;</span><br><span class="line">      inDegree[neighbor]--</span><br><span class="line">      <span class="keyword">if</span> inDegree[neighbor] == <span class="number">0</span> &#123;</span><br><span class="line">        queue = <span class="built_in">append</span>(queue, neighbor)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断是否存在环</span></span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">len</span>(result) != <span class="built_in">len</span>(inDegree) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result, <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  graph := <span class="keyword">map</span>[<span class="type">string</span>][]<span class="type">string</span>&#123;</span><br><span class="line">    <span class="string">&quot;A&quot;</span>: &#123;<span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>&#125;,</span><br><span class="line">    <span class="string">&quot;B&quot;</span>: &#123;<span class="string">&quot;D&quot;</span>&#125;,</span><br><span class="line">    <span class="string">&quot;C&quot;</span>: &#123;<span class="string">&quot;D&quot;</span>&#125;,</span><br><span class="line">    <span class="string">&quot;D&quot;</span>: &#123;&#125;,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  order, ok := topologicalSort(graph)</span><br><span class="line">  <span class="keyword">if</span> !ok &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;图中存在环，无法拓扑排序&quot;</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;拓扑排序结果：&quot;</span>, order)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>Kahn 算法的核心逻辑</strong>：</p><ul><li>每次只处理入度为 0 的节点，即“无依赖”的任务。</li><li>处理后从图中移除该节点影响（即更新其邻接节点的入度）。</li><li>保证每个节点的依赖都先被处理。</li></ul></li><li><p><strong>为什么 Kahn 算法只适用于 DAG？</strong></p><ul><li>如果存在环，某些节点将永远无法变为入度 0，导致无法完成排序。</li><li>若排序结果节点数 &lt; 总节点数，说明图中存在环。</li></ul></li></ul><p>✅ <strong>因此：Kahn 算法不仅能进行拓扑排序，还能用于判断图中是否存在环。</strong></p><ul><li><strong>Kahn 算法实质上是 BFS 的变种</strong>，关注“入度为 0”的节点而不是“邻接点”。</li></ul><h3 id="Kahn-算法-vs-广度优先搜索（BFS）"><a href="#Kahn-算法-vs-广度优先搜索（BFS）" class="headerlink" title="Kahn 算法 vs 广度优先搜索（BFS）"></a>Kahn 算法 vs 广度优先搜索（BFS）</h3><table><thead><tr><th>项目</th><th>Kahn 算法（拓扑排序）</th><th>广度优先搜索（BFS）</th></tr></thead><tbody><tr><td>遍历方式</td><td>一层一层，按入度为 0 的点</td><td>一层一层，按邻接点</td></tr><tr><td>使用数据结构</td><td>队列（Queue）</td><td>队列（Queue）</td></tr><tr><td>访问顺序</td><td>所有无依赖的点先访问</td><td>当前点的所有邻居先访问</td></tr><tr><td>主要用途</td><td>拓扑排序 &#x2F; 检测环</td><td>遍历所有可达节点</td></tr></tbody></table><blockquote><p><strong>Kahn 算法 &#x3D; BFS 的拓扑排序版本</strong>，核心是基于“入度为 0”的节点层层推进，保证拓扑顺序合法。</p></blockquote><hr><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><ol><li><p><code>for lower &lt;= upper</code> —— <strong>闭区间版本 <code>[lower, upper]</code></strong></p><ul><li><p><code>mid = (lower + upper) / 2</code>（向下取整）</p><ul><li>如果 <code>mid</code> 满足条件（要往左找更小或更左的）：<code>upper = mid - 1</code></li><li>如果不满足条件（要往右找）：<code>lower = mid + 1</code></li></ul></li><li><p><strong>是否跳过了 mid？</strong></p><ul><li>表面上看，<code>upper = mid - 1</code> 似乎跳过了 <code>mid</code></li><li>实际上，<code>mid</code> 已经被判断过，<code>lower</code> 没变，下一轮中 <code>lower == mid</code></li><li>循环仍会继续执行，直到 <code>lower &gt; upper</code> 时退出</li></ul></li><li><p><strong>示例分析：</strong></p><ul><li>在数组 <code>[3, 4, 5]</code> 中查找“第一个大于等于 4 的数”</li><li>初始区间为 <code>[3, 5]</code>，<code>mid = 4</code></li><li><code>mid = 4</code> 满足条件 → <code>upper = 3</code></li><li>下一轮区间为 <code>[3, 3]</code>，<code>mid = 3</code></li><li><code>mid = 3</code> 不满足条件 → <code>lower = 4</code></li><li>区间变为 <code>[4, 3]</code>，循环结束</li><li>返回 <code>lower = 4</code>，即最小满足条件的值</li></ul></li></ul></li><li><p><code>for lower &lt; upper</code> —— <strong>半开区间版本 <code>[lower, upper)</code></strong></p><ul><li>如果 <code>mid</code> 满足条件（要往左找）：<code>upper = mid</code></li><li>如果不满足条件：<code>lower = mid + 1</code></li><li>循环结束时 <code>lower == upper</code>，即为最小满足条件的位置</li></ul></li></ol><h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><ul><li>相邻元素两两比较并交换，使用双重循环；</li><li>若某次遍历中未发生任何交换，说明数组已有序，可提前结束；</li><li>代码示例：</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bubbleSort</span><span class="params">(arr []<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(arr)</span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">        unChanged := <span class="literal">true</span></span><br><span class="line">        <span class="keyword">for</span> j := <span class="number">0</span>; j &lt; n-i<span class="number">-1</span>; j++ &#123;</span><br><span class="line">            <span class="keyword">if</span> arr[j] &gt; arr[j+<span class="number">1</span>] &#123;</span><br><span class="line">                arr[j], arr[j+<span class="number">1</span>] = arr[j+<span class="number">1</span>], arr[j]</span><br><span class="line">                unChanged = <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> unChanged &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><ul><li><p>通过一趟排序将序列划分为左右两个子区间，其中左边的元素都小于右边的元素，再分别对左右区间递归排序，从而实现整体有序。</p></li><li><p>分区逻辑说明（采用首元素为基准）：</p><ul><li>交替比较并交换元素值，最终确定基准值的位置；</li><li>每步都需判断 <code>low &lt; high</code>，不要遗漏；</li><li><code>high--</code> 与 <code>low++</code> 的条件是与 <code>temp</code>（基准值）进行比较。</li></ul></li><li><p>TopK 剪枝优化（用于只需前K个元素的场景）：</p><ul><li>若 <code>mid &gt; k</code>，递归处理左边；</li><li>若 <code>mid &lt; k</code>，递归处理右边。</li></ul></li><li><p>分区函数定义模板：</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">partition</span><span class="params">(arr []<span class="type">int</span>, low, high <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="comment">// 首先从 high 开始比较，循环 high--，跳出后赋值；</span></span><br><span class="line">    <span class="comment">// 然后从 low 开始比较，同理；</span></span><br><span class="line">    <span class="comment">// 每步都要判断 low &lt; high；</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>快速排序递归模板：</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> quick <span class="function"><span class="keyword">func</span><span class="params">(arr []<span class="type">int</span>, start, end <span class="type">int</span>)</span></span></span><br><span class="line">quick = <span class="function"><span class="keyword">func</span><span class="params">(arr []<span class="type">int</span>, start, end <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>代码示例：</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 升序快速排序</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">quickSort</span><span class="params">(arr []<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> quick <span class="function"><span class="keyword">func</span><span class="params">(arr []<span class="type">int</span>, start, end <span class="type">int</span>)</span></span></span><br><span class="line">    quick = <span class="function"><span class="keyword">func</span><span class="params">(arr []<span class="type">int</span>, start, end <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> start &gt;= end &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        mid := partition(arr, start, end)</span><br><span class="line">        quick(arr, start, mid)</span><br><span class="line">        quick(arr, mid+<span class="number">1</span>, end)</span><br><span class="line">    &#125;</span><br><span class="line">    quick(arr, <span class="number">0</span>, <span class="built_in">len</span>(arr)<span class="number">-1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分区函数，low &lt; high 判断不要漏！</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">partition</span><span class="params">(arr []<span class="type">int</span>, low, high <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    temp := arr[low]</span><br><span class="line">    <span class="keyword">for</span> low &lt; high &#123;</span><br><span class="line">        <span class="keyword">for</span> low &lt; high &amp;&amp; arr[high] &gt;= temp &#123;</span><br><span class="line">            high--</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> low &lt; high &#123;</span><br><span class="line">            arr[low] = arr[high]</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> low &lt; high &amp;&amp; arr[low] &lt; temp &#123;</span><br><span class="line">            low++</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> low &lt; high &#123;</span><br><span class="line">            arr[high] = arr[low]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    arr[low] = temp</span><br><span class="line">    <span class="keyword">return</span> low</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前K个最小值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">quickSortTopK</span><span class="params">(arr []<span class="type">int</span>, k <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> quick <span class="function"><span class="keyword">func</span><span class="params">(arr []<span class="type">int</span>, start, end, k <span class="type">int</span>)</span></span></span><br><span class="line">    quick = <span class="function"><span class="keyword">func</span><span class="params">(arr []<span class="type">int</span>, start, end, k <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> start &gt;= end &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        mid := partition(arr, start, end)</span><br><span class="line">        <span class="keyword">if</span> mid &gt; k &#123;</span><br><span class="line">            quick(arr, start, mid, k)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> mid &lt; k &#123;</span><br><span class="line">            quick(arr, mid+<span class="number">1</span>, end, k)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    quick(arr, <span class="number">0</span>, <span class="built_in">len</span>(arr)<span class="number">-1</span>, k)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><ol><li>堆是一种<strong>完全二叉树结构</strong>；</li><li><strong>最大堆</strong>：父节点 ≥ 子节点；<strong>最小堆</strong>：父节点 ≤ 子节点；</li></ol><ul><li><p><strong>实现步骤</strong>：</p><ol><li><p><strong>调整堆（自上而下）</strong>：</p><ul><li>函数签名：<code>adjust(nums []int, root int, length int)</code></li><li>从当前根节点开始，比较左右子节点，找出较大者与根交换，递归向下直到无需调整。</li></ul></li><li><p><strong>初始化堆</strong>：</p><ul><li>从最后一个非叶子节点（<code>length/2</code>）开始，依次向上调整；</li></ul></li><li><p><strong>堆排序过程</strong>：</p><ul><li>每次将堆顶元素与末尾交换，再对堆顶进行调整；</li><li>排序范围逐步缩小，直到全部有序。</li></ul></li></ol></li><li><p><strong>最大堆调整函数</strong>：</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">adjust</span><span class="params">(nums []<span class="type">int</span>, root, length <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    child := root*<span class="number">2</span> + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> child &lt; length &#123;</span><br><span class="line">        <span class="keyword">if</span> child+<span class="number">1</span> &lt; length &amp;&amp; nums[child+<span class="number">1</span>] &gt; nums[child] &#123;</span><br><span class="line">            child++</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> nums[child] &lt;= nums[root] &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        nums[child], nums[root] = nums[root], nums[child]</span><br><span class="line">        root = child</span><br><span class="line">        child = root*<span class="number">2</span> + <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>代码示例：</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">heapSort</span><span class="params">(nums []<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 初始化堆（自底向上）</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="built_in">len</span>(nums) / <span class="number">2</span>; i &gt;= <span class="number">0</span>; i-- &#123;</span><br><span class="line">        adjust(nums, i, <span class="built_in">len</span>(nums))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 排序过程</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="built_in">len</span>(nums) - <span class="number">1</span>; i &gt; <span class="number">0</span>; i-- &#123;</span><br><span class="line">        nums[i], nums[<span class="number">0</span>] = nums[<span class="number">0</span>], nums[i]</span><br><span class="line">        adjust(nums, <span class="number">0</span>, i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 最大堆取 TopK（前K大）且有序 */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">heapSortTopK</span><span class="params">(nums []<span class="type">int</span>, k <span class="type">int</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">    <span class="comment">// 初始化最大堆</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="built_in">len</span>(nums) / <span class="number">2</span>; i &gt;= <span class="number">0</span>; i-- &#123;</span><br><span class="line">        adjust(nums, i, <span class="built_in">len</span>(nums))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 取出前K大元素</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="built_in">len</span>(nums) - <span class="number">1</span>; i &gt; <span class="built_in">len</span>(nums)<span class="number">-1</span>-k; i-- &#123;</span><br><span class="line">        nums[i], nums[<span class="number">0</span>] = nums[<span class="number">0</span>], nums[i]</span><br><span class="line">        adjust(nums, <span class="number">0</span>, i)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> nums[<span class="built_in">len</span>(nums)-k:]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>⚠️注意事项：</p><ul><li>初始化堆：自底向上遍历构建，但每个节点的调整是自上而下；</li><li>排序时：堆顶与尾部交换，再调整堆顶；</li><li><code>adjust</code> 函数中需确保越界处理、优先选择较大子节点交换；</li></ul></blockquote><h1 id="贪心算法（Greedy）"><a href="#贪心算法（Greedy）" class="headerlink" title="贪心算法（Greedy）"></a>贪心算法（Greedy）</h1><ul><li><p><strong>贪心算法：通过局部最优解实现全局最优</strong></p></li><li><p><a href="https://leetcode.cn/problems/jump-game/description/">55. 跳跃游戏</a></p><ul><li>给定一个非负整数数组 <code>nums</code>，你最初位于数组的第一个下标。数组中的每个元素代表你在该位置可以跳跃的最大长度。</li><li>判断你是否能够到达最后一个下标</li></ul></li><li><p>遍历数组，并实时维护「最远可以到达的位置」</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">canJump</span><span class="params">(nums []<span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    mostIndex := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> i &lt;= mostIndex &#123;</span><br><span class="line">            mostIndex = max(mostIndex, i+nums[i])</span><br><span class="line">            <span class="keyword">if</span> mostIndex &gt;= <span class="built_in">len</span>(nums)<span class="number">-1</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><a href="https://leetcode.cn/problems/jump-game-ii/description/">45. 跳跃游戏 II</a></p><ul><li>计算到达最后一个位置的最小跳跃次数</li></ul></li><li><p><strong>贪心 + 正向查找「可达的最远位置」</strong></p><ul><li>每次在当前跳跃的范围内，选择可以跳得最远的位置，作为下一跳的终点</li></ul></li><li><p><strong>贪心策略的正确性：</strong></p><ul><li>在当前跳跃范围内尽量跳得远，可以最大化下一跳的「选择空间」</li><li>避免走回头路或多跳一次的情况</li></ul></li><li><p><strong>为什么不遍历到最后一个元素？</strong></p><ul><li><p>跳到最后一个位置时，必然是在前一步完成跳跃</p></li><li><p>如果访问 <code>i == len(nums) - 1</code>，可能导致「多跳一步」</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">jump</span><span class="params">(nums []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    end, farthest := <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    steps := <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(nums)<span class="number">-1</span>; i++ &#123;</span><br><span class="line">        farthest = max(farthest, i+nums[i])</span><br><span class="line">        <span class="keyword">if</span> i == end &#123;</span><br><span class="line">            steps++</span><br><span class="line">            end = farthest</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> steps</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(a, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="动态规划（Dynamic-Programming）"><a href="#动态规划（Dynamic-Programming）" class="headerlink" title="动态规划（Dynamic Programming）"></a>动态规划（Dynamic Programming）</h1><ul><li><p><strong>动态规划的本质</strong>：通过<strong>穷举所有可能解法</strong>来寻找最优解。</p><ul><li>常见的穷举方式有两种：<strong>回溯算法</strong>和<strong>动态规划</strong>。回溯是暴力尝试每种可能，动态规划则利用<strong>状态转移方程</strong>推导各个状态。</li><li>动态规划相比暴力穷举更高效，其核心优势在于：<strong>利用状态转移 + 记忆</strong>，<strong>消除重复计算的子问题（重叠子问题）</strong>。</li></ul></li><li><p>动态规划问题通常具有大量<strong>重叠子问题</strong>，直接穷举效率极低，因此需借助以下两种优化方式：</p><ul><li>使用 <strong>备忘录（记忆化递归）</strong> 或 <strong>DP table（递推表格）</strong> 来<strong>避免重复计算</strong>；</li><li>其中，<strong>记忆化递归为自顶向下</strong>，<strong>DP table 为自底向上</strong>。</li></ul></li><li><p><strong>动态规划 &#x3D; 穷举 + 剪枝</strong></p></li><li><p>动态规划的标准解题流程：</p><ol><li>明确“<strong>状态</strong>”和“<strong>选择</strong>”；</li><li>定义 <code>dp</code> 数组或函数的含义；</li><li>写出<strong>状态转移方程（递推关系）</strong>。</li></ol></li><li><p>常通过<strong>状态压缩</strong>优化空间复杂度，例如将 <code>O(N^2)</code> 降为 <code>O(N)</code>。</p></li></ul><h2 id="背包问题（Knapsack）"><a href="#背包问题（Knapsack）" class="headerlink" title="背包问题（Knapsack）"></a>背包问题（Knapsack）</h2><h3 id="✅-分类依据：每个物品的使用次数是否受限"><a href="#✅-分类依据：每个物品的使用次数是否受限" class="headerlink" title="✅ 分类依据：每个物品的使用次数是否受限"></a>✅ 分类依据：<strong>每个物品的使用次数是否受限</strong></h3><table><thead><tr><th>问题类型</th><th>每种物品使用次数</th><th>描述</th></tr></thead><tbody><tr><td><strong>0-1 背包问题</strong></td><td>最多使用一次</td><td>每件物品要么选，要么不选，不能重复使用。</td></tr><tr><td><strong>子集和问题</strong></td><td>最多使用一次</td><td>0-1 背包的特例：目标是恰好凑出某个和，而非最大价值。</td></tr><tr><td><strong>完全背包问题</strong></td><td>可无限次使用</td><td>每种物品可选多次，适用于硬币兑换、无限供给的资源选择等场景。</td></tr></tbody></table><h3 id="🎯-拓展理解："><a href="#🎯-拓展理解：" class="headerlink" title="🎯 拓展理解："></a>🎯 拓展理解：</h3><ul><li><strong>0-1 背包</strong> &#x3D; 最经典模型，用于资源受限问题。</li><li><strong>子集和问题</strong> &#x3D; 判断“是否可以凑出某个值”，不关心价值。</li><li><strong>完全背包</strong> &#x3D; 每种物品无限可选，常见于无限物品、找零等问题。</li></ul><h3 id="0-1-背包问题"><a href="#0-1-背包问题" class="headerlink" title="0-1 背包问题"></a>0-1 背包问题</h3><ul><li><p><strong>题目描述</strong></p><ul><li>给定一个容量为 <code>W</code> 的背包，以及 <code>N</code> 个物品，每个物品有：重量 <code>wt[i]</code> 和价值 <code>val[i]</code></li><li>每种物品只能选择一次，求在不超过总容量 <code>W</code> 的前提下，最大可获得的总价值。</li></ul></li><li><p><strong>解题思路</strong></p><ul><li><p>状态定义：<code>dp[i][w]</code> 表示前 <code>i</code> 个物品中，容量为 <code>w</code> 的背包所能达到的最大价值。</p></li><li><p>状态转移：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> w &lt; wt[i<span class="number">-1</span>]:</span><br><span class="line">    dp[i][w] = dp[i<span class="number">-1</span>][w]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    dp[i][w] = max(dp[i<span class="number">-1</span>][w], dp[i<span class="number">-1</span>][w - wt[i<span class="number">-1</span>]] + val[i<span class="number">-1</span>])</span><br></pre></td></tr></table></figure></li><li><p>初始化：</p><ul><li><code>dp[0][..] = 0</code>：没有物品可选，价值为 0；</li><li><code>dp[..][0] = 0</code>：背包容量为 0，价值也为 0。</li></ul></li></ul></li><li><p><strong>代码实现</strong></p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">knapsack</span><span class="params">(W <span class="type">int</span>, wt, val []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    N := <span class="built_in">len</span>(wt)</span><br><span class="line">    dp := <span class="built_in">make</span>([][]<span class="type">int</span>, N+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> dp &#123;</span><br><span class="line">        dp[i] = <span class="built_in">make</span>([]<span class="type">int</span>, W+<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= N; i++ &#123;</span><br><span class="line">        <span class="keyword">for</span> w := <span class="number">1</span>; w &lt;= W; w++ &#123;</span><br><span class="line">            <span class="keyword">if</span> w &lt; wt[i<span class="number">-1</span>] &#123;</span><br><span class="line">                dp[i][w] = dp[i<span class="number">-1</span>][w]</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dp[i][w] = max(dp[i<span class="number">-1</span>][w], dp[i<span class="number">-1</span>][w - wt[i<span class="number">-1</span>]] + val[i<span class="number">-1</span>])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[N][W]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(a, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="子集背包问题（Subset-Sum）"><a href="#子集背包问题（Subset-Sum）" class="headerlink" title="子集背包问题（Subset Sum）"></a>子集背包问题（Subset Sum）</h3><ul><li><p><strong>Leetcode 416. <a href="https://leetcode.cn/problems/partition-equal-subset-sum/description/">分割等和子集</a></strong></p><ul><li>给定一个只包含正整数的非空数组 <code>nums</code>，判断是否可以将其分割为两个子集，且两个子集的元素和相等。</li><li>转换为背包问题：给一个容量为 <code>sum / 2</code> 的背包，判断是否可以从数组中选出若干数字恰好装满它。</li></ul></li><li><p><strong>解题思路</strong></p><ul><li>状态定义：<code>dp[i][j]</code> 表示前 <code>i</code> 个数中，是否存在子集和为 <code>j</code>。</li><li>状态转移：</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> j &lt; nums[i]:</span><br><span class="line">    dp[i][j] = dp[i<span class="number">-1</span>][j]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    dp[i][j] = dp[i<span class="number">-1</span>][j] || dp[i<span class="number">-1</span>][j - nums[i]]</span><br></pre></td></tr></table></figure><ul><li><p>初始化：</p><ul><li><code>dp[..][0] = true</code>：背包容量为 0，总能装满；</li><li><code>dp[0][nums[0]] = true</code>：只有一个数且恰好等于容量；</li></ul></li><li><p>剪枝条件：</p><ul><li>若 <code>sum</code> 为奇数，直接返回 <code>false</code>；</li><li>若某元素大于 <code>sum / 2</code>，可提前跳过。</li></ul></li></ul></li><li><p><strong>二维数组实现</strong></p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">canPartition</span><span class="params">(nums []<span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    sum := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _, num := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        sum += num</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> sum%<span class="number">2</span> != <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    target := sum / <span class="number">2</span></span><br><span class="line">    N := <span class="built_in">len</span>(nums)</span><br><span class="line"></span><br><span class="line">    dp := <span class="built_in">make</span>([][]<span class="type">bool</span>, N)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> dp &#123;</span><br><span class="line">        dp[i] = <span class="built_in">make</span>([]<span class="type">bool</span>, target+<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; N; i++ &#123;</span><br><span class="line">        dp[i][<span class="number">0</span>] = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> nums[<span class="number">0</span>] &lt;= target &#123;</span><br><span class="line">        dp[<span class="number">0</span>][nums[<span class="number">0</span>]] = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt; N; i++ &#123;</span><br><span class="line">        <span class="keyword">for</span> j := <span class="number">1</span>; j &lt;= target; j++ &#123;</span><br><span class="line">            <span class="keyword">if</span> j &lt; nums[i] &#123;</span><br><span class="line">                dp[i][j] = dp[i<span class="number">-1</span>][j]</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dp[i][j] = dp[i<span class="number">-1</span>][j] || dp[i<span class="number">-1</span>][j - nums[i]]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dp[N<span class="number">-1</span>][target]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>状态压缩：一维优化版本（倒序）</strong></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">canPartition</span><span class="params">(nums []<span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    sum := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _, num := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        sum += num</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> sum%<span class="number">2</span> != <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    target := sum / <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    dp := <span class="built_in">make</span>([]<span class="type">bool</span>, target+<span class="number">1</span>)</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, num := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        <span class="keyword">for</span> j := target; j &gt;= num; j-- &#123;</span><br><span class="line">            dp[j] = dp[j] || dp[j - num]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dp[target]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完全背包问题（Unbounded-Knapsack）"><a href="#完全背包问题（Unbounded-Knapsack）" class="headerlink" title="完全背包问题（Unbounded Knapsack）"></a>完全背包问题（Unbounded Knapsack）</h3><ul><li><p><strong>Leetcode 518. <a href="https://leetcode.cn/problems/coin-change-ii/description/">零钱兑换 II</a></strong></p><ul><li>给定一个背包容量为 <code>amount</code>，以及一个物品数组 <code>coins</code>（可重复使用），求有多少种不同的方法可以凑出该金额。</li></ul></li><li><p><strong>解题思路</strong></p><ul><li><p>状态定义：<code>dp[i][j]</code> 表示使用前 <code>i</code> 种硬币，凑出金额 <code>j</code> 的方法数。</p></li><li><p>状态转移：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> j &lt; coins[i<span class="number">-1</span>]:</span><br><span class="line">    dp[i][j] = dp[i<span class="number">-1</span>][j]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    dp[i][j] = dp[i<span class="number">-1</span>][j] + dp[i][j - coins[i<span class="number">-1</span>]]</span><br></pre></td></tr></table></figure></li><li><p>初始化：</p><ul><li><code>dp[0][..] = 0</code>：没有硬币无法组成正金额；</li><li><code>dp[..][0] = 1</code>：金额为 0，只有 1 种凑法（什么都不选）。</li></ul></li></ul></li><li><p><strong>二维数组实现</strong></p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">change</span><span class="params">(amount <span class="type">int</span>, coins []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(coins)</span><br><span class="line">    dp := <span class="built_in">make</span>([][]<span class="type">int</span>, n+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> dp &#123;</span><br><span class="line">        dp[i] = <span class="built_in">make</span>([]<span class="type">int</span>, amount+<span class="number">1</span>)</span><br><span class="line">        dp[i][<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= n; i++ &#123;</span><br><span class="line">        <span class="keyword">for</span> j := <span class="number">0</span>; j &lt;= amount; j++ &#123;</span><br><span class="line">            <span class="keyword">if</span> j &lt; coins[i<span class="number">-1</span>] &#123;</span><br><span class="line">                dp[i][j] = dp[i<span class="number">-1</span>][j]</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dp[i][j] = dp[i<span class="number">-1</span>][j] + dp[i][j - coins[i<span class="number">-1</span>]]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n][amount]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>一维数组优化（正序遍历）</strong></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">change</span><span class="params">(amount <span class="type">int</span>, coins []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    dp := <span class="built_in">make</span>([]<span class="type">int</span>, amount+<span class="number">1</span>)</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, coin := <span class="keyword">range</span> coins &#123;</span><br><span class="line">        <span class="keyword">for</span> j := coin; j &lt;= amount; j++ &#123;</span><br><span class="line">            dp[j] += dp[j - coin]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dp[amount]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="回溯"><a href="#回溯" class="headerlink" title="回溯"></a>回溯</h1><ul><li>适用于排列、组合、子集等构造类枚举问题</li></ul><h3 id="通用回溯模板总结"><a href="#通用回溯模板总结" class="headerlink" title="通用回溯模板总结"></a>通用回溯模板总结</h3><table><thead><tr><th>题型</th><th>递归参数</th><th>关键点</th><th>重复处理策略</th><th>代码模板示例（Go 伪码简化）</th></tr></thead><tbody><tr><td><strong>排列（Permutation）</strong></td><td>无需起点</td><td>需要标记已使用元素 <code>used[]</code></td><td>排序 + <code>used</code> + 跳过相邻重复元素</td><td>见 <em>排列 II</em> 模板</td></tr><tr><td><strong>组合 &#x2F; 子集（Combination &#x2F; Subset）</strong></td><td>需要起点</td><td>控制遍历起点，防止重复使用前面元素</td><td>排序 + 跳过同层相邻重复元素</td><td>见 <em>组合 II &#x2F; 子集 II</em> 模板</td></tr></tbody></table><h2 id="1-排列（Permutation）"><a href="#1-排列（Permutation）" class="headerlink" title="1. 排列（Permutation）"></a>1. 排列（Permutation）</h2><h3 id="1-1-无重复元素-—-基础排列（46-全排列）"><a href="#1-1-无重复元素-—-基础排列（46-全排列）" class="headerlink" title="1.1 无重复元素 — 基础排列（46. 全排列）"></a>1.1 无重复元素 — 基础排列（<a href="https://leetcode.cn/problems/permutations/description/">46. 全排列</a>）</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">permute</span><span class="params">(nums []<span class="type">int</span>)</span></span> [][]<span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> res [][]<span class="type">int</span></span><br><span class="line">    <span class="keyword">var</span> path []<span class="type">int</span></span><br><span class="line">    used := <span class="built_in">make</span>([]<span class="type">bool</span>, <span class="built_in">len</span>(nums))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> dfs <span class="function"><span class="keyword">func</span><span class="params">()</span></span></span><br><span class="line">    dfs = <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(path) == <span class="built_in">len</span>(nums) &#123;</span><br><span class="line">            res = <span class="built_in">append</span>(res, <span class="built_in">append</span>([]<span class="type">int</span>(<span class="literal">nil</span>), path...))</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">            <span class="keyword">if</span> used[i] &#123;</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">            used[i] = <span class="literal">true</span></span><br><span class="line">            path = <span class="built_in">append</span>(path, nums[i])</span><br><span class="line">            dfs()</span><br><span class="line">            path = path[:<span class="built_in">len</span>(path)<span class="number">-1</span>]</span><br><span class="line">            used[i] = <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs()</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-有重复元素-—-排列-II（47-全排列-II）"><a href="#1-2-有重复元素-—-排列-II（47-全排列-II）" class="headerlink" title="1.2 有重复元素 — 排列 II（47. 全排列 II）"></a>1.2 有重复元素 — 排列 II（<a href="https://leetcode.cn/problems/permutations-ii/">47. 全排列 II</a>）</h3><ul><li><p>相较于 46，需增加：</p><ul><li>排序以便判断相邻重复</li><li>重复剪枝：跳过已访问前一个相同元素</li></ul></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">permuteUnique</span><span class="params">(nums []<span class="type">int</span>)</span></span> [][]<span class="type">int</span> &#123;</span><br><span class="line">    sort.Ints(nums)</span><br><span class="line">    <span class="keyword">var</span> res [][]<span class="type">int</span></span><br><span class="line">    <span class="keyword">var</span> path []<span class="type">int</span></span><br><span class="line">    used := <span class="built_in">make</span>([]<span class="type">bool</span>, <span class="built_in">len</span>(nums))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> dfs <span class="function"><span class="keyword">func</span><span class="params">()</span></span></span><br><span class="line">    dfs = <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(path) == <span class="built_in">len</span>(nums) &#123;</span><br><span class="line">            res = <span class="built_in">append</span>(res, <span class="built_in">append</span>([]<span class="type">int</span>(<span class="literal">nil</span>), path...))</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">            <span class="keyword">if</span> used[i] &#123;</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//只能先用同一组重复数字的“第一个”，不能先用后面的。</span></span><br><span class="line"><span class="comment">//如果现在选择了后一个重复元素，就会导致重复排列。</span></span><br><span class="line"><span class="comment">//!used[i-1]表明前一个相同的还没用，所以你这边就别先用了</span></span><br><span class="line">            <span class="keyword">if</span> i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i<span class="number">-1</span>] &amp;&amp; !used[i<span class="number">-1</span>] &#123;</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">            used[i] = <span class="literal">true</span></span><br><span class="line">            path = <span class="built_in">append</span>(path, nums[i])</span><br><span class="line">            dfs()</span><br><span class="line">            path = path[:<span class="built_in">len</span>(path)<span class="number">-1</span>]</span><br><span class="line">            used[i] = <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs()</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-组合-x2F-子集（Combination-x2F-Subset）"><a href="#2-组合-x2F-子集（Combination-x2F-Subset）" class="headerlink" title="2. 组合 &#x2F; 子集（Combination &#x2F; Subset）"></a>2. 组合 &#x2F; 子集（Combination &#x2F; Subset）</h2><blockquote><p>本质都是选取元素的子集，区别主要在题意和输出要求。</p></blockquote><h3 id="2-1-无重复元素-—-子集-I（78-子集）"><a href="#2-1-无重复元素-—-子集-I（78-子集）" class="headerlink" title="2.1 无重复元素 — 子集 I（78. 子集）"></a>2.1 无重复元素 — 子集 I（<a href="https://leetcode.cn/problems/subsets/">78. 子集</a>）</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">subsets</span><span class="params">(nums []<span class="type">int</span>)</span></span> [][]<span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> res [][]<span class="type">int</span></span><br><span class="line">    <span class="keyword">var</span> path []<span class="type">int</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> dfs <span class="function"><span class="keyword">func</span><span class="params">(start <span class="type">int</span>)</span></span></span><br><span class="line">    dfs = <span class="function"><span class="keyword">func</span><span class="params">(start <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">        res = <span class="built_in">append</span>(res, <span class="built_in">append</span>([]<span class="type">int</span>(<span class="literal">nil</span>), path...))</span><br><span class="line">        <span class="keyword">for</span> i := start; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">            path = <span class="built_in">append</span>(path, nums[i])</span><br><span class="line">            dfs(i + <span class="number">1</span>)</span><br><span class="line">            path = path[:<span class="built_in">len</span>(path)<span class="number">-1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-有重复元素-—-子集-II（90-子集-II）"><a href="#2-2-有重复元素-—-子集-II（90-子集-II）" class="headerlink" title="2.2 有重复元素 — 子集 II（90. 子集 II）"></a>2.2 有重复元素 — 子集 II（<a href="https://leetcode.cn/problems/subsets-ii/">90. 子集 II</a>）</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">subsetsWithDup</span><span class="params">(nums []<span class="type">int</span>)</span></span> [][]<span class="type">int</span> &#123;</span><br><span class="line">    sort.Ints(nums)</span><br><span class="line">    <span class="keyword">var</span> res [][]<span class="type">int</span></span><br><span class="line">    <span class="keyword">var</span> path []<span class="type">int</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> dfs <span class="function"><span class="keyword">func</span><span class="params">(start <span class="type">int</span>)</span></span></span><br><span class="line">    dfs = <span class="function"><span class="keyword">func</span><span class="params">(start <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">        res = <span class="built_in">append</span>(res, <span class="built_in">append</span>([]<span class="type">int</span>(<span class="literal">nil</span>), path...))</span><br><span class="line">        <span class="keyword">for</span> i := start; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">            <span class="keyword">if</span> i &gt; start &amp;&amp; nums[i] == nums[i<span class="number">-1</span>] &#123;</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">            path = <span class="built_in">append</span>(path, nums[i])</span><br><span class="line">            dfs(i + <span class="number">1</span>)</span><br><span class="line">            path = path[:<span class="built_in">len</span>(path)<span class="number">-1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="子集的另一种方式：不使用-for-循环（显式选与不选）"><a href="#子集的另一种方式：不使用-for-循环（显式选与不选）" class="headerlink" title="子集的另一种方式：不使用 for 循环（显式选与不选）"></a>子集的另一种方式：不使用 for 循环（显式选与不选）</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">subsetsDfs</span><span class="params">(nums []<span class="type">int</span>)</span></span> [][]<span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> res [][]<span class="type">int</span></span><br><span class="line">    <span class="keyword">var</span> set []<span class="type">int</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> dfs <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>)</span></span></span><br><span class="line">    dfs = <span class="function"><span class="keyword">func</span><span class="params">(cur <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> cur == <span class="built_in">len</span>(nums) &#123;</span><br><span class="line">            res = <span class="built_in">append</span>(res, <span class="built_in">append</span>([]<span class="type">int</span>(<span class="literal">nil</span>), set...))</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 选择当前</span></span><br><span class="line">        set = <span class="built_in">append</span>(set, nums[cur])</span><br><span class="line">        dfs(cur + <span class="number">1</span>)</span><br><span class="line">        <span class="comment">// 撤销选择</span></span><br><span class="line">        set = set[:<span class="built_in">len</span>(set)<span class="number">-1</span>]</span><br><span class="line">        <span class="comment">// 不选择当前</span></span><br><span class="line">        dfs(cur + <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结要点"><a href="#总结要点" class="headerlink" title="总结要点"></a>总结要点</h2><table><thead><tr><th>特征</th><th>排列（Permutation）</th><th>组合 &#x2F; 子集（Combination &#x2F; Subset）</th></tr></thead><tbody><tr><td>是否用 <code>used</code></td><td>是</td><td>否（一般）</td></tr><tr><td>是否排序</td><td>有重复元素时必须排序</td><td>同左</td></tr><tr><td>是否有起点参数</td><td>无需（但可选）</td><td>必须有，通常为 <code>start</code></td></tr><tr><td>去重策略</td><td><code>i &gt; 0 &amp;&amp; nums[i]==nums[i-1] &amp;&amp; !used[i-1]</code></td><td><code>i &gt; start &amp;&amp; nums[i]==nums[i-1]</code> 跳过</td></tr><tr><td>递归形式</td><td><code>dfs()</code> &#x2F; <code>dfs(index)</code></td><td><code>dfs(start int)</code></td></tr></tbody></table><h2 id="扩展说明"><a href="#扩展说明" class="headerlink" title="扩展说明"></a>扩展说明</h2><ul><li><p><strong>全局变量 vs 参数传递：</strong></p><ul><li>全局变量：书写更简洁，多个函数共享更方便。</li><li>参数传递：封装更清晰，递归状态更独立，减少副作用。</li></ul></li><li><p><strong>for 循环的角色：</strong></p><ul><li>回溯中 for 循环用于枚举“选项”。</li><li>不要在 for 中处理“不选”的逻辑，不然会重复或乱序。</li></ul></li></ul><h2 id="举例：组合总和（39-Combination-Sum）"><a href="#举例：组合总和（39-Combination-Sum）" class="headerlink" title="举例：组合总和（39. Combination Sum）"></a>举例：组合总和（<a href="https://leetcode.cn/problems/combination-sum/">39. Combination Sum</a>）</h2><ul><li>元素可重复使用，需遍历所有可行组合</li></ul><h4 id="✅-推荐写法：for-中只做“选”的动作"><a href="#✅-推荐写法：for-中只做“选”的动作" class="headerlink" title="✅ 推荐写法：for 中只做“选”的动作"></a>✅ 推荐写法：for 中只做“选”的动作</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">combinationSum</span><span class="params">(candidates []<span class="type">int</span>, target <span class="type">int</span>)</span></span> [][]<span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> res [][]<span class="type">int</span></span><br><span class="line">    <span class="keyword">var</span> path []<span class="type">int</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> dfs <span class="function"><span class="keyword">func</span><span class="params">(start, target <span class="type">int</span>)</span></span></span><br><span class="line">    dfs = <span class="function"><span class="keyword">func</span><span class="params">(start, target <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> target == <span class="number">0</span> &#123;</span><br><span class="line">            res = <span class="built_in">append</span>(res, <span class="built_in">append</span>([]<span class="type">int</span>(<span class="literal">nil</span>), path...))</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> i := start; i &lt; <span class="built_in">len</span>(candidates); i++ &#123;</span><br><span class="line">            <span class="keyword">if</span> target &gt;= candidates[i] &#123;</span><br><span class="line">                path = <span class="built_in">append</span>(path, candidates[i])</span><br><span class="line">                dfs(i, target - candidates[i])</span><br><span class="line">                path = path[:<span class="built_in">len</span>(path)<span class="number">-1</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">0</span>, target)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="🚫-不推荐写法：用“选-x2F-不选”逻辑递归（逻辑复杂，易错）"><a href="#🚫-不推荐写法：用“选-x2F-不选”逻辑递归（逻辑复杂，易错）" class="headerlink" title="🚫 不推荐写法：用“选&#x2F;不选”逻辑递归（逻辑复杂，易错）"></a>🚫 不推荐写法：用“选&#x2F;不选”逻辑递归（逻辑复杂，易错）</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">combinationSum</span><span class="params">(candidates []<span class="type">int</span>, target <span class="type">int</span>)</span></span> [][]<span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> res [][]<span class="type">int</span></span><br><span class="line">    <span class="keyword">var</span> path []<span class="type">int</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> dfs <span class="function"><span class="keyword">func</span><span class="params">(index, target <span class="type">int</span>)</span></span></span><br><span class="line">    dfs = <span class="function"><span class="keyword">func</span><span class="params">(index, target <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> target == <span class="number">0</span> &#123;</span><br><span class="line">            res = <span class="built_in">append</span>(res, <span class="built_in">append</span>([]<span class="type">int</span>(<span class="literal">nil</span>), path...))</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> index == <span class="built_in">len</span>(candidates) || target &lt; <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 选当前</span></span><br><span class="line">        path = <span class="built_in">append</span>(path, candidates[index])</span><br><span class="line">        dfs(index, target - candidates[index])</span><br><span class="line">        path = path[:<span class="built_in">len</span>(path)<span class="number">-1</span>]</span><br><span class="line">        <span class="comment">// 不选当前</span></span><br><span class="line">        dfs(index + <span class="number">1</span>, target)</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">0</span>, target)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="DFS-模板的两种核心模式"><a href="#DFS-模板的两种核心模式" class="headerlink" title="DFS 模板的两种核心模式"></a>DFS 模板的两种核心模式</h2><h3 id="模式一：组合型问题（需-for-循环）"><a href="#模式一：组合型问题（需-for-循环）" class="headerlink" title="模式一：组合型问题（需 for 循环）"></a>模式一：<strong>组合型问题（需 for 循环）</strong></h3><ul><li>子集、组合、排列等</li><li>每一步从当前位置开始向后枚举选项</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i := start; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">    path = <span class="built_in">append</span>(path, nums[i])</span><br><span class="line">    dfs(i + <span class="number">1</span>)</span><br><span class="line">    path = path[:<span class="built_in">len</span>(path)<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="模式二：构造型问题（不需-for-循环）"><a href="#模式二：构造型问题（不需-for-循环）" class="headerlink" title="模式二：构造型问题（不需 for 循环）"></a>模式二：<strong>构造型问题（不需 for 循环）</strong></h3><ul><li>例如：电话号码字母组合、迷宫路径、树遍历等</li><li>每层只能处理一个“位置”的合法选项，当前层不枚举后面</li></ul><h4 id="示例：17-电话号码的字母组合"><a href="#示例：17-电话号码的字母组合" class="headerlink" title="示例：17. 电话号码的字母组合"></a>示例：<a href="https://leetcode.cn/problems/letter-combinations-of-a-phone-number/">17. 电话号码的字母组合</a></h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">letterCombinations</span><span class="params">(digits <span class="type">string</span>)</span></span> []<span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(digits) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> []<span class="type">string</span>&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    phoneMap := <span class="keyword">map</span>[<span class="type">rune</span>]<span class="type">string</span>&#123;</span><br><span class="line">        <span class="string">&#x27;2&#x27;</span>: <span class="string">&quot;abc&quot;</span>, <span class="string">&#x27;3&#x27;</span>: <span class="string">&quot;def&quot;</span>, <span class="string">&#x27;4&#x27;</span>: <span class="string">&quot;ghi&quot;</span>, <span class="string">&#x27;5&#x27;</span>: <span class="string">&quot;jkl&quot;</span>,</span><br><span class="line">        <span class="string">&#x27;6&#x27;</span>: <span class="string">&quot;mno&quot;</span>, <span class="string">&#x27;7&#x27;</span>: <span class="string">&quot;pqrs&quot;</span>, <span class="string">&#x27;8&#x27;</span>: <span class="string">&quot;tuv&quot;</span>, <span class="string">&#x27;9&#x27;</span>: <span class="string">&quot;wxyz&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> res []<span class="type">string</span></span><br><span class="line">    <span class="keyword">var</span> dfs <span class="function"><span class="keyword">func</span><span class="params">(index <span class="type">int</span>, str <span class="type">string</span>)</span></span></span><br><span class="line">    dfs = <span class="function"><span class="keyword">func</span><span class="params">(index <span class="type">int</span>, str <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> index == <span class="built_in">len</span>(digits) &#123;</span><br><span class="line">            res = <span class="built_in">append</span>(res, str)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> _, ch := <span class="keyword">range</span> phoneMap[<span class="type">rune</span>(digits[index])] &#123;</span><br><span class="line">            dfs(index + <span class="number">1</span>, str + <span class="type">string</span>(ch))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">0</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结结构图"><a href="#总结结构图" class="headerlink" title="总结结构图"></a>总结结构图</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">回溯问题分类</span><br><span class="line">├── 排列类：顺序重要，used + path</span><br><span class="line">├── 组合类：顺序不重要，start 起点控制，元素不可重复</span><br><span class="line">├── 子集类：所有组合（选 or 不选）</span><br><span class="line">└── 构造类：必须填满所有位置，如数字组合/字符串构造等</span><br></pre></td></tr></table></figure><blockquote><p>✅ 判断是否需要 for：是否在当前层“枚举选项”</p><ul><li>有枚举（子集&#x2F;组合&#x2F;排列）：需要 <code>for</code></li><li>无枚举（构造型）：不需要 <code>for</code></li></ul></blockquote><hr><h1 id="典型问题"><a href="#典型问题" class="headerlink" title="典型问题"></a>典型问题</h1><h2 id="TopK"><a href="#TopK" class="headerlink" title="TopK"></a>TopK</h2><ul><li><p><strong>不要求有序</strong>：使用快速选择算法（基于快速排序思想）；也可以使用堆结构</p></li><li><p><strong>要求有序</strong>：使用堆</p><ul><li>最大堆：用于求前 K 个最大值</li><li>最小堆：用于求前 K 个最小值</li></ul></li></ul><h2 id="快慢指针"><a href="#快慢指针" class="headerlink" title="快慢指针"></a>快慢指针</h2><ul><li><strong>19. 删除链表的倒数第 N 个节点</strong><br>快指针先走 N 步，然后快慢指针一起前进，快指针到达末尾时，慢指针刚好指向待删除节点的前一个节点</li><li><strong>141. 环形链表</strong><br>快慢指针，快指针每次走两步，慢指针每次走一步；若存在环，两者最终会相遇</li><li><strong>142. 环形链表 II</strong><br>快慢指针相遇后，快指针从头开始，慢指针继续前进；再次相遇点即为入环点</li><li><strong>234. 回文链表</strong><br>快慢指针找到链表中点，同时将前半部分链表原地反转；再从中点与反转后的链表逐一比较，判断是否回文</li><li><strong>287. 寻找重复数</strong><br>使用 Floyd 判圈算法，将数组视为链表结构；第一次快慢指针相遇后，将其中一个指针重新指向起点，两个指针再次相遇时即为重复数字（环的入口）</li></ul><h2 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h2><ul><li><strong>160. 相交链表</strong><br>两指针分别从两个链表头出发，走到末尾后切换至对方链表头继续走；若相交，则最终会在交点相遇；若无交点，则会同时为 <code>null</code> 结束</li></ul><hr><h1 id="经典题目"><a href="#经典题目" class="headerlink" title="经典题目"></a>经典题目</h1><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><ul><li><p><strong>146. LRU 缓存</strong>（<code>HashMap + 双向链表</code>）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> LRUCache <span class="keyword">struct</span> &#123;</span><br><span class="line">    data     <span class="keyword">map</span>[<span class="type">int</span>]*LinkedNode</span><br><span class="line">    head     *LinkedNode</span><br><span class="line">    tail     *LinkedNode</span><br><span class="line">    count    <span class="type">int</span></span><br><span class="line">    capacity <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> LinkedNode <span class="keyword">struct</span> &#123;</span><br><span class="line">    key  <span class="type">int</span></span><br><span class="line">    val  <span class="type">int</span></span><br><span class="line">    pre  *LinkedNode</span><br><span class="line">    next *LinkedNode</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>data</code>: 使用 HashMap 存储 key 与节点指针的映射</li><li><code>双向链表</code>: 头部表示最近访问节点，新加入或访问的节点会被移动到头部，尾部为最久未使用节点，便于淘汰</li></ul></li><li><p><strong>460. LFU 缓存</strong>（<code>双 Hash + 双向链表</code>）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> LFUCache <span class="keyword">struct</span> &#123;</span><br><span class="line">    keyToValFreq   <span class="keyword">map</span>[<span class="type">int</span>]*LFUNode</span><br><span class="line">    freqToKeysHead <span class="keyword">map</span>[<span class="type">int</span>]*LFUNode</span><br><span class="line">    freqToKeysTail <span class="keyword">map</span>[<span class="type">int</span>]*LFUNode</span><br><span class="line">    minFreq        <span class="type">int</span></span><br><span class="line">    capacity       <span class="type">int</span></span><br><span class="line">    size           <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> LFUNode <span class="keyword">struct</span> &#123;</span><br><span class="line">    key  <span class="type">int</span></span><br><span class="line">    val  <span class="type">int</span></span><br><span class="line">    freq <span class="type">int</span></span><br><span class="line">    pre  *LFUNode</span><br><span class="line">    next *LFUNode</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>keyToValFreq</code>: 记录每个 key 的值和频率</li><li><code>freqToKeys</code>: 按照频率映射到对应频率的链表（内部按 LRU 顺序）</li><li><code>minFreq</code>: 当前缓存中的最小访问频率</li><li>注意 <code>put</code> 操作中若 key 已存在，需要更新其值和频率！</li></ul></li></ul><h2 id="打家劫舍"><a href="#打家劫舍" class="headerlink" title="打家劫舍"></a>打家劫舍</h2><ul><li><p><strong>198. 打家劫舍</strong>（相邻房屋不能偷）</p><ul><li>动态规划</li><li><code>dp[i]</code> 表示前 <code>i</code> 间房屋能偷到的最大金额</li><li>状态转移方程：<code>dp[i] = max(dp[i-2] + nums[i], dp[i-1])</code></li></ul></li><li><p><strong>213. 打家劫舍 II</strong>（房屋围成一圈）</p><ul><li>环状结构，首尾不能同时选择</li><li>拆分为两种情况：<code>(0, n-2)</code> 和 <code>(1, n-1)</code>，分别计算最大值，取较大者</li></ul></li><li><p><strong>2560. 打家劫舍 IV</strong>（给定偷 <code>k</code> 间房的条件，求最小窃取能力）</p><ul><li>题考的是：在不能偷相邻房子的条件下，选择至少 k 个房子，求所有方案中「最大金额最小」的那种偷法的最大单间金额（即窃取能力）的最小值。  </li><li>二分 + 贪心</li><li>在 <code>[min(nums), max(nums)]</code> 范围内二分 <code>x</code>，判断是否存在方案在不相邻的前提下偷到 <code>k</code> 间房且每间 ≤ <code>x</code></li><li>最小可行的 <code>x</code> 即为答案</li></ul></li><li><p><strong>337. 打家劫舍 III</strong>（树形结构）</p><ul><li>二叉树结构，不能偷父子节点</li><li>返回两个值：偷当前节点与不偷当前节点的最大值</li><li>后序遍历递归实现</li></ul></li></ul><h2 id="课程表"><a href="#课程表" class="headerlink" title="课程表"></a>课程表</h2><ul><li><p><strong>207. 课程表</strong></p><ul><li>判断有向图是否存在环</li><li>使用拓扑排序（Kahn 算法）</li><li>若排序后的节点数 <code>== numCourses</code>，说明可完成全部课程</li></ul></li></ul><h2 id="会议室"><a href="#会议室" class="headerlink" title="会议室"></a>会议室</h2><ul><li><p><strong>253. 会议室 II</strong>（计算最少需要多少间会议室）</p><ul><li>将所有会议按开始时间排序</li><li>使用最小堆记录正在进行的会议的结束时间</li><li>遇到新的会议时，检查是否能复用已结束的会议室</li><li>最后堆的大小即为最少会议室数</li></ul></li><li><p><strong>2402. 会议室 III</strong>（找出被安排次数最多的会议室编号）（如果没有可用的会议室，会议将会延期，直到存在空闲的会议室。延期会议的持续时间和原会议持续时间 相同 ）</p><ul><li><p>所有会议按开始时间排序</p></li><li><p>构造两个最小堆：</p><ul><li>空闲会议室（按编号）</li><li>占用会议室（按结束时间 + 编号）</li></ul></li><li><p>每轮会议安排时：</p><ul><li>如果无空闲会议室，则延期</li><li>记录每个会议室的使用次数</li></ul></li><li><p>最终返回使用次数最多的会议室中编号最小者</p></li></ul></li></ul><h2 id="买卖股票"><a href="#买卖股票" class="headerlink" title="买卖股票"></a>买卖股票</h2><ul><li><strong>309. 最佳买卖股票时机含冷冻期</strong><ul><li><p>卖出股票后，你无法在第二天买入股票 (即冷冻期为 1 天)。</p></li><li><p>三种状态转移：</p><ul><li><code>f[i][0]</code>: 第 i 天持有股票</li><li><code>f[i][1]</code>: 第 i 天卖出股票（进入冷冻期）</li><li><code>f[i][2]</code>: 第 i 天未持股（非冷冻期）</li></ul></li><li><p>状态转移方程：</p><ul><li><code>f[i][0] = max(f[i-1][0], f[i-1][2] - prices[i])</code></li><li><code>f[i][1] = f[i-1][0] + prices[i]</code></li><li><code>f[i][2] = max(f[i-1][1], f[i-1][2])</code></li></ul></li><li><p>最终答案：<code>max(f[n-1][1], f[n-1][2])</code></p></li></ul></li></ul><h2 id="高楼扔鸡蛋"><a href="#高楼扔鸡蛋" class="headerlink" title="高楼扔鸡蛋"></a>高楼扔鸡蛋</h2><ul><li><p><strong>887. 鸡蛋掉落</strong></p><ul><li><p>给定 <code>k</code> 个鸡蛋和 <code>n</code> 层楼，找出确定临界楼层所需的最少操作次数（最坏情况下）</p></li><li><p>定义：<code>f(t, k)</code> 表示在最多尝试 <code>t</code> 次、拥有 <code>k</code> 个鸡蛋的情况下，最多能测试的楼层数</p><ul><li>转移方程：<code>f(t, k) = 1 + f(t-1, k-1) + f(t-1, k)</code></li></ul></li><li><p>最终寻找最小的 <code>t</code>，使得 <code>f(t, k) &gt;= n</code></p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">superEggDrop</span><span class="params">(k <span class="type">int</span>, n <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    ans := math.MaxInt32</span><br><span class="line">    dp := <span class="built_in">make</span>([][]<span class="type">int</span>, n+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= n; i++ &#123;</span><br><span class="line">        dp[i] = <span class="built_in">make</span>([]<span class="type">int</span>, k+<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= n; i++ &#123;</span><br><span class="line">        dp[i][<span class="number">1</span>] = i</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> j := <span class="number">1</span>; j &lt;= k; j++ &#123;</span><br><span class="line">        dp[<span class="number">1</span>][j] = <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    i := <span class="number">2</span></span><br><span class="line">    <span class="keyword">for</span> i &lt;= n &#123;</span><br><span class="line">        <span class="keyword">for</span> j := <span class="number">1</span>; j &lt;= k; j++ &#123;</span><br><span class="line">            dp[i][j] = <span class="number">1</span> + dp[i<span class="number">-1</span>][j<span class="number">-1</span>] + dp[i<span class="number">-1</span>][j]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> dp[i][k] &gt;= n &#123;</span><br><span class="line">            ans = i</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        i++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>学习总被寄予理解的希望，现实却常逼我们回归重复与记忆的路径。掌握技巧、熟悉模板，也许并不光鲜，却是应对复杂世界最有效的方式之一。</li><li>然而熟练，何尝不是另一种形式的“背”呢。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;最近重新刷LeetCode，对一些算法基础和套路做下总结，以做备忘&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&quot;简要分类总结&quot;&gt;&lt;a href=&quot;#简要分类总结&quot; class=</summary>
      
    
    
    
    
    <category term="algorithm" scheme="http://yoursite.com/tags/algorithm/"/>
    
    <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>“人工智能”一词是否准确？一次关于AI本质的反思</title>
    <link href="http://yoursite.com/2025/05/31/20250531-ren-gong-zhi-neng-yi-ci-shi-fou-zhun-que-yi-ci-guan-yu-ai-ben-zhi-de-fan-si/"/>
    <id>http://yoursite.com/2025/05/31/20250531-ren-gong-zhi-neng-yi-ci-shi-fou-zhun-que-yi-ci-guan-yu-ai-ben-zhi-de-fan-si/</id>
    <published>2025-05-30T16:22:28.000Z</published>
    <updated>2025-05-30T16:34:13.729Z</updated>
    
    <content type="html"><![CDATA[<blockquote><blockquote><p>AI – “基于数据的规律发现系统”</p></blockquote></blockquote><ul><li>“人工智能（AI）”这个名字，其实是一种历史性命名，也是一种拟人化的表达。它给人一种错觉，仿佛机器在模仿或复制人类的智能。然而，从技术本质上看，今天的人工智能主要依赖于数据驱动的模式识别和规律学习，更准确地说，它是一种“基于数据的规律发现系统”。无论是人类还是机器，学习的对象都是客观存在的规律，只是各自的方法不同。规律本身并不依赖于学习者，它们存在于自然和社会系统之中，等待被发现。机器学习的意义，不在于赋予机器“像人一样的智能”，而在于它可以在极大规模和复杂度下识别人类难以企及的模式，这种能力甚至在某些领域已经超越了人类。然而，AI虽能拟合规律，却不具备理解、动机和意识，因此我们说它“智能”仍属工程性描述，而非哲学意义上的智能。从这个角度看，“人工智能”这一术语在一定程度上是误导性的，如果要更准确地描述其本质，也许“规律学习系统”或“模式发现机器”更贴切，但这类表述在传播和产业化上显然不如“AI”简洁有力。因此，当前的术语是一种权衡：技术准确性让位于传播效率。我们需要清醒地认识到，AI不是在“思考”，它只是以统计和优化的方式，从数据中提取规律，并按特定目标进行预测或生成。</li></ul><hr><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><pre>AI这个名字其实并不准确人工智能其实是通过数据来学习规律跟人没有关系只是人或机器用他们的方式去学习，不管你人类或机器学不学习规律就在那里，只是表现形式不一样，但规律的本质是一样的，而且有些规律人类也学不会，超过人的能力所以叫人工智能是片面的表达应该叫智能规律，或规律学习？——当然，以下是对原文的整理和简要总结：⸻整理后的表达：“人工智能（AI）”这个名称其实并不准确。所谓人工智能，本质上只是通过数据来学习和提取规律的过程，与人类的思维或意识没有直接关系。无论是人还是机器，学习的只是客观存在的规律，而这些规律本身独立于学习主体，始终存在，只是表现形式不同而已。机器和人只是用不同的方式去接近这些规律，有些规律甚至超出了人类的认知能力，只有机器才能捕捉到。因此，用“人工智能”来命名这种技术是片面的，更准确的表达也许应该是“智能规律”或“规律学习”。⸻简要总结观点：这段文字认为，“人工智能”这一术语带有误导性，因为它强调了“人”而忽略了技术的本质：对客观规律的学习和拟合。作者主张，AI其实是一种“规律学习”系统，不应被简单等同于模仿人类智能。</pre>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;AI – “基于数据的规律发现系统”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;“人工智能（AI）”这个名字，其实是一种历史性命名，也是一种拟人化的表达。它给人一种错觉，仿佛机器在模</summary>
      
    
    
    
    
    <category term="AI" scheme="http://yoursite.com/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>使用Java调用Rust构建的动态库</title>
    <link href="http://yoursite.com/2025/03/23/20250323-shi-yong-java-diao-yong-rust-gou-jian-de-dong-tai-ku/"/>
    <id>http://yoursite.com/2025/03/23/20250323-shi-yong-java-diao-yong-rust-gou-jian-de-dong-tai-ku/</id>
    <published>2025-03-23T06:41:37.000Z</published>
    <updated>2025-03-23T16:12:12.440Z</updated>
    
    <content type="html"><![CDATA[<blockquote><blockquote><p>近期帮朋友做一个需求，需要将某个Rust项目的一部分功能移植到Java中，使Java应用能使用</p></blockquote></blockquote><h2 id="方案1-直接将Rust翻译成Java代码"><a href="#方案1-直接将Rust翻译成Java代码" class="headerlink" title="方案1: 直接将Rust翻译成Java代码"></a>方案1: 直接将Rust翻译成Java代码</h2><blockquote><blockquote><p>前置准备：将Rust项目跑通，方便通过debug对照执行细节，从而一步步翻译成Java代码<br>希望借助AI的力量帮忙完成</p></blockquote></blockquote><ul><li>借助AI的方案如下：<ul><li>首先，我已经跑通了需要抽取的功能的相关测试用例</li><li>然后，让AI帮忙将涉及这些功能相关的代码抽取成单独的Rust项目（结果还是很乱七八糟）</li><li>大概是因为上下文内容太多的关系，AI执行任务的效果很差</li><li>没办法，于是自己拆分代码，让AI软件帮忙根据代码块逐个进行转化，结果效果是好了很多，能帮助不少，不过这样效率太低，而且AI有时候也经常出错，需要自己慢慢调整</li><li>看来AI目前在一次性的转化大量代码的效率和准确性还是不够</li><li>本次程序员该懒就懒的宗旨，我决定另辟蹊径，采用方案2</li></ul></li></ul><h2 id="方案2-直接将相关功能的Rust功能编译成动态库，由Java直接调用"><a href="#方案2-直接将相关功能的Rust功能编译成动态库，由Java直接调用" class="headerlink" title="方案2: 直接将相关功能的Rust功能编译成动态库，由Java直接调用"></a>方案2: 直接将相关功能的Rust功能编译成动态库，由Java直接调用</h2><blockquote><blockquote><p>省去翻译代码的重复工作<br>需要构建不同平台的动态库<br>Java代码在加载前需要判断环境加载相应的动态库<br>使用Github Action来构建各种平台的动态库<br>Java端充分测试，Java8应用测试，Java9以上模块化系统是否可用测试，Windows等其他平台测试</p></blockquote></blockquote><hr><blockquote><blockquote><p>以下由AI（ChatGPT）帮我完成的文章</p></blockquote></blockquote><h1 id="使用Java调用Rust构建的动态库"><a href="#使用Java调用Rust构建的动态库" class="headerlink" title="使用Java调用Rust构建的动态库"></a>使用Java调用Rust构建的动态库</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>在最近的一个项目中，我需要将一个Rust项目中的部分功能迁移到Java应用中，供Java系统调用。为了简化过程，我决定绕过将Rust代码完全转化为Java的复杂任务，而是直接通过Rust构建动态库，再通过Java来调用。这种方法不仅减少了代码转换的工作量，还利用了Rust的高性能特点，提高了Java应用的效率。</p><h2 id="方案1-直接将Rust翻译成Java代码-1"><a href="#方案1-直接将Rust翻译成Java代码-1" class="headerlink" title="方案1: 直接将Rust翻译成Java代码"></a>方案1: 直接将Rust翻译成Java代码</h2><h3 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h3><p>为了开始这个过程，我首先确保了Rust项目能够成功运行，并且通过调试工具逐步分析每个功能的执行细节。这是为了确保我可以一步步将Rust的实现逻辑转化为Java代码。</p><h3 id="使用AI进行代码转换"><a href="#使用AI进行代码转换" class="headerlink" title="使用AI进行代码转换"></a>使用AI进行代码转换</h3><p>最初，我尝试借助AI工具自动化地将Rust代码转换为Java代码。以下是我使用AI进行代码转换的过程：</p><ul><li>我首先跑通了相关的测试用例，确保所有需要移植的功能都能正常工作。</li><li>然后，我让AI帮助抽取与这些功能相关的Rust代码，并转化成单独的Rust项目。但由于上下文过多，AI的效果并不理想，生成的代码混乱且不完整。</li><li>之后，我将代码拆分成更小的部分，让AI逐一处理，虽然效果有所改善，但这种方式依旧效率低下，且AI经常会出错，导致我不得不花大量时间修正。</li></ul><p>这一过程中，我意识到AI在一次性大规模转化代码时的准确性和效率仍然有待提升。最终，我决定放弃这条路，转而尝试另一种更直接的方案——方案2。</p><h2 id="方案2-直接将Rust功能编译成动态库，由Java调用"><a href="#方案2-直接将Rust功能编译成动态库，由Java调用" class="headerlink" title="方案2: 直接将Rust功能编译成动态库，由Java调用"></a>方案2: 直接将Rust功能编译成动态库，由Java调用</h2><h3 id="思路与优势"><a href="#思路与优势" class="headerlink" title="思路与优势"></a>思路与优势</h3><p>与其将Rust代码翻译成Java代码，我决定直接将Rust的功能编译成动态库（.dll 或 .so），然后在Java中通过JNI（Java Native Interface）调用这些动态库。这样可以避免代码翻译过程中的麻烦，并且能够充分利用Rust在性能上的优势。</p><h3 id="构建Rust动态库"><a href="#构建Rust动态库" class="headerlink" title="构建Rust动态库"></a>构建Rust动态库</h3><p>在实现这一方案时，我需要做以下几个步骤：</p><ol><li><p><strong>编译Rust代码为动态库</strong>：通过Rust的<code>cargo</code>工具，将Rust代码编译成适用于不同平台的动态库。这需要为每个平台生成相应的二进制文件，如Windows下的<code>.dll</code>，Linux下的<code>.so</code>，以及MacOS下的<code>.dylib</code>。</p></li><li><p><strong>使用Github Actions自动化构建</strong>：为了支持多平台的动态库构建，我使用了Github Actions来自动化构建过程。这样，无论是Windows、Linux还是MacOS，都会根据需要自动生成对应的动态库，极大地简化了跨平台的构建工作。</p></li><li><p><strong>Java端加载动态库</strong>：Java通过JNI加载Rust编译出的动态库，并调用其中的函数。在加载时，Java代码会先检测当前运行环境，根据操作系统加载相应的库文件。</p></li><li><p><strong>平台兼容性测试</strong>：为了确保Java能够顺利调用Rust动态库，我在多个平台上进行了充分的测试。这包括：</p><ul><li>在Java 8环境下进行功能测试。</li><li>验证在Java 9及以上版本的模块化系统下，Java与Rust动态库的兼容性。</li><li>测试在Windows、Linux和MacOS等不同平台下的表现。</li></ul></li></ol><h3 id="方案优势"><a href="#方案优势" class="headerlink" title="方案优势"></a>方案优势</h3><ul><li><strong>减少工作量</strong>：不需要将Rust代码完全翻译为Java代码，避免了翻译过程中的复杂性和错误。</li><li><strong>高效的性能</strong>：Rust的性能优势得以保留，Java通过调用Rust动态库，可以在性能上得到显著提升。</li><li><strong>跨平台支持</strong>：通过自动化构建不同平台的动态库，Java应用能够轻松支持Windows、Linux、MacOS等多种操作系统。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过将Rust功能编译成动态库并在Java中调用，我成功地绕过了将Rust代码完全转化为Java的复杂过程，同时还能够充分利用Rust的性能优势。虽然在构建过程中涉及到平台适配和自动化构建，但这一方案的灵活性和高效性使其成为解决问题的最佳选择。对于有类似需求的开发者来说，这无疑是一个值得尝试的方案。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;近期帮朋友做一个需求，需要将某个Rust项目的一部分功能移植到Java中，使Java应用能使用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;方案1-直接将Rust翻译成Java代码&quot;&gt;&lt;</summary>
      
    
    
    
    
    <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
    <category term="Rust" scheme="http://yoursite.com/tags/Rust/"/>
    
    <category term="JNI" scheme="http://yoursite.com/tags/JNI/"/>
    
  </entry>
  
</feed>
